
17_ADC_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001350  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080014e0  080014e0  000024e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001528  08001528  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  08001528  08001528  00002528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001530  08001530  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001530  08001530  00002530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001534  08001534  00002534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001538  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000305c  2**0
                  CONTENTS
 10 .bss          00000170  2000005c  2000005c  0000305c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001cc  200001cc  0000305c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000164d  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000006c2  00000000  00000000  000046d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001b0  00000000  00000000  00004da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000128  00000000  00000000  00004f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a0be  00000000  00000000  00005078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000022f1  00000000  00000000  0001f136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e6bf  00000000  00000000  00021427  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000afae6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000ccc  00000000  00000000  000afb2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  000b07f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080014c8 	.word	0x080014c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080014c8 	.word	0x080014c8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800027a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800027e:	2b00      	cmp	r3, #0
 8000280:	db0b      	blt.n	800029a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	f003 021f 	and.w	r2, r3, #31
 8000288:	4907      	ldr	r1, [pc, #28]	@ (80002a8 <__NVIC_EnableIRQ+0x38>)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	095b      	lsrs	r3, r3, #5
 8000290:	2001      	movs	r0, #1
 8000292:	fa00 f202 	lsl.w	r2, r0, r2
 8000296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800029a:	bf00      	nop
 800029c:	370c      	adds	r7, #12
 800029e:	46bd      	mov	sp, r7
 80002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	e000e100 	.word	0xe000e100

080002ac <start_conversion>:
	ADC1->CR2 |= CR2_ADON;
}


void start_conversion(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
	//Start the ADC conversion
	//ADC_CR2 SWSTART setting this bit starts the conversion
	ADC1->CR2 |= CR2_SWSTART;
 80002b0:	4b05      	ldr	r3, [pc, #20]	@ (80002c8 <start_conversion+0x1c>)
 80002b2:	689b      	ldr	r3, [r3, #8]
 80002b4:	4a04      	ldr	r2, [pc, #16]	@ (80002c8 <start_conversion+0x1c>)
 80002b6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80002ba:	6093      	str	r3, [r2, #8]
}
 80002bc:	bf00      	nop
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	40012000 	.word	0x40012000

080002cc <pa1_adc_interrupt_init>:
	return (ADC1->DR);
}


void pa1_adc_interrupt_init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	/*****Configure the ADC GPIO pin******/
	RCC->AHB1ENR |= GPIOAEN; //enable clock access to GPIOA
 80002d0:	4b17      	ldr	r3, [pc, #92]	@ (8000330 <pa1_adc_interrupt_init+0x64>)
 80002d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002d4:	4a16      	ldr	r2, [pc, #88]	@ (8000330 <pa1_adc_interrupt_init+0x64>)
 80002d6:	f043 0301 	orr.w	r3, r3, #1
 80002da:	6313      	str	r3, [r2, #48]	@ 0x30
	//Enable clock to adc pin port (GPIOA) PA1
	//Set mode of PA1 to analog mode, looking at MODER register pin 1 must be set to 11 for analog
	GPIOA->MODER |=(1U<<3);
 80002dc:	4b15      	ldr	r3, [pc, #84]	@ (8000334 <pa1_adc_interrupt_init+0x68>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a14      	ldr	r2, [pc, #80]	@ (8000334 <pa1_adc_interrupt_init+0x68>)
 80002e2:	f043 0308 	orr.w	r3, r3, #8
 80002e6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<2);
 80002e8:	4b12      	ldr	r3, [pc, #72]	@ (8000334 <pa1_adc_interrupt_init+0x68>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a11      	ldr	r2, [pc, #68]	@ (8000334 <pa1_adc_interrupt_init+0x68>)
 80002ee:	f043 0304 	orr.w	r3, r3, #4
 80002f2:	6013      	str	r3, [r2, #0]
	/*****Configure the ADC peripheral /module*******/

	//Enable clock access to ADC
	RCC->APB2ENR |=ADC1EN;
 80002f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000330 <pa1_adc_interrupt_init+0x64>)
 80002f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000330 <pa1_adc_interrupt_init+0x64>)
 80002fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002fe:	6453      	str	r3, [r2, #68]	@ 0x44

	//Enable ADC end of conversion interrupt
	ADC1->CR1 |= CR1_EOCIE;
 8000300:	4b0d      	ldr	r3, [pc, #52]	@ (8000338 <pa1_adc_interrupt_init+0x6c>)
 8000302:	685b      	ldr	r3, [r3, #4]
 8000304:	4a0c      	ldr	r2, [pc, #48]	@ (8000338 <pa1_adc_interrupt_init+0x6c>)
 8000306:	f043 0320 	orr.w	r3, r3, #32
 800030a:	6053      	str	r3, [r2, #4]

	//Enable ADC interrupt in NVIC
	NVIC_EnableIRQ(ADC_IRQn);
 800030c:	2012      	movs	r0, #18
 800030e:	f7ff ffaf 	bl	8000270 <__NVIC_EnableIRQ>
	*first  = ch5
	*second = ch2
	*third = ch3
	*for the first sequence place binary 5 in the first sequence location
	*/
	ADC1->SQR3 = ADC_CH1;
 8000312:	4b09      	ldr	r3, [pc, #36]	@ (8000338 <pa1_adc_interrupt_init+0x6c>)
 8000314:	2201      	movs	r2, #1
 8000316:	635a      	str	r2, [r3, #52]	@ 0x34

	//configure conversion sequence length
	ADC1->SQR1 = ADC_SEQ_LEN_1; //SQR1 L denotes the number of conversions so for just one conversion set L to all 0's
 8000318:	4b07      	ldr	r3, [pc, #28]	@ (8000338 <pa1_adc_interrupt_init+0x6c>)
 800031a:	2200      	movs	r2, #0
 800031c:	62da      	str	r2, [r3, #44]	@ 0x2c

	//Enable the module
	ADC1->CR2 |= CR2_ADON;
 800031e:	4b06      	ldr	r3, [pc, #24]	@ (8000338 <pa1_adc_interrupt_init+0x6c>)
 8000320:	689b      	ldr	r3, [r3, #8]
 8000322:	4a05      	ldr	r2, [pc, #20]	@ (8000338 <pa1_adc_interrupt_init+0x6c>)
 8000324:	f043 0301 	orr.w	r3, r3, #1
 8000328:	6093      	str	r3, [r2, #8]
}
 800032a:	bf00      	nop
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	40023800 	.word	0x40023800
 8000334:	40020000 	.word	0x40020000
 8000338:	40012000 	.word	0x40012000

0800033c <main>:
static void adc_callback(void);

uint32_t sensor_value;

int main(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	uart2_tx_init();
 8000340:	f000 f8de 	bl	8000500 <uart2_tx_init>
	pa1_adc_interrupt_init();
 8000344:	f7ff ffc2 	bl	80002cc <pa1_adc_interrupt_init>
	start_conversion();
 8000348:	f7ff ffb0 	bl	80002ac <start_conversion>


	while(1)
 800034c:	bf00      	nop
 800034e:	e7fd      	b.n	800034c <main+0x10>

08000350 <adc_callback>:

	}
}

static void adc_callback(void)
		{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
			sensor_value = ADC1->DR;
 8000354:	4b05      	ldr	r3, [pc, #20]	@ (800036c <adc_callback+0x1c>)
 8000356:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000358:	4a05      	ldr	r2, [pc, #20]	@ (8000370 <adc_callback+0x20>)
 800035a:	6013      	str	r3, [r2, #0]
			printf("Sensor value : %d \n\r", (int)sensor_value);
 800035c:	4b04      	ldr	r3, [pc, #16]	@ (8000370 <adc_callback+0x20>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4619      	mov	r1, r3
 8000362:	4804      	ldr	r0, [pc, #16]	@ (8000374 <adc_callback+0x24>)
 8000364:	f000 fa42 	bl	80007ec <iprintf>
		}
 8000368:	bf00      	nop
 800036a:	bd80      	pop	{r7, pc}
 800036c:	40012000 	.word	0x40012000
 8000370:	20000078 	.word	0x20000078
 8000374:	080014e0 	.word	0x080014e0

08000378 <ADC_IRQHandler>:


//From vector table the name for ADC interrupt handler is ADC_IRQHandler
void ADC_IRQHandler(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
	//check if EOC end of conversion flag is raised in status register
	if((ADC1->SR & SR_EOC) != 0) //if ADC is not equal to 0 i.e. set
 800037c:	4b07      	ldr	r3, [pc, #28]	@ (800039c <ADC_IRQHandler+0x24>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	f003 0302 	and.w	r3, r3, #2
 8000384:	2b00      	cmp	r3, #0
 8000386:	d007      	beq.n	8000398 <ADC_IRQHandler+0x20>
	{
		//Clear status flag EOC
		ADC1->SR &=~SR_EOC;
 8000388:	4b04      	ldr	r3, [pc, #16]	@ (800039c <ADC_IRQHandler+0x24>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a03      	ldr	r2, [pc, #12]	@ (800039c <ADC_IRQHandler+0x24>)
 800038e:	f023 0302 	bic.w	r3, r3, #2
 8000392:	6013      	str	r3, [r2, #0]
		//Do something (call back function)
		adc_callback();
 8000394:	f7ff ffdc 	bl	8000350 <adc_callback>
	}

}
 8000398:	bf00      	nop
 800039a:	bd80      	pop	{r7, pc}
 800039c:	40012000 	.word	0x40012000

080003a0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b086      	sub	sp, #24
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	60f8      	str	r0, [r7, #12]
 80003a8:	60b9      	str	r1, [r7, #8]
 80003aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003ac:	2300      	movs	r3, #0
 80003ae:	617b      	str	r3, [r7, #20]
 80003b0:	e00a      	b.n	80003c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80003b2:	f3af 8000 	nop.w
 80003b6:	4601      	mov	r1, r0
 80003b8:	68bb      	ldr	r3, [r7, #8]
 80003ba:	1c5a      	adds	r2, r3, #1
 80003bc:	60ba      	str	r2, [r7, #8]
 80003be:	b2ca      	uxtb	r2, r1
 80003c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003c2:	697b      	ldr	r3, [r7, #20]
 80003c4:	3301      	adds	r3, #1
 80003c6:	617b      	str	r3, [r7, #20]
 80003c8:	697a      	ldr	r2, [r7, #20]
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	429a      	cmp	r2, r3
 80003ce:	dbf0      	blt.n	80003b2 <_read+0x12>
  }

  return len;
 80003d0:	687b      	ldr	r3, [r7, #4]
}
 80003d2:	4618      	mov	r0, r3
 80003d4:	3718      	adds	r7, #24
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}

080003da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003da:	b580      	push	{r7, lr}
 80003dc:	b086      	sub	sp, #24
 80003de:	af00      	add	r7, sp, #0
 80003e0:	60f8      	str	r0, [r7, #12]
 80003e2:	60b9      	str	r1, [r7, #8]
 80003e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003e6:	2300      	movs	r3, #0
 80003e8:	617b      	str	r3, [r7, #20]
 80003ea:	e009      	b.n	8000400 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80003ec:	68bb      	ldr	r3, [r7, #8]
 80003ee:	1c5a      	adds	r2, r3, #1
 80003f0:	60ba      	str	r2, [r7, #8]
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	4618      	mov	r0, r3
 80003f6:	f000 f877 	bl	80004e8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003fa:	697b      	ldr	r3, [r7, #20]
 80003fc:	3301      	adds	r3, #1
 80003fe:	617b      	str	r3, [r7, #20]
 8000400:	697a      	ldr	r2, [r7, #20]
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	429a      	cmp	r2, r3
 8000406:	dbf1      	blt.n	80003ec <_write+0x12>
  }
  return len;
 8000408:	687b      	ldr	r3, [r7, #4]
}
 800040a:	4618      	mov	r0, r3
 800040c:	3718      	adds	r7, #24
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}

08000412 <_close>:

int _close(int file)
{
 8000412:	b480      	push	{r7}
 8000414:	b083      	sub	sp, #12
 8000416:	af00      	add	r7, sp, #0
 8000418:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800041a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800041e:	4618      	mov	r0, r3
 8000420:	370c      	adds	r7, #12
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr

0800042a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800042a:	b480      	push	{r7}
 800042c:	b083      	sub	sp, #12
 800042e:	af00      	add	r7, sp, #0
 8000430:	6078      	str	r0, [r7, #4]
 8000432:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000434:	683b      	ldr	r3, [r7, #0]
 8000436:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800043a:	605a      	str	r2, [r3, #4]
  return 0;
 800043c:	2300      	movs	r3, #0
}
 800043e:	4618      	mov	r0, r3
 8000440:	370c      	adds	r7, #12
 8000442:	46bd      	mov	sp, r7
 8000444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000448:	4770      	bx	lr

0800044a <_isatty>:

int _isatty(int file)
{
 800044a:	b480      	push	{r7}
 800044c:	b083      	sub	sp, #12
 800044e:	af00      	add	r7, sp, #0
 8000450:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000452:	2301      	movs	r3, #1
}
 8000454:	4618      	mov	r0, r3
 8000456:	370c      	adds	r7, #12
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr

08000460 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000460:	b480      	push	{r7}
 8000462:	b085      	sub	sp, #20
 8000464:	af00      	add	r7, sp, #0
 8000466:	60f8      	str	r0, [r7, #12]
 8000468:	60b9      	str	r1, [r7, #8]
 800046a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800046c:	2300      	movs	r3, #0
}
 800046e:	4618      	mov	r0, r3
 8000470:	3714      	adds	r7, #20
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr
	...

0800047c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b086      	sub	sp, #24
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000484:	4a14      	ldr	r2, [pc, #80]	@ (80004d8 <_sbrk+0x5c>)
 8000486:	4b15      	ldr	r3, [pc, #84]	@ (80004dc <_sbrk+0x60>)
 8000488:	1ad3      	subs	r3, r2, r3
 800048a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800048c:	697b      	ldr	r3, [r7, #20]
 800048e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000490:	4b13      	ldr	r3, [pc, #76]	@ (80004e0 <_sbrk+0x64>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	2b00      	cmp	r3, #0
 8000496:	d102      	bne.n	800049e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000498:	4b11      	ldr	r3, [pc, #68]	@ (80004e0 <_sbrk+0x64>)
 800049a:	4a12      	ldr	r2, [pc, #72]	@ (80004e4 <_sbrk+0x68>)
 800049c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800049e:	4b10      	ldr	r3, [pc, #64]	@ (80004e0 <_sbrk+0x64>)
 80004a0:	681a      	ldr	r2, [r3, #0]
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	4413      	add	r3, r2
 80004a6:	693a      	ldr	r2, [r7, #16]
 80004a8:	429a      	cmp	r2, r3
 80004aa:	d207      	bcs.n	80004bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004ac:	f000 fa42 	bl	8000934 <__errno>
 80004b0:	4603      	mov	r3, r0
 80004b2:	220c      	movs	r2, #12
 80004b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004b6:	f04f 33ff 	mov.w	r3, #4294967295
 80004ba:	e009      	b.n	80004d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004bc:	4b08      	ldr	r3, [pc, #32]	@ (80004e0 <_sbrk+0x64>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004c2:	4b07      	ldr	r3, [pc, #28]	@ (80004e0 <_sbrk+0x64>)
 80004c4:	681a      	ldr	r2, [r3, #0]
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	4413      	add	r3, r2
 80004ca:	4a05      	ldr	r2, [pc, #20]	@ (80004e0 <_sbrk+0x64>)
 80004cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004ce:	68fb      	ldr	r3, [r7, #12]
}
 80004d0:	4618      	mov	r0, r3
 80004d2:	3718      	adds	r7, #24
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	20020000 	.word	0x20020000
 80004dc:	00000400 	.word	0x00000400
 80004e0:	2000007c 	.word	0x2000007c
 80004e4:	200001d0 	.word	0x200001d0

080004e8 <__io_putchar>:
void uart2_write(int ch);



int __io_putchar(int ch)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 80004f0:	6878      	ldr	r0, [r7, #4]
 80004f2:	f000 f851 	bl	8000598 <uart2_write>
	return ch;
 80004f6:	687b      	ldr	r3, [r7, #4]
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	3708      	adds	r7, #8
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}

08000500 <uart2_tx_init>:
	return USART2->DR;
}
/**********************************************************/

void uart2_tx_init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0

	//Enable clock to GPIOA
	RCC->AHB1ENR |=GPIOAEN;
 8000504:	4b20      	ldr	r3, [pc, #128]	@ (8000588 <uart2_tx_init+0x88>)
 8000506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000508:	4a1f      	ldr	r2, [pc, #124]	@ (8000588 <uart2_tx_init+0x88>)
 800050a:	f043 0301 	orr.w	r3, r3, #1
 800050e:	6313      	str	r3, [r2, #48]	@ 0x30

	//Set PA2 to select alternate function to use the USART MODER2 for PA2
	GPIOA->MODER |=(1U<<5);
 8000510:	4b1e      	ldr	r3, [pc, #120]	@ (800058c <uart2_tx_init+0x8c>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a1d      	ldr	r2, [pc, #116]	@ (800058c <uart2_tx_init+0x8c>)
 8000516:	f043 0320 	orr.w	r3, r3, #32
 800051a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<4);
 800051c:	4b1b      	ldr	r3, [pc, #108]	@ (800058c <uart2_tx_init+0x8c>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a1a      	ldr	r2, [pc, #104]	@ (800058c <uart2_tx_init+0x8c>)
 8000522:	f023 0310 	bic.w	r3, r3, #16
 8000526:	6013      	str	r3, [r2, #0]

	//Set PA2 alternate function type to UART_tx AF7 AFR[0] bits 0-7 AFR[1] bits 8-15
	GPIOA->AFR[0] &=~(1U<<11);
 8000528:	4b18      	ldr	r3, [pc, #96]	@ (800058c <uart2_tx_init+0x8c>)
 800052a:	6a1b      	ldr	r3, [r3, #32]
 800052c:	4a17      	ldr	r2, [pc, #92]	@ (800058c <uart2_tx_init+0x8c>)
 800052e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000532:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 8000534:	4b15      	ldr	r3, [pc, #84]	@ (800058c <uart2_tx_init+0x8c>)
 8000536:	6a1b      	ldr	r3, [r3, #32]
 8000538:	4a14      	ldr	r2, [pc, #80]	@ (800058c <uart2_tx_init+0x8c>)
 800053a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800053e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 8000540:	4b12      	ldr	r3, [pc, #72]	@ (800058c <uart2_tx_init+0x8c>)
 8000542:	6a1b      	ldr	r3, [r3, #32]
 8000544:	4a11      	ldr	r2, [pc, #68]	@ (800058c <uart2_tx_init+0x8c>)
 8000546:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800054a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<8);
 800054c:	4b0f      	ldr	r3, [pc, #60]	@ (800058c <uart2_tx_init+0x8c>)
 800054e:	6a1b      	ldr	r3, [r3, #32]
 8000550:	4a0e      	ldr	r2, [pc, #56]	@ (800058c <uart2_tx_init+0x8c>)
 8000552:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000556:	6213      	str	r3, [r2, #32]

	/*********Configure UART module*************/
	//Enable clock access to UART2
	RCC->APB1ENR |=UART2EN;
 8000558:	4b0b      	ldr	r3, [pc, #44]	@ (8000588 <uart2_tx_init+0x88>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800055c:	4a0a      	ldr	r2, [pc, #40]	@ (8000588 <uart2_tx_init+0x88>)
 800055e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000562:	6413      	str	r3, [r2, #64]	@ 0x40

	//Configure baudrate
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000564:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000568:	4909      	ldr	r1, [pc, #36]	@ (8000590 <uart2_tx_init+0x90>)
 800056a:	480a      	ldr	r0, [pc, #40]	@ (8000594 <uart2_tx_init+0x94>)
 800056c:	f000 f82c 	bl	80005c8 <uart_set_baudrate>
	//Configure the transfer direction
	USART2->CR1 = CR1_TE;  //Enable TE bit and everything else 0 to configure the port as standard configuration
 8000570:	4b08      	ldr	r3, [pc, #32]	@ (8000594 <uart2_tx_init+0x94>)
 8000572:	2208      	movs	r2, #8
 8000574:	60da      	str	r2, [r3, #12]

	//Enable the UART module
	USART2->CR1 |=CR1_UE;  // use or to set only one bit and enable the UART
 8000576:	4b07      	ldr	r3, [pc, #28]	@ (8000594 <uart2_tx_init+0x94>)
 8000578:	68db      	ldr	r3, [r3, #12]
 800057a:	4a06      	ldr	r2, [pc, #24]	@ (8000594 <uart2_tx_init+0x94>)
 800057c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000580:	60d3      	str	r3, [r2, #12]
}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40023800 	.word	0x40023800
 800058c:	40020000 	.word	0x40020000
 8000590:	00f42400 	.word	0x00f42400
 8000594:	40004400 	.word	0x40004400

08000598 <uart2_write>:

void uart2_write(int ch)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	//Make sure the transmit data register is empty by checking the USART status register TXE bit
	while (!(USART2->SR & SR_TXE)){}
 80005a0:	bf00      	nop
 80005a2:	4b08      	ldr	r3, [pc, #32]	@ (80005c4 <uart2_write+0x2c>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d0f9      	beq.n	80005a2 <uart2_write+0xa>

	//Write to the transmit data register
	USART2->DR = (ch & 0xFF);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4a04      	ldr	r2, [pc, #16]	@ (80005c4 <uart2_write+0x2c>)
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	6053      	str	r3, [r2, #4]
}
 80005b6:	bf00      	nop
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	40004400 	.word	0x40004400

080005c8 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
//This function takes the USART you want to use, the peripheral clock in this case APB1_CLK
//which is the system frequency and the required baudrate and writes into the USART_BRR the calculated
//baudrate from the compute_uart_bd function
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	60b9      	str	r1, [r7, #8]
 80005d2:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd (PeriphClk,BaudRate);
 80005d4:	6879      	ldr	r1, [r7, #4]
 80005d6:	68b8      	ldr	r0, [r7, #8]
 80005d8:	f000 f808 	bl	80005ec <compute_uart_bd>
 80005dc:	4603      	mov	r3, r0
 80005de:	461a      	mov	r2, r3
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	609a      	str	r2, [r3, #8]
}
 80005e4:	bf00      	nop
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <compute_uart_bd>:


static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + BaudRate/2U)/BaudRate); // In this case Periph clock is given to the
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	085a      	lsrs	r2, r3, #1
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	441a      	add	r2, r3
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	fbb2 f3f3 	udiv	r3, r2, r3
 8000604:	b29b      	uxth	r3, r3
													//function uart_set_baudrate == APB1_CLK == sys_freq 16000000
													//((16000000+115200/2)/115200) = 69.944
}
 8000606:	4618      	mov	r0, r3
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
	...

08000614 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000614:	480d      	ldr	r0, [pc, #52]	@ (800064c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000616:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000618:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800061c:	480c      	ldr	r0, [pc, #48]	@ (8000650 <LoopForever+0x6>)
  ldr r1, =_edata
 800061e:	490d      	ldr	r1, [pc, #52]	@ (8000654 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000620:	4a0d      	ldr	r2, [pc, #52]	@ (8000658 <LoopForever+0xe>)
  movs r3, #0
 8000622:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000624:	e002      	b.n	800062c <LoopCopyDataInit>

08000626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800062a:	3304      	adds	r3, #4

0800062c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800062c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800062e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000630:	d3f9      	bcc.n	8000626 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000632:	4a0a      	ldr	r2, [pc, #40]	@ (800065c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000634:	4c0a      	ldr	r4, [pc, #40]	@ (8000660 <LoopForever+0x16>)
  movs r3, #0
 8000636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000638:	e001      	b.n	800063e <LoopFillZerobss>

0800063a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800063a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800063c:	3204      	adds	r2, #4

0800063e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800063e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000640:	d3fb      	bcc.n	800063a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000642:	f000 f97d 	bl	8000940 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000646:	f7ff fe79 	bl	800033c <main>

0800064a <LoopForever>:

LoopForever:
  b LoopForever
 800064a:	e7fe      	b.n	800064a <LoopForever>
  ldr   r0, =_estack
 800064c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000654:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000658:	08001538 	.word	0x08001538
  ldr r2, =_sbss
 800065c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000660:	200001cc 	.word	0x200001cc

08000664 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000664:	e7fe      	b.n	8000664 <BusFault_Handler>
	...

08000668 <std>:
 8000668:	2300      	movs	r3, #0
 800066a:	b510      	push	{r4, lr}
 800066c:	4604      	mov	r4, r0
 800066e:	e9c0 3300 	strd	r3, r3, [r0]
 8000672:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000676:	6083      	str	r3, [r0, #8]
 8000678:	8181      	strh	r1, [r0, #12]
 800067a:	6643      	str	r3, [r0, #100]	@ 0x64
 800067c:	81c2      	strh	r2, [r0, #14]
 800067e:	6183      	str	r3, [r0, #24]
 8000680:	4619      	mov	r1, r3
 8000682:	2208      	movs	r2, #8
 8000684:	305c      	adds	r0, #92	@ 0x5c
 8000686:	f000 f906 	bl	8000896 <memset>
 800068a:	4b0d      	ldr	r3, [pc, #52]	@ (80006c0 <std+0x58>)
 800068c:	6263      	str	r3, [r4, #36]	@ 0x24
 800068e:	4b0d      	ldr	r3, [pc, #52]	@ (80006c4 <std+0x5c>)
 8000690:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000692:	4b0d      	ldr	r3, [pc, #52]	@ (80006c8 <std+0x60>)
 8000694:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000696:	4b0d      	ldr	r3, [pc, #52]	@ (80006cc <std+0x64>)
 8000698:	6323      	str	r3, [r4, #48]	@ 0x30
 800069a:	4b0d      	ldr	r3, [pc, #52]	@ (80006d0 <std+0x68>)
 800069c:	6224      	str	r4, [r4, #32]
 800069e:	429c      	cmp	r4, r3
 80006a0:	d006      	beq.n	80006b0 <std+0x48>
 80006a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80006a6:	4294      	cmp	r4, r2
 80006a8:	d002      	beq.n	80006b0 <std+0x48>
 80006aa:	33d0      	adds	r3, #208	@ 0xd0
 80006ac:	429c      	cmp	r4, r3
 80006ae:	d105      	bne.n	80006bc <std+0x54>
 80006b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80006b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006b8:	f000 b966 	b.w	8000988 <__retarget_lock_init_recursive>
 80006bc:	bd10      	pop	{r4, pc}
 80006be:	bf00      	nop
 80006c0:	08000811 	.word	0x08000811
 80006c4:	08000833 	.word	0x08000833
 80006c8:	0800086b 	.word	0x0800086b
 80006cc:	0800088f 	.word	0x0800088f
 80006d0:	20000080 	.word	0x20000080

080006d4 <stdio_exit_handler>:
 80006d4:	4a02      	ldr	r2, [pc, #8]	@ (80006e0 <stdio_exit_handler+0xc>)
 80006d6:	4903      	ldr	r1, [pc, #12]	@ (80006e4 <stdio_exit_handler+0x10>)
 80006d8:	4803      	ldr	r0, [pc, #12]	@ (80006e8 <stdio_exit_handler+0x14>)
 80006da:	f000 b869 	b.w	80007b0 <_fwalk_sglue>
 80006de:	bf00      	nop
 80006e0:	20000000 	.word	0x20000000
 80006e4:	08001229 	.word	0x08001229
 80006e8:	20000010 	.word	0x20000010

080006ec <cleanup_stdio>:
 80006ec:	6841      	ldr	r1, [r0, #4]
 80006ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000720 <cleanup_stdio+0x34>)
 80006f0:	4299      	cmp	r1, r3
 80006f2:	b510      	push	{r4, lr}
 80006f4:	4604      	mov	r4, r0
 80006f6:	d001      	beq.n	80006fc <cleanup_stdio+0x10>
 80006f8:	f000 fd96 	bl	8001228 <_fflush_r>
 80006fc:	68a1      	ldr	r1, [r4, #8]
 80006fe:	4b09      	ldr	r3, [pc, #36]	@ (8000724 <cleanup_stdio+0x38>)
 8000700:	4299      	cmp	r1, r3
 8000702:	d002      	beq.n	800070a <cleanup_stdio+0x1e>
 8000704:	4620      	mov	r0, r4
 8000706:	f000 fd8f 	bl	8001228 <_fflush_r>
 800070a:	68e1      	ldr	r1, [r4, #12]
 800070c:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <cleanup_stdio+0x3c>)
 800070e:	4299      	cmp	r1, r3
 8000710:	d004      	beq.n	800071c <cleanup_stdio+0x30>
 8000712:	4620      	mov	r0, r4
 8000714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000718:	f000 bd86 	b.w	8001228 <_fflush_r>
 800071c:	bd10      	pop	{r4, pc}
 800071e:	bf00      	nop
 8000720:	20000080 	.word	0x20000080
 8000724:	200000e8 	.word	0x200000e8
 8000728:	20000150 	.word	0x20000150

0800072c <global_stdio_init.part.0>:
 800072c:	b510      	push	{r4, lr}
 800072e:	4b0b      	ldr	r3, [pc, #44]	@ (800075c <global_stdio_init.part.0+0x30>)
 8000730:	4c0b      	ldr	r4, [pc, #44]	@ (8000760 <global_stdio_init.part.0+0x34>)
 8000732:	4a0c      	ldr	r2, [pc, #48]	@ (8000764 <global_stdio_init.part.0+0x38>)
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	4620      	mov	r0, r4
 8000738:	2200      	movs	r2, #0
 800073a:	2104      	movs	r1, #4
 800073c:	f7ff ff94 	bl	8000668 <std>
 8000740:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000744:	2201      	movs	r2, #1
 8000746:	2109      	movs	r1, #9
 8000748:	f7ff ff8e 	bl	8000668 <std>
 800074c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000750:	2202      	movs	r2, #2
 8000752:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000756:	2112      	movs	r1, #18
 8000758:	f7ff bf86 	b.w	8000668 <std>
 800075c:	200001b8 	.word	0x200001b8
 8000760:	20000080 	.word	0x20000080
 8000764:	080006d5 	.word	0x080006d5

08000768 <__sfp_lock_acquire>:
 8000768:	4801      	ldr	r0, [pc, #4]	@ (8000770 <__sfp_lock_acquire+0x8>)
 800076a:	f000 b90e 	b.w	800098a <__retarget_lock_acquire_recursive>
 800076e:	bf00      	nop
 8000770:	200001c1 	.word	0x200001c1

08000774 <__sfp_lock_release>:
 8000774:	4801      	ldr	r0, [pc, #4]	@ (800077c <__sfp_lock_release+0x8>)
 8000776:	f000 b909 	b.w	800098c <__retarget_lock_release_recursive>
 800077a:	bf00      	nop
 800077c:	200001c1 	.word	0x200001c1

08000780 <__sinit>:
 8000780:	b510      	push	{r4, lr}
 8000782:	4604      	mov	r4, r0
 8000784:	f7ff fff0 	bl	8000768 <__sfp_lock_acquire>
 8000788:	6a23      	ldr	r3, [r4, #32]
 800078a:	b11b      	cbz	r3, 8000794 <__sinit+0x14>
 800078c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000790:	f7ff bff0 	b.w	8000774 <__sfp_lock_release>
 8000794:	4b04      	ldr	r3, [pc, #16]	@ (80007a8 <__sinit+0x28>)
 8000796:	6223      	str	r3, [r4, #32]
 8000798:	4b04      	ldr	r3, [pc, #16]	@ (80007ac <__sinit+0x2c>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d1f5      	bne.n	800078c <__sinit+0xc>
 80007a0:	f7ff ffc4 	bl	800072c <global_stdio_init.part.0>
 80007a4:	e7f2      	b.n	800078c <__sinit+0xc>
 80007a6:	bf00      	nop
 80007a8:	080006ed 	.word	0x080006ed
 80007ac:	200001b8 	.word	0x200001b8

080007b0 <_fwalk_sglue>:
 80007b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80007b4:	4607      	mov	r7, r0
 80007b6:	4688      	mov	r8, r1
 80007b8:	4614      	mov	r4, r2
 80007ba:	2600      	movs	r6, #0
 80007bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80007c0:	f1b9 0901 	subs.w	r9, r9, #1
 80007c4:	d505      	bpl.n	80007d2 <_fwalk_sglue+0x22>
 80007c6:	6824      	ldr	r4, [r4, #0]
 80007c8:	2c00      	cmp	r4, #0
 80007ca:	d1f7      	bne.n	80007bc <_fwalk_sglue+0xc>
 80007cc:	4630      	mov	r0, r6
 80007ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80007d2:	89ab      	ldrh	r3, [r5, #12]
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d907      	bls.n	80007e8 <_fwalk_sglue+0x38>
 80007d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80007dc:	3301      	adds	r3, #1
 80007de:	d003      	beq.n	80007e8 <_fwalk_sglue+0x38>
 80007e0:	4629      	mov	r1, r5
 80007e2:	4638      	mov	r0, r7
 80007e4:	47c0      	blx	r8
 80007e6:	4306      	orrs	r6, r0
 80007e8:	3568      	adds	r5, #104	@ 0x68
 80007ea:	e7e9      	b.n	80007c0 <_fwalk_sglue+0x10>

080007ec <iprintf>:
 80007ec:	b40f      	push	{r0, r1, r2, r3}
 80007ee:	b507      	push	{r0, r1, r2, lr}
 80007f0:	4906      	ldr	r1, [pc, #24]	@ (800080c <iprintf+0x20>)
 80007f2:	ab04      	add	r3, sp, #16
 80007f4:	6808      	ldr	r0, [r1, #0]
 80007f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80007fa:	6881      	ldr	r1, [r0, #8]
 80007fc:	9301      	str	r3, [sp, #4]
 80007fe:	f000 f9e9 	bl	8000bd4 <_vfiprintf_r>
 8000802:	b003      	add	sp, #12
 8000804:	f85d eb04 	ldr.w	lr, [sp], #4
 8000808:	b004      	add	sp, #16
 800080a:	4770      	bx	lr
 800080c:	2000000c 	.word	0x2000000c

08000810 <__sread>:
 8000810:	b510      	push	{r4, lr}
 8000812:	460c      	mov	r4, r1
 8000814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000818:	f000 f868 	bl	80008ec <_read_r>
 800081c:	2800      	cmp	r0, #0
 800081e:	bfab      	itete	ge
 8000820:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000822:	89a3      	ldrhlt	r3, [r4, #12]
 8000824:	181b      	addge	r3, r3, r0
 8000826:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800082a:	bfac      	ite	ge
 800082c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800082e:	81a3      	strhlt	r3, [r4, #12]
 8000830:	bd10      	pop	{r4, pc}

08000832 <__swrite>:
 8000832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000836:	461f      	mov	r7, r3
 8000838:	898b      	ldrh	r3, [r1, #12]
 800083a:	05db      	lsls	r3, r3, #23
 800083c:	4605      	mov	r5, r0
 800083e:	460c      	mov	r4, r1
 8000840:	4616      	mov	r6, r2
 8000842:	d505      	bpl.n	8000850 <__swrite+0x1e>
 8000844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000848:	2302      	movs	r3, #2
 800084a:	2200      	movs	r2, #0
 800084c:	f000 f83c 	bl	80008c8 <_lseek_r>
 8000850:	89a3      	ldrh	r3, [r4, #12]
 8000852:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000856:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800085a:	81a3      	strh	r3, [r4, #12]
 800085c:	4632      	mov	r2, r6
 800085e:	463b      	mov	r3, r7
 8000860:	4628      	mov	r0, r5
 8000862:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000866:	f000 b853 	b.w	8000910 <_write_r>

0800086a <__sseek>:
 800086a:	b510      	push	{r4, lr}
 800086c:	460c      	mov	r4, r1
 800086e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000872:	f000 f829 	bl	80008c8 <_lseek_r>
 8000876:	1c43      	adds	r3, r0, #1
 8000878:	89a3      	ldrh	r3, [r4, #12]
 800087a:	bf15      	itete	ne
 800087c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800087e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000882:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000886:	81a3      	strheq	r3, [r4, #12]
 8000888:	bf18      	it	ne
 800088a:	81a3      	strhne	r3, [r4, #12]
 800088c:	bd10      	pop	{r4, pc}

0800088e <__sclose>:
 800088e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000892:	f000 b809 	b.w	80008a8 <_close_r>

08000896 <memset>:
 8000896:	4402      	add	r2, r0
 8000898:	4603      	mov	r3, r0
 800089a:	4293      	cmp	r3, r2
 800089c:	d100      	bne.n	80008a0 <memset+0xa>
 800089e:	4770      	bx	lr
 80008a0:	f803 1b01 	strb.w	r1, [r3], #1
 80008a4:	e7f9      	b.n	800089a <memset+0x4>
	...

080008a8 <_close_r>:
 80008a8:	b538      	push	{r3, r4, r5, lr}
 80008aa:	4d06      	ldr	r5, [pc, #24]	@ (80008c4 <_close_r+0x1c>)
 80008ac:	2300      	movs	r3, #0
 80008ae:	4604      	mov	r4, r0
 80008b0:	4608      	mov	r0, r1
 80008b2:	602b      	str	r3, [r5, #0]
 80008b4:	f7ff fdad 	bl	8000412 <_close>
 80008b8:	1c43      	adds	r3, r0, #1
 80008ba:	d102      	bne.n	80008c2 <_close_r+0x1a>
 80008bc:	682b      	ldr	r3, [r5, #0]
 80008be:	b103      	cbz	r3, 80008c2 <_close_r+0x1a>
 80008c0:	6023      	str	r3, [r4, #0]
 80008c2:	bd38      	pop	{r3, r4, r5, pc}
 80008c4:	200001bc 	.word	0x200001bc

080008c8 <_lseek_r>:
 80008c8:	b538      	push	{r3, r4, r5, lr}
 80008ca:	4d07      	ldr	r5, [pc, #28]	@ (80008e8 <_lseek_r+0x20>)
 80008cc:	4604      	mov	r4, r0
 80008ce:	4608      	mov	r0, r1
 80008d0:	4611      	mov	r1, r2
 80008d2:	2200      	movs	r2, #0
 80008d4:	602a      	str	r2, [r5, #0]
 80008d6:	461a      	mov	r2, r3
 80008d8:	f7ff fdc2 	bl	8000460 <_lseek>
 80008dc:	1c43      	adds	r3, r0, #1
 80008de:	d102      	bne.n	80008e6 <_lseek_r+0x1e>
 80008e0:	682b      	ldr	r3, [r5, #0]
 80008e2:	b103      	cbz	r3, 80008e6 <_lseek_r+0x1e>
 80008e4:	6023      	str	r3, [r4, #0]
 80008e6:	bd38      	pop	{r3, r4, r5, pc}
 80008e8:	200001bc 	.word	0x200001bc

080008ec <_read_r>:
 80008ec:	b538      	push	{r3, r4, r5, lr}
 80008ee:	4d07      	ldr	r5, [pc, #28]	@ (800090c <_read_r+0x20>)
 80008f0:	4604      	mov	r4, r0
 80008f2:	4608      	mov	r0, r1
 80008f4:	4611      	mov	r1, r2
 80008f6:	2200      	movs	r2, #0
 80008f8:	602a      	str	r2, [r5, #0]
 80008fa:	461a      	mov	r2, r3
 80008fc:	f7ff fd50 	bl	80003a0 <_read>
 8000900:	1c43      	adds	r3, r0, #1
 8000902:	d102      	bne.n	800090a <_read_r+0x1e>
 8000904:	682b      	ldr	r3, [r5, #0]
 8000906:	b103      	cbz	r3, 800090a <_read_r+0x1e>
 8000908:	6023      	str	r3, [r4, #0]
 800090a:	bd38      	pop	{r3, r4, r5, pc}
 800090c:	200001bc 	.word	0x200001bc

08000910 <_write_r>:
 8000910:	b538      	push	{r3, r4, r5, lr}
 8000912:	4d07      	ldr	r5, [pc, #28]	@ (8000930 <_write_r+0x20>)
 8000914:	4604      	mov	r4, r0
 8000916:	4608      	mov	r0, r1
 8000918:	4611      	mov	r1, r2
 800091a:	2200      	movs	r2, #0
 800091c:	602a      	str	r2, [r5, #0]
 800091e:	461a      	mov	r2, r3
 8000920:	f7ff fd5b 	bl	80003da <_write>
 8000924:	1c43      	adds	r3, r0, #1
 8000926:	d102      	bne.n	800092e <_write_r+0x1e>
 8000928:	682b      	ldr	r3, [r5, #0]
 800092a:	b103      	cbz	r3, 800092e <_write_r+0x1e>
 800092c:	6023      	str	r3, [r4, #0]
 800092e:	bd38      	pop	{r3, r4, r5, pc}
 8000930:	200001bc 	.word	0x200001bc

08000934 <__errno>:
 8000934:	4b01      	ldr	r3, [pc, #4]	@ (800093c <__errno+0x8>)
 8000936:	6818      	ldr	r0, [r3, #0]
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	2000000c 	.word	0x2000000c

08000940 <__libc_init_array>:
 8000940:	b570      	push	{r4, r5, r6, lr}
 8000942:	4d0d      	ldr	r5, [pc, #52]	@ (8000978 <__libc_init_array+0x38>)
 8000944:	4c0d      	ldr	r4, [pc, #52]	@ (800097c <__libc_init_array+0x3c>)
 8000946:	1b64      	subs	r4, r4, r5
 8000948:	10a4      	asrs	r4, r4, #2
 800094a:	2600      	movs	r6, #0
 800094c:	42a6      	cmp	r6, r4
 800094e:	d109      	bne.n	8000964 <__libc_init_array+0x24>
 8000950:	4d0b      	ldr	r5, [pc, #44]	@ (8000980 <__libc_init_array+0x40>)
 8000952:	4c0c      	ldr	r4, [pc, #48]	@ (8000984 <__libc_init_array+0x44>)
 8000954:	f000 fdb8 	bl	80014c8 <_init>
 8000958:	1b64      	subs	r4, r4, r5
 800095a:	10a4      	asrs	r4, r4, #2
 800095c:	2600      	movs	r6, #0
 800095e:	42a6      	cmp	r6, r4
 8000960:	d105      	bne.n	800096e <__libc_init_array+0x2e>
 8000962:	bd70      	pop	{r4, r5, r6, pc}
 8000964:	f855 3b04 	ldr.w	r3, [r5], #4
 8000968:	4798      	blx	r3
 800096a:	3601      	adds	r6, #1
 800096c:	e7ee      	b.n	800094c <__libc_init_array+0xc>
 800096e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000972:	4798      	blx	r3
 8000974:	3601      	adds	r6, #1
 8000976:	e7f2      	b.n	800095e <__libc_init_array+0x1e>
 8000978:	08001530 	.word	0x08001530
 800097c:	08001530 	.word	0x08001530
 8000980:	08001530 	.word	0x08001530
 8000984:	08001534 	.word	0x08001534

08000988 <__retarget_lock_init_recursive>:
 8000988:	4770      	bx	lr

0800098a <__retarget_lock_acquire_recursive>:
 800098a:	4770      	bx	lr

0800098c <__retarget_lock_release_recursive>:
 800098c:	4770      	bx	lr
	...

08000990 <_free_r>:
 8000990:	b538      	push	{r3, r4, r5, lr}
 8000992:	4605      	mov	r5, r0
 8000994:	2900      	cmp	r1, #0
 8000996:	d041      	beq.n	8000a1c <_free_r+0x8c>
 8000998:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800099c:	1f0c      	subs	r4, r1, #4
 800099e:	2b00      	cmp	r3, #0
 80009a0:	bfb8      	it	lt
 80009a2:	18e4      	addlt	r4, r4, r3
 80009a4:	f000 f8e0 	bl	8000b68 <__malloc_lock>
 80009a8:	4a1d      	ldr	r2, [pc, #116]	@ (8000a20 <_free_r+0x90>)
 80009aa:	6813      	ldr	r3, [r2, #0]
 80009ac:	b933      	cbnz	r3, 80009bc <_free_r+0x2c>
 80009ae:	6063      	str	r3, [r4, #4]
 80009b0:	6014      	str	r4, [r2, #0]
 80009b2:	4628      	mov	r0, r5
 80009b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80009b8:	f000 b8dc 	b.w	8000b74 <__malloc_unlock>
 80009bc:	42a3      	cmp	r3, r4
 80009be:	d908      	bls.n	80009d2 <_free_r+0x42>
 80009c0:	6820      	ldr	r0, [r4, #0]
 80009c2:	1821      	adds	r1, r4, r0
 80009c4:	428b      	cmp	r3, r1
 80009c6:	bf01      	itttt	eq
 80009c8:	6819      	ldreq	r1, [r3, #0]
 80009ca:	685b      	ldreq	r3, [r3, #4]
 80009cc:	1809      	addeq	r1, r1, r0
 80009ce:	6021      	streq	r1, [r4, #0]
 80009d0:	e7ed      	b.n	80009ae <_free_r+0x1e>
 80009d2:	461a      	mov	r2, r3
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	b10b      	cbz	r3, 80009dc <_free_r+0x4c>
 80009d8:	42a3      	cmp	r3, r4
 80009da:	d9fa      	bls.n	80009d2 <_free_r+0x42>
 80009dc:	6811      	ldr	r1, [r2, #0]
 80009de:	1850      	adds	r0, r2, r1
 80009e0:	42a0      	cmp	r0, r4
 80009e2:	d10b      	bne.n	80009fc <_free_r+0x6c>
 80009e4:	6820      	ldr	r0, [r4, #0]
 80009e6:	4401      	add	r1, r0
 80009e8:	1850      	adds	r0, r2, r1
 80009ea:	4283      	cmp	r3, r0
 80009ec:	6011      	str	r1, [r2, #0]
 80009ee:	d1e0      	bne.n	80009b2 <_free_r+0x22>
 80009f0:	6818      	ldr	r0, [r3, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	6053      	str	r3, [r2, #4]
 80009f6:	4408      	add	r0, r1
 80009f8:	6010      	str	r0, [r2, #0]
 80009fa:	e7da      	b.n	80009b2 <_free_r+0x22>
 80009fc:	d902      	bls.n	8000a04 <_free_r+0x74>
 80009fe:	230c      	movs	r3, #12
 8000a00:	602b      	str	r3, [r5, #0]
 8000a02:	e7d6      	b.n	80009b2 <_free_r+0x22>
 8000a04:	6820      	ldr	r0, [r4, #0]
 8000a06:	1821      	adds	r1, r4, r0
 8000a08:	428b      	cmp	r3, r1
 8000a0a:	bf04      	itt	eq
 8000a0c:	6819      	ldreq	r1, [r3, #0]
 8000a0e:	685b      	ldreq	r3, [r3, #4]
 8000a10:	6063      	str	r3, [r4, #4]
 8000a12:	bf04      	itt	eq
 8000a14:	1809      	addeq	r1, r1, r0
 8000a16:	6021      	streq	r1, [r4, #0]
 8000a18:	6054      	str	r4, [r2, #4]
 8000a1a:	e7ca      	b.n	80009b2 <_free_r+0x22>
 8000a1c:	bd38      	pop	{r3, r4, r5, pc}
 8000a1e:	bf00      	nop
 8000a20:	200001c8 	.word	0x200001c8

08000a24 <sbrk_aligned>:
 8000a24:	b570      	push	{r4, r5, r6, lr}
 8000a26:	4e0f      	ldr	r6, [pc, #60]	@ (8000a64 <sbrk_aligned+0x40>)
 8000a28:	460c      	mov	r4, r1
 8000a2a:	6831      	ldr	r1, [r6, #0]
 8000a2c:	4605      	mov	r5, r0
 8000a2e:	b911      	cbnz	r1, 8000a36 <sbrk_aligned+0x12>
 8000a30:	f000 fcb6 	bl	80013a0 <_sbrk_r>
 8000a34:	6030      	str	r0, [r6, #0]
 8000a36:	4621      	mov	r1, r4
 8000a38:	4628      	mov	r0, r5
 8000a3a:	f000 fcb1 	bl	80013a0 <_sbrk_r>
 8000a3e:	1c43      	adds	r3, r0, #1
 8000a40:	d103      	bne.n	8000a4a <sbrk_aligned+0x26>
 8000a42:	f04f 34ff 	mov.w	r4, #4294967295
 8000a46:	4620      	mov	r0, r4
 8000a48:	bd70      	pop	{r4, r5, r6, pc}
 8000a4a:	1cc4      	adds	r4, r0, #3
 8000a4c:	f024 0403 	bic.w	r4, r4, #3
 8000a50:	42a0      	cmp	r0, r4
 8000a52:	d0f8      	beq.n	8000a46 <sbrk_aligned+0x22>
 8000a54:	1a21      	subs	r1, r4, r0
 8000a56:	4628      	mov	r0, r5
 8000a58:	f000 fca2 	bl	80013a0 <_sbrk_r>
 8000a5c:	3001      	adds	r0, #1
 8000a5e:	d1f2      	bne.n	8000a46 <sbrk_aligned+0x22>
 8000a60:	e7ef      	b.n	8000a42 <sbrk_aligned+0x1e>
 8000a62:	bf00      	nop
 8000a64:	200001c4 	.word	0x200001c4

08000a68 <_malloc_r>:
 8000a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a6c:	1ccd      	adds	r5, r1, #3
 8000a6e:	f025 0503 	bic.w	r5, r5, #3
 8000a72:	3508      	adds	r5, #8
 8000a74:	2d0c      	cmp	r5, #12
 8000a76:	bf38      	it	cc
 8000a78:	250c      	movcc	r5, #12
 8000a7a:	2d00      	cmp	r5, #0
 8000a7c:	4606      	mov	r6, r0
 8000a7e:	db01      	blt.n	8000a84 <_malloc_r+0x1c>
 8000a80:	42a9      	cmp	r1, r5
 8000a82:	d904      	bls.n	8000a8e <_malloc_r+0x26>
 8000a84:	230c      	movs	r3, #12
 8000a86:	6033      	str	r3, [r6, #0]
 8000a88:	2000      	movs	r0, #0
 8000a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000b64 <_malloc_r+0xfc>
 8000a92:	f000 f869 	bl	8000b68 <__malloc_lock>
 8000a96:	f8d8 3000 	ldr.w	r3, [r8]
 8000a9a:	461c      	mov	r4, r3
 8000a9c:	bb44      	cbnz	r4, 8000af0 <_malloc_r+0x88>
 8000a9e:	4629      	mov	r1, r5
 8000aa0:	4630      	mov	r0, r6
 8000aa2:	f7ff ffbf 	bl	8000a24 <sbrk_aligned>
 8000aa6:	1c43      	adds	r3, r0, #1
 8000aa8:	4604      	mov	r4, r0
 8000aaa:	d158      	bne.n	8000b5e <_malloc_r+0xf6>
 8000aac:	f8d8 4000 	ldr.w	r4, [r8]
 8000ab0:	4627      	mov	r7, r4
 8000ab2:	2f00      	cmp	r7, #0
 8000ab4:	d143      	bne.n	8000b3e <_malloc_r+0xd6>
 8000ab6:	2c00      	cmp	r4, #0
 8000ab8:	d04b      	beq.n	8000b52 <_malloc_r+0xea>
 8000aba:	6823      	ldr	r3, [r4, #0]
 8000abc:	4639      	mov	r1, r7
 8000abe:	4630      	mov	r0, r6
 8000ac0:	eb04 0903 	add.w	r9, r4, r3
 8000ac4:	f000 fc6c 	bl	80013a0 <_sbrk_r>
 8000ac8:	4581      	cmp	r9, r0
 8000aca:	d142      	bne.n	8000b52 <_malloc_r+0xea>
 8000acc:	6821      	ldr	r1, [r4, #0]
 8000ace:	1a6d      	subs	r5, r5, r1
 8000ad0:	4629      	mov	r1, r5
 8000ad2:	4630      	mov	r0, r6
 8000ad4:	f7ff ffa6 	bl	8000a24 <sbrk_aligned>
 8000ad8:	3001      	adds	r0, #1
 8000ada:	d03a      	beq.n	8000b52 <_malloc_r+0xea>
 8000adc:	6823      	ldr	r3, [r4, #0]
 8000ade:	442b      	add	r3, r5
 8000ae0:	6023      	str	r3, [r4, #0]
 8000ae2:	f8d8 3000 	ldr.w	r3, [r8]
 8000ae6:	685a      	ldr	r2, [r3, #4]
 8000ae8:	bb62      	cbnz	r2, 8000b44 <_malloc_r+0xdc>
 8000aea:	f8c8 7000 	str.w	r7, [r8]
 8000aee:	e00f      	b.n	8000b10 <_malloc_r+0xa8>
 8000af0:	6822      	ldr	r2, [r4, #0]
 8000af2:	1b52      	subs	r2, r2, r5
 8000af4:	d420      	bmi.n	8000b38 <_malloc_r+0xd0>
 8000af6:	2a0b      	cmp	r2, #11
 8000af8:	d917      	bls.n	8000b2a <_malloc_r+0xc2>
 8000afa:	1961      	adds	r1, r4, r5
 8000afc:	42a3      	cmp	r3, r4
 8000afe:	6025      	str	r5, [r4, #0]
 8000b00:	bf18      	it	ne
 8000b02:	6059      	strne	r1, [r3, #4]
 8000b04:	6863      	ldr	r3, [r4, #4]
 8000b06:	bf08      	it	eq
 8000b08:	f8c8 1000 	streq.w	r1, [r8]
 8000b0c:	5162      	str	r2, [r4, r5]
 8000b0e:	604b      	str	r3, [r1, #4]
 8000b10:	4630      	mov	r0, r6
 8000b12:	f000 f82f 	bl	8000b74 <__malloc_unlock>
 8000b16:	f104 000b 	add.w	r0, r4, #11
 8000b1a:	1d23      	adds	r3, r4, #4
 8000b1c:	f020 0007 	bic.w	r0, r0, #7
 8000b20:	1ac2      	subs	r2, r0, r3
 8000b22:	bf1c      	itt	ne
 8000b24:	1a1b      	subne	r3, r3, r0
 8000b26:	50a3      	strne	r3, [r4, r2]
 8000b28:	e7af      	b.n	8000a8a <_malloc_r+0x22>
 8000b2a:	6862      	ldr	r2, [r4, #4]
 8000b2c:	42a3      	cmp	r3, r4
 8000b2e:	bf0c      	ite	eq
 8000b30:	f8c8 2000 	streq.w	r2, [r8]
 8000b34:	605a      	strne	r2, [r3, #4]
 8000b36:	e7eb      	b.n	8000b10 <_malloc_r+0xa8>
 8000b38:	4623      	mov	r3, r4
 8000b3a:	6864      	ldr	r4, [r4, #4]
 8000b3c:	e7ae      	b.n	8000a9c <_malloc_r+0x34>
 8000b3e:	463c      	mov	r4, r7
 8000b40:	687f      	ldr	r7, [r7, #4]
 8000b42:	e7b6      	b.n	8000ab2 <_malloc_r+0x4a>
 8000b44:	461a      	mov	r2, r3
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	42a3      	cmp	r3, r4
 8000b4a:	d1fb      	bne.n	8000b44 <_malloc_r+0xdc>
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	6053      	str	r3, [r2, #4]
 8000b50:	e7de      	b.n	8000b10 <_malloc_r+0xa8>
 8000b52:	230c      	movs	r3, #12
 8000b54:	6033      	str	r3, [r6, #0]
 8000b56:	4630      	mov	r0, r6
 8000b58:	f000 f80c 	bl	8000b74 <__malloc_unlock>
 8000b5c:	e794      	b.n	8000a88 <_malloc_r+0x20>
 8000b5e:	6005      	str	r5, [r0, #0]
 8000b60:	e7d6      	b.n	8000b10 <_malloc_r+0xa8>
 8000b62:	bf00      	nop
 8000b64:	200001c8 	.word	0x200001c8

08000b68 <__malloc_lock>:
 8000b68:	4801      	ldr	r0, [pc, #4]	@ (8000b70 <__malloc_lock+0x8>)
 8000b6a:	f7ff bf0e 	b.w	800098a <__retarget_lock_acquire_recursive>
 8000b6e:	bf00      	nop
 8000b70:	200001c0 	.word	0x200001c0

08000b74 <__malloc_unlock>:
 8000b74:	4801      	ldr	r0, [pc, #4]	@ (8000b7c <__malloc_unlock+0x8>)
 8000b76:	f7ff bf09 	b.w	800098c <__retarget_lock_release_recursive>
 8000b7a:	bf00      	nop
 8000b7c:	200001c0 	.word	0x200001c0

08000b80 <__sfputc_r>:
 8000b80:	6893      	ldr	r3, [r2, #8]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	b410      	push	{r4}
 8000b88:	6093      	str	r3, [r2, #8]
 8000b8a:	da08      	bge.n	8000b9e <__sfputc_r+0x1e>
 8000b8c:	6994      	ldr	r4, [r2, #24]
 8000b8e:	42a3      	cmp	r3, r4
 8000b90:	db01      	blt.n	8000b96 <__sfputc_r+0x16>
 8000b92:	290a      	cmp	r1, #10
 8000b94:	d103      	bne.n	8000b9e <__sfputc_r+0x1e>
 8000b96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b9a:	f000 bb6d 	b.w	8001278 <__swbuf_r>
 8000b9e:	6813      	ldr	r3, [r2, #0]
 8000ba0:	1c58      	adds	r0, r3, #1
 8000ba2:	6010      	str	r0, [r2, #0]
 8000ba4:	7019      	strb	r1, [r3, #0]
 8000ba6:	4608      	mov	r0, r1
 8000ba8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <__sfputs_r>:
 8000bae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bb0:	4606      	mov	r6, r0
 8000bb2:	460f      	mov	r7, r1
 8000bb4:	4614      	mov	r4, r2
 8000bb6:	18d5      	adds	r5, r2, r3
 8000bb8:	42ac      	cmp	r4, r5
 8000bba:	d101      	bne.n	8000bc0 <__sfputs_r+0x12>
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	e007      	b.n	8000bd0 <__sfputs_r+0x22>
 8000bc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000bc4:	463a      	mov	r2, r7
 8000bc6:	4630      	mov	r0, r6
 8000bc8:	f7ff ffda 	bl	8000b80 <__sfputc_r>
 8000bcc:	1c43      	adds	r3, r0, #1
 8000bce:	d1f3      	bne.n	8000bb8 <__sfputs_r+0xa>
 8000bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000bd4 <_vfiprintf_r>:
 8000bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bd8:	460d      	mov	r5, r1
 8000bda:	b09d      	sub	sp, #116	@ 0x74
 8000bdc:	4614      	mov	r4, r2
 8000bde:	4698      	mov	r8, r3
 8000be0:	4606      	mov	r6, r0
 8000be2:	b118      	cbz	r0, 8000bec <_vfiprintf_r+0x18>
 8000be4:	6a03      	ldr	r3, [r0, #32]
 8000be6:	b90b      	cbnz	r3, 8000bec <_vfiprintf_r+0x18>
 8000be8:	f7ff fdca 	bl	8000780 <__sinit>
 8000bec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000bee:	07d9      	lsls	r1, r3, #31
 8000bf0:	d405      	bmi.n	8000bfe <_vfiprintf_r+0x2a>
 8000bf2:	89ab      	ldrh	r3, [r5, #12]
 8000bf4:	059a      	lsls	r2, r3, #22
 8000bf6:	d402      	bmi.n	8000bfe <_vfiprintf_r+0x2a>
 8000bf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000bfa:	f7ff fec6 	bl	800098a <__retarget_lock_acquire_recursive>
 8000bfe:	89ab      	ldrh	r3, [r5, #12]
 8000c00:	071b      	lsls	r3, r3, #28
 8000c02:	d501      	bpl.n	8000c08 <_vfiprintf_r+0x34>
 8000c04:	692b      	ldr	r3, [r5, #16]
 8000c06:	b99b      	cbnz	r3, 8000c30 <_vfiprintf_r+0x5c>
 8000c08:	4629      	mov	r1, r5
 8000c0a:	4630      	mov	r0, r6
 8000c0c:	f000 fb72 	bl	80012f4 <__swsetup_r>
 8000c10:	b170      	cbz	r0, 8000c30 <_vfiprintf_r+0x5c>
 8000c12:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000c14:	07dc      	lsls	r4, r3, #31
 8000c16:	d504      	bpl.n	8000c22 <_vfiprintf_r+0x4e>
 8000c18:	f04f 30ff 	mov.w	r0, #4294967295
 8000c1c:	b01d      	add	sp, #116	@ 0x74
 8000c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c22:	89ab      	ldrh	r3, [r5, #12]
 8000c24:	0598      	lsls	r0, r3, #22
 8000c26:	d4f7      	bmi.n	8000c18 <_vfiprintf_r+0x44>
 8000c28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000c2a:	f7ff feaf 	bl	800098c <__retarget_lock_release_recursive>
 8000c2e:	e7f3      	b.n	8000c18 <_vfiprintf_r+0x44>
 8000c30:	2300      	movs	r3, #0
 8000c32:	9309      	str	r3, [sp, #36]	@ 0x24
 8000c34:	2320      	movs	r3, #32
 8000c36:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000c3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8000c3e:	2330      	movs	r3, #48	@ 0x30
 8000c40:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000df0 <_vfiprintf_r+0x21c>
 8000c44:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000c48:	f04f 0901 	mov.w	r9, #1
 8000c4c:	4623      	mov	r3, r4
 8000c4e:	469a      	mov	sl, r3
 8000c50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000c54:	b10a      	cbz	r2, 8000c5a <_vfiprintf_r+0x86>
 8000c56:	2a25      	cmp	r2, #37	@ 0x25
 8000c58:	d1f9      	bne.n	8000c4e <_vfiprintf_r+0x7a>
 8000c5a:	ebba 0b04 	subs.w	fp, sl, r4
 8000c5e:	d00b      	beq.n	8000c78 <_vfiprintf_r+0xa4>
 8000c60:	465b      	mov	r3, fp
 8000c62:	4622      	mov	r2, r4
 8000c64:	4629      	mov	r1, r5
 8000c66:	4630      	mov	r0, r6
 8000c68:	f7ff ffa1 	bl	8000bae <__sfputs_r>
 8000c6c:	3001      	adds	r0, #1
 8000c6e:	f000 80a7 	beq.w	8000dc0 <_vfiprintf_r+0x1ec>
 8000c72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000c74:	445a      	add	r2, fp
 8000c76:	9209      	str	r2, [sp, #36]	@ 0x24
 8000c78:	f89a 3000 	ldrb.w	r3, [sl]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	f000 809f 	beq.w	8000dc0 <_vfiprintf_r+0x1ec>
 8000c82:	2300      	movs	r3, #0
 8000c84:	f04f 32ff 	mov.w	r2, #4294967295
 8000c88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000c8c:	f10a 0a01 	add.w	sl, sl, #1
 8000c90:	9304      	str	r3, [sp, #16]
 8000c92:	9307      	str	r3, [sp, #28]
 8000c94:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000c98:	931a      	str	r3, [sp, #104]	@ 0x68
 8000c9a:	4654      	mov	r4, sl
 8000c9c:	2205      	movs	r2, #5
 8000c9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ca2:	4853      	ldr	r0, [pc, #332]	@ (8000df0 <_vfiprintf_r+0x21c>)
 8000ca4:	f7ff fa94 	bl	80001d0 <memchr>
 8000ca8:	9a04      	ldr	r2, [sp, #16]
 8000caa:	b9d8      	cbnz	r0, 8000ce4 <_vfiprintf_r+0x110>
 8000cac:	06d1      	lsls	r1, r2, #27
 8000cae:	bf44      	itt	mi
 8000cb0:	2320      	movmi	r3, #32
 8000cb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000cb6:	0713      	lsls	r3, r2, #28
 8000cb8:	bf44      	itt	mi
 8000cba:	232b      	movmi	r3, #43	@ 0x2b
 8000cbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000cc0:	f89a 3000 	ldrb.w	r3, [sl]
 8000cc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8000cc6:	d015      	beq.n	8000cf4 <_vfiprintf_r+0x120>
 8000cc8:	9a07      	ldr	r2, [sp, #28]
 8000cca:	4654      	mov	r4, sl
 8000ccc:	2000      	movs	r0, #0
 8000cce:	f04f 0c0a 	mov.w	ip, #10
 8000cd2:	4621      	mov	r1, r4
 8000cd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000cd8:	3b30      	subs	r3, #48	@ 0x30
 8000cda:	2b09      	cmp	r3, #9
 8000cdc:	d94b      	bls.n	8000d76 <_vfiprintf_r+0x1a2>
 8000cde:	b1b0      	cbz	r0, 8000d0e <_vfiprintf_r+0x13a>
 8000ce0:	9207      	str	r2, [sp, #28]
 8000ce2:	e014      	b.n	8000d0e <_vfiprintf_r+0x13a>
 8000ce4:	eba0 0308 	sub.w	r3, r0, r8
 8000ce8:	fa09 f303 	lsl.w	r3, r9, r3
 8000cec:	4313      	orrs	r3, r2
 8000cee:	9304      	str	r3, [sp, #16]
 8000cf0:	46a2      	mov	sl, r4
 8000cf2:	e7d2      	b.n	8000c9a <_vfiprintf_r+0xc6>
 8000cf4:	9b03      	ldr	r3, [sp, #12]
 8000cf6:	1d19      	adds	r1, r3, #4
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	9103      	str	r1, [sp, #12]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	bfbb      	ittet	lt
 8000d00:	425b      	neglt	r3, r3
 8000d02:	f042 0202 	orrlt.w	r2, r2, #2
 8000d06:	9307      	strge	r3, [sp, #28]
 8000d08:	9307      	strlt	r3, [sp, #28]
 8000d0a:	bfb8      	it	lt
 8000d0c:	9204      	strlt	r2, [sp, #16]
 8000d0e:	7823      	ldrb	r3, [r4, #0]
 8000d10:	2b2e      	cmp	r3, #46	@ 0x2e
 8000d12:	d10a      	bne.n	8000d2a <_vfiprintf_r+0x156>
 8000d14:	7863      	ldrb	r3, [r4, #1]
 8000d16:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d18:	d132      	bne.n	8000d80 <_vfiprintf_r+0x1ac>
 8000d1a:	9b03      	ldr	r3, [sp, #12]
 8000d1c:	1d1a      	adds	r2, r3, #4
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	9203      	str	r2, [sp, #12]
 8000d22:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000d26:	3402      	adds	r4, #2
 8000d28:	9305      	str	r3, [sp, #20]
 8000d2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000e00 <_vfiprintf_r+0x22c>
 8000d2e:	7821      	ldrb	r1, [r4, #0]
 8000d30:	2203      	movs	r2, #3
 8000d32:	4650      	mov	r0, sl
 8000d34:	f7ff fa4c 	bl	80001d0 <memchr>
 8000d38:	b138      	cbz	r0, 8000d4a <_vfiprintf_r+0x176>
 8000d3a:	9b04      	ldr	r3, [sp, #16]
 8000d3c:	eba0 000a 	sub.w	r0, r0, sl
 8000d40:	2240      	movs	r2, #64	@ 0x40
 8000d42:	4082      	lsls	r2, r0
 8000d44:	4313      	orrs	r3, r2
 8000d46:	3401      	adds	r4, #1
 8000d48:	9304      	str	r3, [sp, #16]
 8000d4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d4e:	4829      	ldr	r0, [pc, #164]	@ (8000df4 <_vfiprintf_r+0x220>)
 8000d50:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000d54:	2206      	movs	r2, #6
 8000d56:	f7ff fa3b 	bl	80001d0 <memchr>
 8000d5a:	2800      	cmp	r0, #0
 8000d5c:	d03f      	beq.n	8000dde <_vfiprintf_r+0x20a>
 8000d5e:	4b26      	ldr	r3, [pc, #152]	@ (8000df8 <_vfiprintf_r+0x224>)
 8000d60:	bb1b      	cbnz	r3, 8000daa <_vfiprintf_r+0x1d6>
 8000d62:	9b03      	ldr	r3, [sp, #12]
 8000d64:	3307      	adds	r3, #7
 8000d66:	f023 0307 	bic.w	r3, r3, #7
 8000d6a:	3308      	adds	r3, #8
 8000d6c:	9303      	str	r3, [sp, #12]
 8000d6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000d70:	443b      	add	r3, r7
 8000d72:	9309      	str	r3, [sp, #36]	@ 0x24
 8000d74:	e76a      	b.n	8000c4c <_vfiprintf_r+0x78>
 8000d76:	fb0c 3202 	mla	r2, ip, r2, r3
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	e7a8      	b.n	8000cd2 <_vfiprintf_r+0xfe>
 8000d80:	2300      	movs	r3, #0
 8000d82:	3401      	adds	r4, #1
 8000d84:	9305      	str	r3, [sp, #20]
 8000d86:	4619      	mov	r1, r3
 8000d88:	f04f 0c0a 	mov.w	ip, #10
 8000d8c:	4620      	mov	r0, r4
 8000d8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000d92:	3a30      	subs	r2, #48	@ 0x30
 8000d94:	2a09      	cmp	r2, #9
 8000d96:	d903      	bls.n	8000da0 <_vfiprintf_r+0x1cc>
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d0c6      	beq.n	8000d2a <_vfiprintf_r+0x156>
 8000d9c:	9105      	str	r1, [sp, #20]
 8000d9e:	e7c4      	b.n	8000d2a <_vfiprintf_r+0x156>
 8000da0:	fb0c 2101 	mla	r1, ip, r1, r2
 8000da4:	4604      	mov	r4, r0
 8000da6:	2301      	movs	r3, #1
 8000da8:	e7f0      	b.n	8000d8c <_vfiprintf_r+0x1b8>
 8000daa:	ab03      	add	r3, sp, #12
 8000dac:	9300      	str	r3, [sp, #0]
 8000dae:	462a      	mov	r2, r5
 8000db0:	4b12      	ldr	r3, [pc, #72]	@ (8000dfc <_vfiprintf_r+0x228>)
 8000db2:	a904      	add	r1, sp, #16
 8000db4:	4630      	mov	r0, r6
 8000db6:	f3af 8000 	nop.w
 8000dba:	4607      	mov	r7, r0
 8000dbc:	1c78      	adds	r0, r7, #1
 8000dbe:	d1d6      	bne.n	8000d6e <_vfiprintf_r+0x19a>
 8000dc0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000dc2:	07d9      	lsls	r1, r3, #31
 8000dc4:	d405      	bmi.n	8000dd2 <_vfiprintf_r+0x1fe>
 8000dc6:	89ab      	ldrh	r3, [r5, #12]
 8000dc8:	059a      	lsls	r2, r3, #22
 8000dca:	d402      	bmi.n	8000dd2 <_vfiprintf_r+0x1fe>
 8000dcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000dce:	f7ff fddd 	bl	800098c <__retarget_lock_release_recursive>
 8000dd2:	89ab      	ldrh	r3, [r5, #12]
 8000dd4:	065b      	lsls	r3, r3, #25
 8000dd6:	f53f af1f 	bmi.w	8000c18 <_vfiprintf_r+0x44>
 8000dda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000ddc:	e71e      	b.n	8000c1c <_vfiprintf_r+0x48>
 8000dde:	ab03      	add	r3, sp, #12
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	462a      	mov	r2, r5
 8000de4:	4b05      	ldr	r3, [pc, #20]	@ (8000dfc <_vfiprintf_r+0x228>)
 8000de6:	a904      	add	r1, sp, #16
 8000de8:	4630      	mov	r0, r6
 8000dea:	f000 f879 	bl	8000ee0 <_printf_i>
 8000dee:	e7e4      	b.n	8000dba <_vfiprintf_r+0x1e6>
 8000df0:	080014f5 	.word	0x080014f5
 8000df4:	080014ff 	.word	0x080014ff
 8000df8:	00000000 	.word	0x00000000
 8000dfc:	08000baf 	.word	0x08000baf
 8000e00:	080014fb 	.word	0x080014fb

08000e04 <_printf_common>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	4616      	mov	r6, r2
 8000e0a:	4698      	mov	r8, r3
 8000e0c:	688a      	ldr	r2, [r1, #8]
 8000e0e:	690b      	ldr	r3, [r1, #16]
 8000e10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000e14:	4293      	cmp	r3, r2
 8000e16:	bfb8      	it	lt
 8000e18:	4613      	movlt	r3, r2
 8000e1a:	6033      	str	r3, [r6, #0]
 8000e1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000e20:	4607      	mov	r7, r0
 8000e22:	460c      	mov	r4, r1
 8000e24:	b10a      	cbz	r2, 8000e2a <_printf_common+0x26>
 8000e26:	3301      	adds	r3, #1
 8000e28:	6033      	str	r3, [r6, #0]
 8000e2a:	6823      	ldr	r3, [r4, #0]
 8000e2c:	0699      	lsls	r1, r3, #26
 8000e2e:	bf42      	ittt	mi
 8000e30:	6833      	ldrmi	r3, [r6, #0]
 8000e32:	3302      	addmi	r3, #2
 8000e34:	6033      	strmi	r3, [r6, #0]
 8000e36:	6825      	ldr	r5, [r4, #0]
 8000e38:	f015 0506 	ands.w	r5, r5, #6
 8000e3c:	d106      	bne.n	8000e4c <_printf_common+0x48>
 8000e3e:	f104 0a19 	add.w	sl, r4, #25
 8000e42:	68e3      	ldr	r3, [r4, #12]
 8000e44:	6832      	ldr	r2, [r6, #0]
 8000e46:	1a9b      	subs	r3, r3, r2
 8000e48:	42ab      	cmp	r3, r5
 8000e4a:	dc26      	bgt.n	8000e9a <_printf_common+0x96>
 8000e4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000e50:	6822      	ldr	r2, [r4, #0]
 8000e52:	3b00      	subs	r3, #0
 8000e54:	bf18      	it	ne
 8000e56:	2301      	movne	r3, #1
 8000e58:	0692      	lsls	r2, r2, #26
 8000e5a:	d42b      	bmi.n	8000eb4 <_printf_common+0xb0>
 8000e5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000e60:	4641      	mov	r1, r8
 8000e62:	4638      	mov	r0, r7
 8000e64:	47c8      	blx	r9
 8000e66:	3001      	adds	r0, #1
 8000e68:	d01e      	beq.n	8000ea8 <_printf_common+0xa4>
 8000e6a:	6823      	ldr	r3, [r4, #0]
 8000e6c:	6922      	ldr	r2, [r4, #16]
 8000e6e:	f003 0306 	and.w	r3, r3, #6
 8000e72:	2b04      	cmp	r3, #4
 8000e74:	bf02      	ittt	eq
 8000e76:	68e5      	ldreq	r5, [r4, #12]
 8000e78:	6833      	ldreq	r3, [r6, #0]
 8000e7a:	1aed      	subeq	r5, r5, r3
 8000e7c:	68a3      	ldr	r3, [r4, #8]
 8000e7e:	bf0c      	ite	eq
 8000e80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000e84:	2500      	movne	r5, #0
 8000e86:	4293      	cmp	r3, r2
 8000e88:	bfc4      	itt	gt
 8000e8a:	1a9b      	subgt	r3, r3, r2
 8000e8c:	18ed      	addgt	r5, r5, r3
 8000e8e:	2600      	movs	r6, #0
 8000e90:	341a      	adds	r4, #26
 8000e92:	42b5      	cmp	r5, r6
 8000e94:	d11a      	bne.n	8000ecc <_printf_common+0xc8>
 8000e96:	2000      	movs	r0, #0
 8000e98:	e008      	b.n	8000eac <_printf_common+0xa8>
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	4652      	mov	r2, sl
 8000e9e:	4641      	mov	r1, r8
 8000ea0:	4638      	mov	r0, r7
 8000ea2:	47c8      	blx	r9
 8000ea4:	3001      	adds	r0, #1
 8000ea6:	d103      	bne.n	8000eb0 <_printf_common+0xac>
 8000ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb0:	3501      	adds	r5, #1
 8000eb2:	e7c6      	b.n	8000e42 <_printf_common+0x3e>
 8000eb4:	18e1      	adds	r1, r4, r3
 8000eb6:	1c5a      	adds	r2, r3, #1
 8000eb8:	2030      	movs	r0, #48	@ 0x30
 8000eba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000ebe:	4422      	add	r2, r4
 8000ec0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000ec4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000ec8:	3302      	adds	r3, #2
 8000eca:	e7c7      	b.n	8000e5c <_printf_common+0x58>
 8000ecc:	2301      	movs	r3, #1
 8000ece:	4622      	mov	r2, r4
 8000ed0:	4641      	mov	r1, r8
 8000ed2:	4638      	mov	r0, r7
 8000ed4:	47c8      	blx	r9
 8000ed6:	3001      	adds	r0, #1
 8000ed8:	d0e6      	beq.n	8000ea8 <_printf_common+0xa4>
 8000eda:	3601      	adds	r6, #1
 8000edc:	e7d9      	b.n	8000e92 <_printf_common+0x8e>
	...

08000ee0 <_printf_i>:
 8000ee0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000ee4:	7e0f      	ldrb	r7, [r1, #24]
 8000ee6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000ee8:	2f78      	cmp	r7, #120	@ 0x78
 8000eea:	4691      	mov	r9, r2
 8000eec:	4680      	mov	r8, r0
 8000eee:	460c      	mov	r4, r1
 8000ef0:	469a      	mov	sl, r3
 8000ef2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000ef6:	d807      	bhi.n	8000f08 <_printf_i+0x28>
 8000ef8:	2f62      	cmp	r7, #98	@ 0x62
 8000efa:	d80a      	bhi.n	8000f12 <_printf_i+0x32>
 8000efc:	2f00      	cmp	r7, #0
 8000efe:	f000 80d2 	beq.w	80010a6 <_printf_i+0x1c6>
 8000f02:	2f58      	cmp	r7, #88	@ 0x58
 8000f04:	f000 80b9 	beq.w	800107a <_printf_i+0x19a>
 8000f08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000f0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000f10:	e03a      	b.n	8000f88 <_printf_i+0xa8>
 8000f12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000f16:	2b15      	cmp	r3, #21
 8000f18:	d8f6      	bhi.n	8000f08 <_printf_i+0x28>
 8000f1a:	a101      	add	r1, pc, #4	@ (adr r1, 8000f20 <_printf_i+0x40>)
 8000f1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000f20:	08000f79 	.word	0x08000f79
 8000f24:	08000f8d 	.word	0x08000f8d
 8000f28:	08000f09 	.word	0x08000f09
 8000f2c:	08000f09 	.word	0x08000f09
 8000f30:	08000f09 	.word	0x08000f09
 8000f34:	08000f09 	.word	0x08000f09
 8000f38:	08000f8d 	.word	0x08000f8d
 8000f3c:	08000f09 	.word	0x08000f09
 8000f40:	08000f09 	.word	0x08000f09
 8000f44:	08000f09 	.word	0x08000f09
 8000f48:	08000f09 	.word	0x08000f09
 8000f4c:	0800108d 	.word	0x0800108d
 8000f50:	08000fb7 	.word	0x08000fb7
 8000f54:	08001047 	.word	0x08001047
 8000f58:	08000f09 	.word	0x08000f09
 8000f5c:	08000f09 	.word	0x08000f09
 8000f60:	080010af 	.word	0x080010af
 8000f64:	08000f09 	.word	0x08000f09
 8000f68:	08000fb7 	.word	0x08000fb7
 8000f6c:	08000f09 	.word	0x08000f09
 8000f70:	08000f09 	.word	0x08000f09
 8000f74:	0800104f 	.word	0x0800104f
 8000f78:	6833      	ldr	r3, [r6, #0]
 8000f7a:	1d1a      	adds	r2, r3, #4
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	6032      	str	r2, [r6, #0]
 8000f80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000f84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e09d      	b.n	80010c8 <_printf_i+0x1e8>
 8000f8c:	6833      	ldr	r3, [r6, #0]
 8000f8e:	6820      	ldr	r0, [r4, #0]
 8000f90:	1d19      	adds	r1, r3, #4
 8000f92:	6031      	str	r1, [r6, #0]
 8000f94:	0606      	lsls	r6, r0, #24
 8000f96:	d501      	bpl.n	8000f9c <_printf_i+0xbc>
 8000f98:	681d      	ldr	r5, [r3, #0]
 8000f9a:	e003      	b.n	8000fa4 <_printf_i+0xc4>
 8000f9c:	0645      	lsls	r5, r0, #25
 8000f9e:	d5fb      	bpl.n	8000f98 <_printf_i+0xb8>
 8000fa0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000fa4:	2d00      	cmp	r5, #0
 8000fa6:	da03      	bge.n	8000fb0 <_printf_i+0xd0>
 8000fa8:	232d      	movs	r3, #45	@ 0x2d
 8000faa:	426d      	negs	r5, r5
 8000fac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000fb0:	4859      	ldr	r0, [pc, #356]	@ (8001118 <_printf_i+0x238>)
 8000fb2:	230a      	movs	r3, #10
 8000fb4:	e011      	b.n	8000fda <_printf_i+0xfa>
 8000fb6:	6821      	ldr	r1, [r4, #0]
 8000fb8:	6833      	ldr	r3, [r6, #0]
 8000fba:	0608      	lsls	r0, r1, #24
 8000fbc:	f853 5b04 	ldr.w	r5, [r3], #4
 8000fc0:	d402      	bmi.n	8000fc8 <_printf_i+0xe8>
 8000fc2:	0649      	lsls	r1, r1, #25
 8000fc4:	bf48      	it	mi
 8000fc6:	b2ad      	uxthmi	r5, r5
 8000fc8:	2f6f      	cmp	r7, #111	@ 0x6f
 8000fca:	4853      	ldr	r0, [pc, #332]	@ (8001118 <_printf_i+0x238>)
 8000fcc:	6033      	str	r3, [r6, #0]
 8000fce:	bf14      	ite	ne
 8000fd0:	230a      	movne	r3, #10
 8000fd2:	2308      	moveq	r3, #8
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000fda:	6866      	ldr	r6, [r4, #4]
 8000fdc:	60a6      	str	r6, [r4, #8]
 8000fde:	2e00      	cmp	r6, #0
 8000fe0:	bfa2      	ittt	ge
 8000fe2:	6821      	ldrge	r1, [r4, #0]
 8000fe4:	f021 0104 	bicge.w	r1, r1, #4
 8000fe8:	6021      	strge	r1, [r4, #0]
 8000fea:	b90d      	cbnz	r5, 8000ff0 <_printf_i+0x110>
 8000fec:	2e00      	cmp	r6, #0
 8000fee:	d04b      	beq.n	8001088 <_printf_i+0x1a8>
 8000ff0:	4616      	mov	r6, r2
 8000ff2:	fbb5 f1f3 	udiv	r1, r5, r3
 8000ff6:	fb03 5711 	mls	r7, r3, r1, r5
 8000ffa:	5dc7      	ldrb	r7, [r0, r7]
 8000ffc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001000:	462f      	mov	r7, r5
 8001002:	42bb      	cmp	r3, r7
 8001004:	460d      	mov	r5, r1
 8001006:	d9f4      	bls.n	8000ff2 <_printf_i+0x112>
 8001008:	2b08      	cmp	r3, #8
 800100a:	d10b      	bne.n	8001024 <_printf_i+0x144>
 800100c:	6823      	ldr	r3, [r4, #0]
 800100e:	07df      	lsls	r7, r3, #31
 8001010:	d508      	bpl.n	8001024 <_printf_i+0x144>
 8001012:	6923      	ldr	r3, [r4, #16]
 8001014:	6861      	ldr	r1, [r4, #4]
 8001016:	4299      	cmp	r1, r3
 8001018:	bfde      	ittt	le
 800101a:	2330      	movle	r3, #48	@ 0x30
 800101c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001020:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001024:	1b92      	subs	r2, r2, r6
 8001026:	6122      	str	r2, [r4, #16]
 8001028:	f8cd a000 	str.w	sl, [sp]
 800102c:	464b      	mov	r3, r9
 800102e:	aa03      	add	r2, sp, #12
 8001030:	4621      	mov	r1, r4
 8001032:	4640      	mov	r0, r8
 8001034:	f7ff fee6 	bl	8000e04 <_printf_common>
 8001038:	3001      	adds	r0, #1
 800103a:	d14a      	bne.n	80010d2 <_printf_i+0x1f2>
 800103c:	f04f 30ff 	mov.w	r0, #4294967295
 8001040:	b004      	add	sp, #16
 8001042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001046:	6823      	ldr	r3, [r4, #0]
 8001048:	f043 0320 	orr.w	r3, r3, #32
 800104c:	6023      	str	r3, [r4, #0]
 800104e:	4833      	ldr	r0, [pc, #204]	@ (800111c <_printf_i+0x23c>)
 8001050:	2778      	movs	r7, #120	@ 0x78
 8001052:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001056:	6823      	ldr	r3, [r4, #0]
 8001058:	6831      	ldr	r1, [r6, #0]
 800105a:	061f      	lsls	r7, r3, #24
 800105c:	f851 5b04 	ldr.w	r5, [r1], #4
 8001060:	d402      	bmi.n	8001068 <_printf_i+0x188>
 8001062:	065f      	lsls	r7, r3, #25
 8001064:	bf48      	it	mi
 8001066:	b2ad      	uxthmi	r5, r5
 8001068:	6031      	str	r1, [r6, #0]
 800106a:	07d9      	lsls	r1, r3, #31
 800106c:	bf44      	itt	mi
 800106e:	f043 0320 	orrmi.w	r3, r3, #32
 8001072:	6023      	strmi	r3, [r4, #0]
 8001074:	b11d      	cbz	r5, 800107e <_printf_i+0x19e>
 8001076:	2310      	movs	r3, #16
 8001078:	e7ac      	b.n	8000fd4 <_printf_i+0xf4>
 800107a:	4827      	ldr	r0, [pc, #156]	@ (8001118 <_printf_i+0x238>)
 800107c:	e7e9      	b.n	8001052 <_printf_i+0x172>
 800107e:	6823      	ldr	r3, [r4, #0]
 8001080:	f023 0320 	bic.w	r3, r3, #32
 8001084:	6023      	str	r3, [r4, #0]
 8001086:	e7f6      	b.n	8001076 <_printf_i+0x196>
 8001088:	4616      	mov	r6, r2
 800108a:	e7bd      	b.n	8001008 <_printf_i+0x128>
 800108c:	6833      	ldr	r3, [r6, #0]
 800108e:	6825      	ldr	r5, [r4, #0]
 8001090:	6961      	ldr	r1, [r4, #20]
 8001092:	1d18      	adds	r0, r3, #4
 8001094:	6030      	str	r0, [r6, #0]
 8001096:	062e      	lsls	r6, r5, #24
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	d501      	bpl.n	80010a0 <_printf_i+0x1c0>
 800109c:	6019      	str	r1, [r3, #0]
 800109e:	e002      	b.n	80010a6 <_printf_i+0x1c6>
 80010a0:	0668      	lsls	r0, r5, #25
 80010a2:	d5fb      	bpl.n	800109c <_printf_i+0x1bc>
 80010a4:	8019      	strh	r1, [r3, #0]
 80010a6:	2300      	movs	r3, #0
 80010a8:	6123      	str	r3, [r4, #16]
 80010aa:	4616      	mov	r6, r2
 80010ac:	e7bc      	b.n	8001028 <_printf_i+0x148>
 80010ae:	6833      	ldr	r3, [r6, #0]
 80010b0:	1d1a      	adds	r2, r3, #4
 80010b2:	6032      	str	r2, [r6, #0]
 80010b4:	681e      	ldr	r6, [r3, #0]
 80010b6:	6862      	ldr	r2, [r4, #4]
 80010b8:	2100      	movs	r1, #0
 80010ba:	4630      	mov	r0, r6
 80010bc:	f7ff f888 	bl	80001d0 <memchr>
 80010c0:	b108      	cbz	r0, 80010c6 <_printf_i+0x1e6>
 80010c2:	1b80      	subs	r0, r0, r6
 80010c4:	6060      	str	r0, [r4, #4]
 80010c6:	6863      	ldr	r3, [r4, #4]
 80010c8:	6123      	str	r3, [r4, #16]
 80010ca:	2300      	movs	r3, #0
 80010cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80010d0:	e7aa      	b.n	8001028 <_printf_i+0x148>
 80010d2:	6923      	ldr	r3, [r4, #16]
 80010d4:	4632      	mov	r2, r6
 80010d6:	4649      	mov	r1, r9
 80010d8:	4640      	mov	r0, r8
 80010da:	47d0      	blx	sl
 80010dc:	3001      	adds	r0, #1
 80010de:	d0ad      	beq.n	800103c <_printf_i+0x15c>
 80010e0:	6823      	ldr	r3, [r4, #0]
 80010e2:	079b      	lsls	r3, r3, #30
 80010e4:	d413      	bmi.n	800110e <_printf_i+0x22e>
 80010e6:	68e0      	ldr	r0, [r4, #12]
 80010e8:	9b03      	ldr	r3, [sp, #12]
 80010ea:	4298      	cmp	r0, r3
 80010ec:	bfb8      	it	lt
 80010ee:	4618      	movlt	r0, r3
 80010f0:	e7a6      	b.n	8001040 <_printf_i+0x160>
 80010f2:	2301      	movs	r3, #1
 80010f4:	4632      	mov	r2, r6
 80010f6:	4649      	mov	r1, r9
 80010f8:	4640      	mov	r0, r8
 80010fa:	47d0      	blx	sl
 80010fc:	3001      	adds	r0, #1
 80010fe:	d09d      	beq.n	800103c <_printf_i+0x15c>
 8001100:	3501      	adds	r5, #1
 8001102:	68e3      	ldr	r3, [r4, #12]
 8001104:	9903      	ldr	r1, [sp, #12]
 8001106:	1a5b      	subs	r3, r3, r1
 8001108:	42ab      	cmp	r3, r5
 800110a:	dcf2      	bgt.n	80010f2 <_printf_i+0x212>
 800110c:	e7eb      	b.n	80010e6 <_printf_i+0x206>
 800110e:	2500      	movs	r5, #0
 8001110:	f104 0619 	add.w	r6, r4, #25
 8001114:	e7f5      	b.n	8001102 <_printf_i+0x222>
 8001116:	bf00      	nop
 8001118:	08001506 	.word	0x08001506
 800111c:	08001517 	.word	0x08001517

08001120 <__sflush_r>:
 8001120:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001128:	0716      	lsls	r6, r2, #28
 800112a:	4605      	mov	r5, r0
 800112c:	460c      	mov	r4, r1
 800112e:	d454      	bmi.n	80011da <__sflush_r+0xba>
 8001130:	684b      	ldr	r3, [r1, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	dc02      	bgt.n	800113c <__sflush_r+0x1c>
 8001136:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001138:	2b00      	cmp	r3, #0
 800113a:	dd48      	ble.n	80011ce <__sflush_r+0xae>
 800113c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800113e:	2e00      	cmp	r6, #0
 8001140:	d045      	beq.n	80011ce <__sflush_r+0xae>
 8001142:	2300      	movs	r3, #0
 8001144:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001148:	682f      	ldr	r7, [r5, #0]
 800114a:	6a21      	ldr	r1, [r4, #32]
 800114c:	602b      	str	r3, [r5, #0]
 800114e:	d030      	beq.n	80011b2 <__sflush_r+0x92>
 8001150:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001152:	89a3      	ldrh	r3, [r4, #12]
 8001154:	0759      	lsls	r1, r3, #29
 8001156:	d505      	bpl.n	8001164 <__sflush_r+0x44>
 8001158:	6863      	ldr	r3, [r4, #4]
 800115a:	1ad2      	subs	r2, r2, r3
 800115c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800115e:	b10b      	cbz	r3, 8001164 <__sflush_r+0x44>
 8001160:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001162:	1ad2      	subs	r2, r2, r3
 8001164:	2300      	movs	r3, #0
 8001166:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001168:	6a21      	ldr	r1, [r4, #32]
 800116a:	4628      	mov	r0, r5
 800116c:	47b0      	blx	r6
 800116e:	1c43      	adds	r3, r0, #1
 8001170:	89a3      	ldrh	r3, [r4, #12]
 8001172:	d106      	bne.n	8001182 <__sflush_r+0x62>
 8001174:	6829      	ldr	r1, [r5, #0]
 8001176:	291d      	cmp	r1, #29
 8001178:	d82b      	bhi.n	80011d2 <__sflush_r+0xb2>
 800117a:	4a2a      	ldr	r2, [pc, #168]	@ (8001224 <__sflush_r+0x104>)
 800117c:	410a      	asrs	r2, r1
 800117e:	07d6      	lsls	r6, r2, #31
 8001180:	d427      	bmi.n	80011d2 <__sflush_r+0xb2>
 8001182:	2200      	movs	r2, #0
 8001184:	6062      	str	r2, [r4, #4]
 8001186:	04d9      	lsls	r1, r3, #19
 8001188:	6922      	ldr	r2, [r4, #16]
 800118a:	6022      	str	r2, [r4, #0]
 800118c:	d504      	bpl.n	8001198 <__sflush_r+0x78>
 800118e:	1c42      	adds	r2, r0, #1
 8001190:	d101      	bne.n	8001196 <__sflush_r+0x76>
 8001192:	682b      	ldr	r3, [r5, #0]
 8001194:	b903      	cbnz	r3, 8001198 <__sflush_r+0x78>
 8001196:	6560      	str	r0, [r4, #84]	@ 0x54
 8001198:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800119a:	602f      	str	r7, [r5, #0]
 800119c:	b1b9      	cbz	r1, 80011ce <__sflush_r+0xae>
 800119e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80011a2:	4299      	cmp	r1, r3
 80011a4:	d002      	beq.n	80011ac <__sflush_r+0x8c>
 80011a6:	4628      	mov	r0, r5
 80011a8:	f7ff fbf2 	bl	8000990 <_free_r>
 80011ac:	2300      	movs	r3, #0
 80011ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80011b0:	e00d      	b.n	80011ce <__sflush_r+0xae>
 80011b2:	2301      	movs	r3, #1
 80011b4:	4628      	mov	r0, r5
 80011b6:	47b0      	blx	r6
 80011b8:	4602      	mov	r2, r0
 80011ba:	1c50      	adds	r0, r2, #1
 80011bc:	d1c9      	bne.n	8001152 <__sflush_r+0x32>
 80011be:	682b      	ldr	r3, [r5, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d0c6      	beq.n	8001152 <__sflush_r+0x32>
 80011c4:	2b1d      	cmp	r3, #29
 80011c6:	d001      	beq.n	80011cc <__sflush_r+0xac>
 80011c8:	2b16      	cmp	r3, #22
 80011ca:	d11e      	bne.n	800120a <__sflush_r+0xea>
 80011cc:	602f      	str	r7, [r5, #0]
 80011ce:	2000      	movs	r0, #0
 80011d0:	e022      	b.n	8001218 <__sflush_r+0xf8>
 80011d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011d6:	b21b      	sxth	r3, r3
 80011d8:	e01b      	b.n	8001212 <__sflush_r+0xf2>
 80011da:	690f      	ldr	r7, [r1, #16]
 80011dc:	2f00      	cmp	r7, #0
 80011de:	d0f6      	beq.n	80011ce <__sflush_r+0xae>
 80011e0:	0793      	lsls	r3, r2, #30
 80011e2:	680e      	ldr	r6, [r1, #0]
 80011e4:	bf08      	it	eq
 80011e6:	694b      	ldreq	r3, [r1, #20]
 80011e8:	600f      	str	r7, [r1, #0]
 80011ea:	bf18      	it	ne
 80011ec:	2300      	movne	r3, #0
 80011ee:	eba6 0807 	sub.w	r8, r6, r7
 80011f2:	608b      	str	r3, [r1, #8]
 80011f4:	f1b8 0f00 	cmp.w	r8, #0
 80011f8:	dde9      	ble.n	80011ce <__sflush_r+0xae>
 80011fa:	6a21      	ldr	r1, [r4, #32]
 80011fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80011fe:	4643      	mov	r3, r8
 8001200:	463a      	mov	r2, r7
 8001202:	4628      	mov	r0, r5
 8001204:	47b0      	blx	r6
 8001206:	2800      	cmp	r0, #0
 8001208:	dc08      	bgt.n	800121c <__sflush_r+0xfc>
 800120a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800120e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001212:	81a3      	strh	r3, [r4, #12]
 8001214:	f04f 30ff 	mov.w	r0, #4294967295
 8001218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800121c:	4407      	add	r7, r0
 800121e:	eba8 0800 	sub.w	r8, r8, r0
 8001222:	e7e7      	b.n	80011f4 <__sflush_r+0xd4>
 8001224:	dfbffffe 	.word	0xdfbffffe

08001228 <_fflush_r>:
 8001228:	b538      	push	{r3, r4, r5, lr}
 800122a:	690b      	ldr	r3, [r1, #16]
 800122c:	4605      	mov	r5, r0
 800122e:	460c      	mov	r4, r1
 8001230:	b913      	cbnz	r3, 8001238 <_fflush_r+0x10>
 8001232:	2500      	movs	r5, #0
 8001234:	4628      	mov	r0, r5
 8001236:	bd38      	pop	{r3, r4, r5, pc}
 8001238:	b118      	cbz	r0, 8001242 <_fflush_r+0x1a>
 800123a:	6a03      	ldr	r3, [r0, #32]
 800123c:	b90b      	cbnz	r3, 8001242 <_fflush_r+0x1a>
 800123e:	f7ff fa9f 	bl	8000780 <__sinit>
 8001242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d0f3      	beq.n	8001232 <_fflush_r+0xa>
 800124a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800124c:	07d0      	lsls	r0, r2, #31
 800124e:	d404      	bmi.n	800125a <_fflush_r+0x32>
 8001250:	0599      	lsls	r1, r3, #22
 8001252:	d402      	bmi.n	800125a <_fflush_r+0x32>
 8001254:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001256:	f7ff fb98 	bl	800098a <__retarget_lock_acquire_recursive>
 800125a:	4628      	mov	r0, r5
 800125c:	4621      	mov	r1, r4
 800125e:	f7ff ff5f 	bl	8001120 <__sflush_r>
 8001262:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001264:	07da      	lsls	r2, r3, #31
 8001266:	4605      	mov	r5, r0
 8001268:	d4e4      	bmi.n	8001234 <_fflush_r+0xc>
 800126a:	89a3      	ldrh	r3, [r4, #12]
 800126c:	059b      	lsls	r3, r3, #22
 800126e:	d4e1      	bmi.n	8001234 <_fflush_r+0xc>
 8001270:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001272:	f7ff fb8b 	bl	800098c <__retarget_lock_release_recursive>
 8001276:	e7dd      	b.n	8001234 <_fflush_r+0xc>

08001278 <__swbuf_r>:
 8001278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800127a:	460e      	mov	r6, r1
 800127c:	4614      	mov	r4, r2
 800127e:	4605      	mov	r5, r0
 8001280:	b118      	cbz	r0, 800128a <__swbuf_r+0x12>
 8001282:	6a03      	ldr	r3, [r0, #32]
 8001284:	b90b      	cbnz	r3, 800128a <__swbuf_r+0x12>
 8001286:	f7ff fa7b 	bl	8000780 <__sinit>
 800128a:	69a3      	ldr	r3, [r4, #24]
 800128c:	60a3      	str	r3, [r4, #8]
 800128e:	89a3      	ldrh	r3, [r4, #12]
 8001290:	071a      	lsls	r2, r3, #28
 8001292:	d501      	bpl.n	8001298 <__swbuf_r+0x20>
 8001294:	6923      	ldr	r3, [r4, #16]
 8001296:	b943      	cbnz	r3, 80012aa <__swbuf_r+0x32>
 8001298:	4621      	mov	r1, r4
 800129a:	4628      	mov	r0, r5
 800129c:	f000 f82a 	bl	80012f4 <__swsetup_r>
 80012a0:	b118      	cbz	r0, 80012aa <__swbuf_r+0x32>
 80012a2:	f04f 37ff 	mov.w	r7, #4294967295
 80012a6:	4638      	mov	r0, r7
 80012a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012aa:	6823      	ldr	r3, [r4, #0]
 80012ac:	6922      	ldr	r2, [r4, #16]
 80012ae:	1a98      	subs	r0, r3, r2
 80012b0:	6963      	ldr	r3, [r4, #20]
 80012b2:	b2f6      	uxtb	r6, r6
 80012b4:	4283      	cmp	r3, r0
 80012b6:	4637      	mov	r7, r6
 80012b8:	dc05      	bgt.n	80012c6 <__swbuf_r+0x4e>
 80012ba:	4621      	mov	r1, r4
 80012bc:	4628      	mov	r0, r5
 80012be:	f7ff ffb3 	bl	8001228 <_fflush_r>
 80012c2:	2800      	cmp	r0, #0
 80012c4:	d1ed      	bne.n	80012a2 <__swbuf_r+0x2a>
 80012c6:	68a3      	ldr	r3, [r4, #8]
 80012c8:	3b01      	subs	r3, #1
 80012ca:	60a3      	str	r3, [r4, #8]
 80012cc:	6823      	ldr	r3, [r4, #0]
 80012ce:	1c5a      	adds	r2, r3, #1
 80012d0:	6022      	str	r2, [r4, #0]
 80012d2:	701e      	strb	r6, [r3, #0]
 80012d4:	6962      	ldr	r2, [r4, #20]
 80012d6:	1c43      	adds	r3, r0, #1
 80012d8:	429a      	cmp	r2, r3
 80012da:	d004      	beq.n	80012e6 <__swbuf_r+0x6e>
 80012dc:	89a3      	ldrh	r3, [r4, #12]
 80012de:	07db      	lsls	r3, r3, #31
 80012e0:	d5e1      	bpl.n	80012a6 <__swbuf_r+0x2e>
 80012e2:	2e0a      	cmp	r6, #10
 80012e4:	d1df      	bne.n	80012a6 <__swbuf_r+0x2e>
 80012e6:	4621      	mov	r1, r4
 80012e8:	4628      	mov	r0, r5
 80012ea:	f7ff ff9d 	bl	8001228 <_fflush_r>
 80012ee:	2800      	cmp	r0, #0
 80012f0:	d0d9      	beq.n	80012a6 <__swbuf_r+0x2e>
 80012f2:	e7d6      	b.n	80012a2 <__swbuf_r+0x2a>

080012f4 <__swsetup_r>:
 80012f4:	b538      	push	{r3, r4, r5, lr}
 80012f6:	4b29      	ldr	r3, [pc, #164]	@ (800139c <__swsetup_r+0xa8>)
 80012f8:	4605      	mov	r5, r0
 80012fa:	6818      	ldr	r0, [r3, #0]
 80012fc:	460c      	mov	r4, r1
 80012fe:	b118      	cbz	r0, 8001308 <__swsetup_r+0x14>
 8001300:	6a03      	ldr	r3, [r0, #32]
 8001302:	b90b      	cbnz	r3, 8001308 <__swsetup_r+0x14>
 8001304:	f7ff fa3c 	bl	8000780 <__sinit>
 8001308:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800130c:	0719      	lsls	r1, r3, #28
 800130e:	d422      	bmi.n	8001356 <__swsetup_r+0x62>
 8001310:	06da      	lsls	r2, r3, #27
 8001312:	d407      	bmi.n	8001324 <__swsetup_r+0x30>
 8001314:	2209      	movs	r2, #9
 8001316:	602a      	str	r2, [r5, #0]
 8001318:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800131c:	81a3      	strh	r3, [r4, #12]
 800131e:	f04f 30ff 	mov.w	r0, #4294967295
 8001322:	e033      	b.n	800138c <__swsetup_r+0x98>
 8001324:	0758      	lsls	r0, r3, #29
 8001326:	d512      	bpl.n	800134e <__swsetup_r+0x5a>
 8001328:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800132a:	b141      	cbz	r1, 800133e <__swsetup_r+0x4a>
 800132c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001330:	4299      	cmp	r1, r3
 8001332:	d002      	beq.n	800133a <__swsetup_r+0x46>
 8001334:	4628      	mov	r0, r5
 8001336:	f7ff fb2b 	bl	8000990 <_free_r>
 800133a:	2300      	movs	r3, #0
 800133c:	6363      	str	r3, [r4, #52]	@ 0x34
 800133e:	89a3      	ldrh	r3, [r4, #12]
 8001340:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001344:	81a3      	strh	r3, [r4, #12]
 8001346:	2300      	movs	r3, #0
 8001348:	6063      	str	r3, [r4, #4]
 800134a:	6923      	ldr	r3, [r4, #16]
 800134c:	6023      	str	r3, [r4, #0]
 800134e:	89a3      	ldrh	r3, [r4, #12]
 8001350:	f043 0308 	orr.w	r3, r3, #8
 8001354:	81a3      	strh	r3, [r4, #12]
 8001356:	6923      	ldr	r3, [r4, #16]
 8001358:	b94b      	cbnz	r3, 800136e <__swsetup_r+0x7a>
 800135a:	89a3      	ldrh	r3, [r4, #12]
 800135c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001360:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001364:	d003      	beq.n	800136e <__swsetup_r+0x7a>
 8001366:	4621      	mov	r1, r4
 8001368:	4628      	mov	r0, r5
 800136a:	f000 f84f 	bl	800140c <__smakebuf_r>
 800136e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001372:	f013 0201 	ands.w	r2, r3, #1
 8001376:	d00a      	beq.n	800138e <__swsetup_r+0x9a>
 8001378:	2200      	movs	r2, #0
 800137a:	60a2      	str	r2, [r4, #8]
 800137c:	6962      	ldr	r2, [r4, #20]
 800137e:	4252      	negs	r2, r2
 8001380:	61a2      	str	r2, [r4, #24]
 8001382:	6922      	ldr	r2, [r4, #16]
 8001384:	b942      	cbnz	r2, 8001398 <__swsetup_r+0xa4>
 8001386:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800138a:	d1c5      	bne.n	8001318 <__swsetup_r+0x24>
 800138c:	bd38      	pop	{r3, r4, r5, pc}
 800138e:	0799      	lsls	r1, r3, #30
 8001390:	bf58      	it	pl
 8001392:	6962      	ldrpl	r2, [r4, #20]
 8001394:	60a2      	str	r2, [r4, #8]
 8001396:	e7f4      	b.n	8001382 <__swsetup_r+0x8e>
 8001398:	2000      	movs	r0, #0
 800139a:	e7f7      	b.n	800138c <__swsetup_r+0x98>
 800139c:	2000000c 	.word	0x2000000c

080013a0 <_sbrk_r>:
 80013a0:	b538      	push	{r3, r4, r5, lr}
 80013a2:	4d06      	ldr	r5, [pc, #24]	@ (80013bc <_sbrk_r+0x1c>)
 80013a4:	2300      	movs	r3, #0
 80013a6:	4604      	mov	r4, r0
 80013a8:	4608      	mov	r0, r1
 80013aa:	602b      	str	r3, [r5, #0]
 80013ac:	f7ff f866 	bl	800047c <_sbrk>
 80013b0:	1c43      	adds	r3, r0, #1
 80013b2:	d102      	bne.n	80013ba <_sbrk_r+0x1a>
 80013b4:	682b      	ldr	r3, [r5, #0]
 80013b6:	b103      	cbz	r3, 80013ba <_sbrk_r+0x1a>
 80013b8:	6023      	str	r3, [r4, #0]
 80013ba:	bd38      	pop	{r3, r4, r5, pc}
 80013bc:	200001bc 	.word	0x200001bc

080013c0 <__swhatbuf_r>:
 80013c0:	b570      	push	{r4, r5, r6, lr}
 80013c2:	460c      	mov	r4, r1
 80013c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013c8:	2900      	cmp	r1, #0
 80013ca:	b096      	sub	sp, #88	@ 0x58
 80013cc:	4615      	mov	r5, r2
 80013ce:	461e      	mov	r6, r3
 80013d0:	da0d      	bge.n	80013ee <__swhatbuf_r+0x2e>
 80013d2:	89a3      	ldrh	r3, [r4, #12]
 80013d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80013d8:	f04f 0100 	mov.w	r1, #0
 80013dc:	bf14      	ite	ne
 80013de:	2340      	movne	r3, #64	@ 0x40
 80013e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80013e4:	2000      	movs	r0, #0
 80013e6:	6031      	str	r1, [r6, #0]
 80013e8:	602b      	str	r3, [r5, #0]
 80013ea:	b016      	add	sp, #88	@ 0x58
 80013ec:	bd70      	pop	{r4, r5, r6, pc}
 80013ee:	466a      	mov	r2, sp
 80013f0:	f000 f848 	bl	8001484 <_fstat_r>
 80013f4:	2800      	cmp	r0, #0
 80013f6:	dbec      	blt.n	80013d2 <__swhatbuf_r+0x12>
 80013f8:	9901      	ldr	r1, [sp, #4]
 80013fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80013fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001402:	4259      	negs	r1, r3
 8001404:	4159      	adcs	r1, r3
 8001406:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800140a:	e7eb      	b.n	80013e4 <__swhatbuf_r+0x24>

0800140c <__smakebuf_r>:
 800140c:	898b      	ldrh	r3, [r1, #12]
 800140e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001410:	079d      	lsls	r5, r3, #30
 8001412:	4606      	mov	r6, r0
 8001414:	460c      	mov	r4, r1
 8001416:	d507      	bpl.n	8001428 <__smakebuf_r+0x1c>
 8001418:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800141c:	6023      	str	r3, [r4, #0]
 800141e:	6123      	str	r3, [r4, #16]
 8001420:	2301      	movs	r3, #1
 8001422:	6163      	str	r3, [r4, #20]
 8001424:	b003      	add	sp, #12
 8001426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001428:	ab01      	add	r3, sp, #4
 800142a:	466a      	mov	r2, sp
 800142c:	f7ff ffc8 	bl	80013c0 <__swhatbuf_r>
 8001430:	9f00      	ldr	r7, [sp, #0]
 8001432:	4605      	mov	r5, r0
 8001434:	4639      	mov	r1, r7
 8001436:	4630      	mov	r0, r6
 8001438:	f7ff fb16 	bl	8000a68 <_malloc_r>
 800143c:	b948      	cbnz	r0, 8001452 <__smakebuf_r+0x46>
 800143e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001442:	059a      	lsls	r2, r3, #22
 8001444:	d4ee      	bmi.n	8001424 <__smakebuf_r+0x18>
 8001446:	f023 0303 	bic.w	r3, r3, #3
 800144a:	f043 0302 	orr.w	r3, r3, #2
 800144e:	81a3      	strh	r3, [r4, #12]
 8001450:	e7e2      	b.n	8001418 <__smakebuf_r+0xc>
 8001452:	89a3      	ldrh	r3, [r4, #12]
 8001454:	6020      	str	r0, [r4, #0]
 8001456:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800145a:	81a3      	strh	r3, [r4, #12]
 800145c:	9b01      	ldr	r3, [sp, #4]
 800145e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001462:	b15b      	cbz	r3, 800147c <__smakebuf_r+0x70>
 8001464:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001468:	4630      	mov	r0, r6
 800146a:	f000 f81d 	bl	80014a8 <_isatty_r>
 800146e:	b128      	cbz	r0, 800147c <__smakebuf_r+0x70>
 8001470:	89a3      	ldrh	r3, [r4, #12]
 8001472:	f023 0303 	bic.w	r3, r3, #3
 8001476:	f043 0301 	orr.w	r3, r3, #1
 800147a:	81a3      	strh	r3, [r4, #12]
 800147c:	89a3      	ldrh	r3, [r4, #12]
 800147e:	431d      	orrs	r5, r3
 8001480:	81a5      	strh	r5, [r4, #12]
 8001482:	e7cf      	b.n	8001424 <__smakebuf_r+0x18>

08001484 <_fstat_r>:
 8001484:	b538      	push	{r3, r4, r5, lr}
 8001486:	4d07      	ldr	r5, [pc, #28]	@ (80014a4 <_fstat_r+0x20>)
 8001488:	2300      	movs	r3, #0
 800148a:	4604      	mov	r4, r0
 800148c:	4608      	mov	r0, r1
 800148e:	4611      	mov	r1, r2
 8001490:	602b      	str	r3, [r5, #0]
 8001492:	f7fe ffca 	bl	800042a <_fstat>
 8001496:	1c43      	adds	r3, r0, #1
 8001498:	d102      	bne.n	80014a0 <_fstat_r+0x1c>
 800149a:	682b      	ldr	r3, [r5, #0]
 800149c:	b103      	cbz	r3, 80014a0 <_fstat_r+0x1c>
 800149e:	6023      	str	r3, [r4, #0]
 80014a0:	bd38      	pop	{r3, r4, r5, pc}
 80014a2:	bf00      	nop
 80014a4:	200001bc 	.word	0x200001bc

080014a8 <_isatty_r>:
 80014a8:	b538      	push	{r3, r4, r5, lr}
 80014aa:	4d06      	ldr	r5, [pc, #24]	@ (80014c4 <_isatty_r+0x1c>)
 80014ac:	2300      	movs	r3, #0
 80014ae:	4604      	mov	r4, r0
 80014b0:	4608      	mov	r0, r1
 80014b2:	602b      	str	r3, [r5, #0]
 80014b4:	f7fe ffc9 	bl	800044a <_isatty>
 80014b8:	1c43      	adds	r3, r0, #1
 80014ba:	d102      	bne.n	80014c2 <_isatty_r+0x1a>
 80014bc:	682b      	ldr	r3, [r5, #0]
 80014be:	b103      	cbz	r3, 80014c2 <_isatty_r+0x1a>
 80014c0:	6023      	str	r3, [r4, #0]
 80014c2:	bd38      	pop	{r3, r4, r5, pc}
 80014c4:	200001bc 	.word	0x200001bc

080014c8 <_init>:
 80014c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ca:	bf00      	nop
 80014cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014ce:	bc08      	pop	{r3}
 80014d0:	469e      	mov	lr, r3
 80014d2:	4770      	bx	lr

080014d4 <_fini>:
 80014d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014d6:	bf00      	nop
 80014d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014da:	bc08      	pop	{r3}
 80014dc:	469e      	mov	lr, r3
 80014de:	4770      	bx	lr
