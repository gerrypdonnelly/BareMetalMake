
24_LCD_4_bit_interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000304  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800048c  08000494  00001494  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800048c  0800048c  00001494  2**0
                  CONTENTS
  4 .ARM          00000000  0800048c  0800048c  00001494  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800048c  08000494  00001494  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800048c  0800048c  0000148c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000490  08000490  00001490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001494  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001494  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001494  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000498  00000000  00000000  000014c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001fc  00000000  00000000  0000195c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000090  00000000  00000000  00001b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000005d  00000000  00000000  00001be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000e44  00000000  00000000  00001c45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000e18  00000000  00000000  00002a89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008be2c  00000000  00000000  000038a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0008f6cd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000138  00000000  00000000  0008f710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000087  00000000  00000000  0008f848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000474 	.word	0x08000474

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000474 	.word	0x08000474

080001c8 <GPIO_init>:

void delayMs(int delay);


void GPIO_init (void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |=0x06;//Enable clock access for GPIOB (bit 1) and GPIOC (bit 2)
 80001cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000208 <GPIO_init+0x40>)
 80001ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000208 <GPIO_init+0x40>)
 80001d2:	f043 0306 	orr.w	r3, r3, #6
 80001d6:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOB->MODER |= 0x4400;//Set pins 5 & 7 to general purpose output
 80001d8:	4b0c      	ldr	r3, [pc, #48]	@ (800020c <GPIO_init+0x44>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a0b      	ldr	r2, [pc, #44]	@ (800020c <GPIO_init+0x44>)
 80001de:	f443 4388 	orr.w	r3, r3, #17408	@ 0x4400
 80001e2:	6013      	str	r3, [r2, #0]

	GPIOB->BSRR |= 0x800000;  //Clear EN
 80001e4:	4b09      	ldr	r3, [pc, #36]	@ (800020c <GPIO_init+0x44>)
 80001e6:	699b      	ldr	r3, [r3, #24]
 80001e8:	4a08      	ldr	r2, [pc, #32]	@ (800020c <GPIO_init+0x44>)
 80001ea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80001ee:	6193      	str	r3, [r2, #24]
	GPIOC->MODER |= 0x0000550;//Set data pins Do - D7 as O/P
 80001f0:	4b07      	ldr	r3, [pc, #28]	@ (8000210 <GPIO_init+0x48>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a06      	ldr	r2, [pc, #24]	@ (8000210 <GPIO_init+0x48>)
 80001f6:	f443 63aa 	orr.w	r3, r3, #1360	@ 0x550
 80001fa:	6013      	str	r3, [r2, #0]
}
 80001fc:	bf00      	nop
 80001fe:	46bd      	mov	sp, r7
 8000200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000204:	4770      	bx	lr
 8000206:	bf00      	nop
 8000208:	40023800 	.word	0x40023800
 800020c:	40020400 	.word	0x40020400
 8000210:	40020800 	.word	0x40020800

08000214 <LCD_init>:

void LCD_init(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	GPIO_init();
 8000218:	f7ff ffd6 	bl	80001c8 <GPIO_init>
	delayMs(30);
 800021c:	201e      	movs	r0, #30
 800021e:	f000 f89b 	bl	8000358 <delayMs>
	LCD_nibble_write(0x30,0);
 8000222:	2100      	movs	r1, #0
 8000224:	2030      	movs	r0, #48	@ 0x30
 8000226:	f000 f861 	bl	80002ec <LCD_nibble_write>
	delayMs(10);
 800022a:	200a      	movs	r0, #10
 800022c:	f000 f894 	bl	8000358 <delayMs>
	LCD_nibble_write(0x30,0);
 8000230:	2100      	movs	r1, #0
 8000232:	2030      	movs	r0, #48	@ 0x30
 8000234:	f000 f85a 	bl	80002ec <LCD_nibble_write>
	delayMs(1);
 8000238:	2001      	movs	r0, #1
 800023a:	f000 f88d 	bl	8000358 <delayMs>
	LCD_nibble_write(0x30,0);
 800023e:	2100      	movs	r1, #0
 8000240:	2030      	movs	r0, #48	@ 0x30
 8000242:	f000 f853 	bl	80002ec <LCD_nibble_write>

	LCD_nibble_write(0x20,0);//Set 4 bit data mode
 8000246:	2100      	movs	r1, #0
 8000248:	2020      	movs	r0, #32
 800024a:	f000 f84f 	bl	80002ec <LCD_nibble_write>
	delayMs(1);
 800024e:	2001      	movs	r0, #1
 8000250:	f000 f882 	bl	8000358 <delayMs>
	LCD_command(0x28);//Set 2 lines 5x7 font
 8000254:	2028      	movs	r0, #40	@ 0x28
 8000256:	f000 f80b 	bl	8000270 <LCD_command>
	LCD_command(0x06);//move cursor right
 800025a:	2006      	movs	r0, #6
 800025c:	f000 f808 	bl	8000270 <LCD_command>
	LCD_command(0x01);//CLear screen, move cursor home
 8000260:	2001      	movs	r0, #1
 8000262:	f000 f805 	bl	8000270 <LCD_command>
	LCD_command(0x0F);//Turn display on and blink cursor
 8000266:	200f      	movs	r0, #15
 8000268:	f000 f802 	bl	8000270 <LCD_command>
}
 800026c:	bf00      	nop
 800026e:	bd80      	pop	{r7, pc}

08000270 <LCD_command>:


void LCD_command(unsigned char command)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
	LCD_nibble_write(command & 0xF0,0);//upper 4 bits
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	f023 030f 	bic.w	r3, r3, #15
 8000280:	b2db      	uxtb	r3, r3
 8000282:	2100      	movs	r1, #0
 8000284:	4618      	mov	r0, r3
 8000286:	f000 f831 	bl	80002ec <LCD_nibble_write>
	LCD_nibble_write(command <<4,0); //lower 4 bits
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	011b      	lsls	r3, r3, #4
 800028e:	b2db      	uxtb	r3, r3
 8000290:	2100      	movs	r1, #0
 8000292:	4618      	mov	r0, r3
 8000294:	f000 f82a 	bl	80002ec <LCD_nibble_write>

	if (command < 4)
 8000298:	79fb      	ldrb	r3, [r7, #7]
 800029a:	2b03      	cmp	r3, #3
 800029c:	d803      	bhi.n	80002a6 <LCD_command+0x36>
	{
		delayMs(2);
 800029e:	2002      	movs	r0, #2
 80002a0:	f000 f85a 	bl	8000358 <delayMs>
	}
	else
		delayMs(1);
}
 80002a4:	e002      	b.n	80002ac <LCD_command+0x3c>
		delayMs(1);
 80002a6:	2001      	movs	r0, #1
 80002a8:	f000 f856 	bl	8000358 <delayMs>
}
 80002ac:	bf00      	nop
 80002ae:	3708      	adds	r7, #8
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}

080002b4 <LCD_data>:


void LCD_data(char data)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	71fb      	strb	r3, [r7, #7]
	LCD_nibble_write(data & 0xF0, RS);
 80002be:	79fb      	ldrb	r3, [r7, #7]
 80002c0:	f023 030f 	bic.w	r3, r3, #15
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	2120      	movs	r1, #32
 80002c8:	4618      	mov	r0, r3
 80002ca:	f000 f80f 	bl	80002ec <LCD_nibble_write>
	LCD_nibble_write(data<<4,RS);
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	011b      	lsls	r3, r3, #4
 80002d2:	b2db      	uxtb	r3, r3
 80002d4:	2120      	movs	r1, #32
 80002d6:	4618      	mov	r0, r3
 80002d8:	f000 f808 	bl	80002ec <LCD_nibble_write>
	delayMs(1);
 80002dc:	2001      	movs	r0, #1
 80002de:	f000 f83b 	bl	8000358 <delayMs>
}
 80002e2:	bf00      	nop
 80002e4:	3708      	adds	r7, #8
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}
	...

080002ec <LCD_nibble_write>:


void LCD_nibble_write(char data, unsigned char control)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	4603      	mov	r3, r0
 80002f4:	460a      	mov	r2, r1
 80002f6:	71fb      	strb	r3, [r7, #7]
 80002f8:	4613      	mov	r3, r2
 80002fa:	71bb      	strb	r3, [r7, #6]
	GPIOC->BSRR |= 0xF00000;//Clear data bits
 80002fc:	4b14      	ldr	r3, [pc, #80]	@ (8000350 <LCD_nibble_write+0x64>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	4a13      	ldr	r2, [pc, #76]	@ (8000350 <LCD_nibble_write+0x64>)
 8000302:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000306:	6193      	str	r3, [r2, #24]
	GPIOC->BSRR |= data & 0xF0;
 8000308:	4b11      	ldr	r3, [pc, #68]	@ (8000350 <LCD_nibble_write+0x64>)
 800030a:	699a      	ldr	r2, [r3, #24]
 800030c:	79fb      	ldrb	r3, [r7, #7]
 800030e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000312:	490f      	ldr	r1, [pc, #60]	@ (8000350 <LCD_nibble_write+0x64>)
 8000314:	4313      	orrs	r3, r2
 8000316:	618b      	str	r3, [r1, #24]

	if(control & RS)
 8000318:	79bb      	ldrb	r3, [r7, #6]
 800031a:	f003 0320 	and.w	r3, r3, #32
 800031e:	2b00      	cmp	r3, #0
 8000320:	d003      	beq.n	800032a <LCD_nibble_write+0x3e>
	{
		GPIOB->BSRR = RS;
 8000322:	4b0c      	ldr	r3, [pc, #48]	@ (8000354 <LCD_nibble_write+0x68>)
 8000324:	2220      	movs	r2, #32
 8000326:	619a      	str	r2, [r3, #24]
 8000328:	e003      	b.n	8000332 <LCD_nibble_write+0x46>
	}
	else
	{
		GPIOB->BSRR = RS<<16;//Clear RS
 800032a:	4b0a      	ldr	r3, [pc, #40]	@ (8000354 <LCD_nibble_write+0x68>)
 800032c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000330:	619a      	str	r2, [r3, #24]
	}

	//Pulse EN line
	GPIOB->BSRR = EN;
 8000332:	4b08      	ldr	r3, [pc, #32]	@ (8000354 <LCD_nibble_write+0x68>)
 8000334:	2280      	movs	r2, #128	@ 0x80
 8000336:	619a      	str	r2, [r3, #24]
	delayMs(0);
 8000338:	2000      	movs	r0, #0
 800033a:	f000 f80d 	bl	8000358 <delayMs>
	GPIOB->BSRR = EN<<16;
 800033e:	4b05      	ldr	r3, [pc, #20]	@ (8000354 <LCD_nibble_write+0x68>)
 8000340:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000344:	619a      	str	r2, [r3, #24]
}
 8000346:	bf00      	nop
 8000348:	3708      	adds	r7, #8
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	40020800 	.word	0x40020800
 8000354:	40020400 	.word	0x40020400

08000358 <delayMs>:

void delayMs(int delay)
{
 8000358:	b480      	push	{r7}
 800035a:	b085      	sub	sp, #20
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
	int i;
	for(;delay>0;delay--)
 8000360:	e00d      	b.n	800037e <delayMs+0x26>
	{
		for(i=0;i<3195;i++)
 8000362:	2300      	movs	r3, #0
 8000364:	60fb      	str	r3, [r7, #12]
 8000366:	e002      	b.n	800036e <delayMs+0x16>
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	3301      	adds	r3, #1
 800036c:	60fb      	str	r3, [r7, #12]
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	f640 427a 	movw	r2, #3194	@ 0xc7a
 8000374:	4293      	cmp	r3, r2
 8000376:	ddf7      	ble.n	8000368 <delayMs+0x10>
	for(;delay>0;delay--)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	3b01      	subs	r3, #1
 800037c:	607b      	str	r3, [r7, #4]
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	2b00      	cmp	r3, #0
 8000382:	dcee      	bgt.n	8000362 <delayMs+0xa>
		{

		}
	}
}
 8000384:	bf00      	nop
 8000386:	bf00      	nop
 8000388:	3714      	adds	r7, #20
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr

08000392 <main>:




int main(void)
{
 8000392:	b580      	push	{r7, lr}
 8000394:	af00      	add	r7, sp, #0

	LCD_init();
 8000396:	f7ff ff3d 	bl	8000214 <LCD_init>


	while(1)
	{

		LCD_data('H');
 800039a:	2048      	movs	r0, #72	@ 0x48
 800039c:	f7ff ff8a 	bl	80002b4 <LCD_data>
		LCD_data('e');
 80003a0:	2065      	movs	r0, #101	@ 0x65
 80003a2:	f7ff ff87 	bl	80002b4 <LCD_data>
		LCD_data('l');
 80003a6:	206c      	movs	r0, #108	@ 0x6c
 80003a8:	f7ff ff84 	bl	80002b4 <LCD_data>
		LCD_data('l');
 80003ac:	206c      	movs	r0, #108	@ 0x6c
 80003ae:	f7ff ff81 	bl	80002b4 <LCD_data>
		LCD_data('o');
 80003b2:	206f      	movs	r0, #111	@ 0x6f
 80003b4:	f7ff ff7e 	bl	80002b4 <LCD_data>
		LCD_data('!');
 80003b8:	2021      	movs	r0, #33	@ 0x21
 80003ba:	f7ff ff7b 	bl	80002b4 <LCD_data>
		delayMs(500);
 80003be:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80003c2:	f7ff ffc9 	bl	8000358 <delayMs>
		LCD_command(0x01);//clears the screen
 80003c6:	2001      	movs	r0, #1
 80003c8:	f7ff ff52 	bl	8000270 <LCD_command>
		delayMs(500);
 80003cc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80003d0:	f7ff ffc2 	bl	8000358 <delayMs>
	{
 80003d4:	bf00      	nop
 80003d6:	e7e0      	b.n	800039a <main+0x8>

080003d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003d8:	480d      	ldr	r0, [pc, #52]	@ (8000410 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003da:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003dc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003e0:	480c      	ldr	r0, [pc, #48]	@ (8000414 <LoopForever+0x6>)
  ldr r1, =_edata
 80003e2:	490d      	ldr	r1, [pc, #52]	@ (8000418 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003e4:	4a0d      	ldr	r2, [pc, #52]	@ (800041c <LoopForever+0xe>)
  movs r3, #0
 80003e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003e8:	e002      	b.n	80003f0 <LoopCopyDataInit>

080003ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ee:	3304      	adds	r3, #4

080003f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003f4:	d3f9      	bcc.n	80003ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000420 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003f8:	4c0a      	ldr	r4, [pc, #40]	@ (8000424 <LoopForever+0x16>)
  movs r3, #0
 80003fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003fc:	e001      	b.n	8000402 <LoopFillZerobss>

080003fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000400:	3204      	adds	r2, #4

08000402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000404:	d3fb      	bcc.n	80003fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000406:	f000 f811 	bl	800042c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800040a:	f7ff ffc2 	bl	8000392 <main>

0800040e <LoopForever>:

LoopForever:
  b LoopForever
 800040e:	e7fe      	b.n	800040e <LoopForever>
  ldr   r0, =_estack
 8000410:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000414:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000418:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800041c:	08000494 	.word	0x08000494
  ldr r2, =_sbss
 8000420:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000424:	2000001c 	.word	0x2000001c

08000428 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000428:	e7fe      	b.n	8000428 <ADC_IRQHandler>
	...

0800042c <__libc_init_array>:
 800042c:	b570      	push	{r4, r5, r6, lr}
 800042e:	4d0d      	ldr	r5, [pc, #52]	@ (8000464 <__libc_init_array+0x38>)
 8000430:	4c0d      	ldr	r4, [pc, #52]	@ (8000468 <__libc_init_array+0x3c>)
 8000432:	1b64      	subs	r4, r4, r5
 8000434:	10a4      	asrs	r4, r4, #2
 8000436:	2600      	movs	r6, #0
 8000438:	42a6      	cmp	r6, r4
 800043a:	d109      	bne.n	8000450 <__libc_init_array+0x24>
 800043c:	4d0b      	ldr	r5, [pc, #44]	@ (800046c <__libc_init_array+0x40>)
 800043e:	4c0c      	ldr	r4, [pc, #48]	@ (8000470 <__libc_init_array+0x44>)
 8000440:	f000 f818 	bl	8000474 <_init>
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	10a4      	asrs	r4, r4, #2
 8000448:	2600      	movs	r6, #0
 800044a:	42a6      	cmp	r6, r4
 800044c:	d105      	bne.n	800045a <__libc_init_array+0x2e>
 800044e:	bd70      	pop	{r4, r5, r6, pc}
 8000450:	f855 3b04 	ldr.w	r3, [r5], #4
 8000454:	4798      	blx	r3
 8000456:	3601      	adds	r6, #1
 8000458:	e7ee      	b.n	8000438 <__libc_init_array+0xc>
 800045a:	f855 3b04 	ldr.w	r3, [r5], #4
 800045e:	4798      	blx	r3
 8000460:	3601      	adds	r6, #1
 8000462:	e7f2      	b.n	800044a <__libc_init_array+0x1e>
 8000464:	0800048c 	.word	0x0800048c
 8000468:	0800048c 	.word	0x0800048c
 800046c:	0800048c 	.word	0x0800048c
 8000470:	08000490 	.word	0x08000490

08000474 <_init>:
 8000474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000476:	bf00      	nop
 8000478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800047a:	bc08      	pop	{r3}
 800047c:	469e      	mov	lr, r3
 800047e:	4770      	bx	lr

08000480 <_fini>:
 8000480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000482:	bf00      	nop
 8000484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000486:	bc08      	pop	{r3}
 8000488:	469e      	mov	lr, r3
 800048a:	4770      	bx	lr
