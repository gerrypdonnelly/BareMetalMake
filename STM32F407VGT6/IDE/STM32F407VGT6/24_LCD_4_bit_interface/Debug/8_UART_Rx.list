
8_UART_Rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013d0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08001560  08001560  00002560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001624  08001624  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  08001624  08001624  00002624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800162c  0800162c  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800162c  0800162c  0000262c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001630  08001630  00002630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001634  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000305c  2**0
                  CONTENTS
 10 .bss          00000170  2000005c  2000005c  0000305c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001cc  200001cc  0000305c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000f7e  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000527  00000000  00000000  0000400a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000160  00000000  00000000  00004538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000f2  00000000  00000000  00004698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019fda  00000000  00000000  0000478a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001cff  00000000  00000000  0001e764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e0d1  00000000  00000000  00020463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ae534  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000be0  00000000  00000000  000ae578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  000af158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001548 	.word	0x08001548

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08001548 	.word	0x08001548

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
#define BLUE_LED_PIN				PIN15

char key;

int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
	//1. Enable clock access to GPIOD
		RCC->AHB1ENR |=GPIODEN;
 8000274:	4b42      	ldr	r3, [pc, #264]	@ (8000380 <main+0x110>)
 8000276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000278:	4a41      	ldr	r2, [pc, #260]	@ (8000380 <main+0x110>)
 800027a:	f043 0308 	orr.w	r3, r3, #8
 800027e:	6313      	str	r3, [r2, #48]	@ 0x30

		//2. Set Pins as OP pins
		GPIOD->MODER |= (1U<<24); //Pin12
 8000280:	4b40      	ldr	r3, [pc, #256]	@ (8000384 <main+0x114>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a3f      	ldr	r2, [pc, #252]	@ (8000384 <main+0x114>)
 8000286:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800028a:	6013      	str	r3, [r2, #0]
		GPIOD->MODER &=~(1U<<25);
 800028c:	4b3d      	ldr	r3, [pc, #244]	@ (8000384 <main+0x114>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a3c      	ldr	r2, [pc, #240]	@ (8000384 <main+0x114>)
 8000292:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8000296:	6013      	str	r3, [r2, #0]
		GPIOD->MODER |= (1U<<26); //Pin13
 8000298:	4b3a      	ldr	r3, [pc, #232]	@ (8000384 <main+0x114>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a39      	ldr	r2, [pc, #228]	@ (8000384 <main+0x114>)
 800029e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80002a2:	6013      	str	r3, [r2, #0]
		GPIOD->MODER &=~(1U<<27);
 80002a4:	4b37      	ldr	r3, [pc, #220]	@ (8000384 <main+0x114>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a36      	ldr	r2, [pc, #216]	@ (8000384 <main+0x114>)
 80002aa:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 80002ae:	6013      	str	r3, [r2, #0]
		GPIOD->MODER |= (1U<<28); //Pin14
 80002b0:	4b34      	ldr	r3, [pc, #208]	@ (8000384 <main+0x114>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a33      	ldr	r2, [pc, #204]	@ (8000384 <main+0x114>)
 80002b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80002ba:	6013      	str	r3, [r2, #0]
		GPIOD->MODER &=~(1U<<29);
 80002bc:	4b31      	ldr	r3, [pc, #196]	@ (8000384 <main+0x114>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a30      	ldr	r2, [pc, #192]	@ (8000384 <main+0x114>)
 80002c2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80002c6:	6013      	str	r3, [r2, #0]
		GPIOD->MODER |= (1U<<30); //Pin15
 80002c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000384 <main+0x114>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a2d      	ldr	r2, [pc, #180]	@ (8000384 <main+0x114>)
 80002ce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80002d2:	6013      	str	r3, [r2, #0]
		GPIOD->MODER &=~(1U<<31);
 80002d4:	4b2b      	ldr	r3, [pc, #172]	@ (8000384 <main+0x114>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a2a      	ldr	r2, [pc, #168]	@ (8000384 <main+0x114>)
 80002da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80002de:	6013      	str	r3, [r2, #0]


	uart2_rxtx_init();
 80002e0:	f000 f910 	bl	8000504 <uart2_rxtx_init>


	while(1)
	{
		key = uart2_read();
 80002e4:	f000 f984 	bl	80005f0 <uart2_read>
 80002e8:	4603      	mov	r3, r0
 80002ea:	461a      	mov	r2, r3
 80002ec:	4b26      	ldr	r3, [pc, #152]	@ (8000388 <main+0x118>)
 80002ee:	701a      	strb	r2, [r3, #0]
		if(key == '1')
 80002f0:	4b25      	ldr	r3, [pc, #148]	@ (8000388 <main+0x118>)
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	2b31      	cmp	r3, #49	@ 0x31
 80002f6:	d106      	bne.n	8000306 <main+0x96>
		{
			GPIOD->BSRR = ORANGE_LED_PIN;
 80002f8:	4b22      	ldr	r3, [pc, #136]	@ (8000384 <main+0x114>)
 80002fa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80002fe:	619a      	str	r2, [r3, #24]
			printf("Orange LED on\n\r");
 8000300:	4822      	ldr	r0, [pc, #136]	@ (800038c <main+0x11c>)
 8000302:	f000 fab3 	bl	800086c <iprintf>
		}
		if(key == '2')
 8000306:	4b20      	ldr	r3, [pc, #128]	@ (8000388 <main+0x118>)
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	2b32      	cmp	r3, #50	@ 0x32
 800030c:	d106      	bne.n	800031c <main+0xac>
		{
			GPIOD->BSRR = RED_LED_PIN;
 800030e:	4b1d      	ldr	r3, [pc, #116]	@ (8000384 <main+0x114>)
 8000310:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000314:	619a      	str	r2, [r3, #24]
			printf("Red LED on\n\r");
 8000316:	481e      	ldr	r0, [pc, #120]	@ (8000390 <main+0x120>)
 8000318:	f000 faa8 	bl	800086c <iprintf>
		}
		if(key == '3')
 800031c:	4b1a      	ldr	r3, [pc, #104]	@ (8000388 <main+0x118>)
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	2b33      	cmp	r3, #51	@ 0x33
 8000322:	d106      	bne.n	8000332 <main+0xc2>
		{
			GPIOD->BSRR = GREEN_LED_PIN;
 8000324:	4b17      	ldr	r3, [pc, #92]	@ (8000384 <main+0x114>)
 8000326:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800032a:	619a      	str	r2, [r3, #24]
			printf("Green LED on\n\r");
 800032c:	4819      	ldr	r0, [pc, #100]	@ (8000394 <main+0x124>)
 800032e:	f000 fa9d 	bl	800086c <iprintf>
		}
		if(key == '4')
 8000332:	4b15      	ldr	r3, [pc, #84]	@ (8000388 <main+0x118>)
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	2b34      	cmp	r3, #52	@ 0x34
 8000338:	d106      	bne.n	8000348 <main+0xd8>
		{
			GPIOD->BSRR = BLUE_LED_PIN;
 800033a:	4b12      	ldr	r3, [pc, #72]	@ (8000384 <main+0x114>)
 800033c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000340:	619a      	str	r2, [r3, #24]
			printf("Blue LED on\n\r");
 8000342:	4815      	ldr	r0, [pc, #84]	@ (8000398 <main+0x128>)
 8000344:	f000 fa92 	bl	800086c <iprintf>
		}
		if(key == '0')
 8000348:	4b0f      	ldr	r3, [pc, #60]	@ (8000388 <main+0x118>)
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	2b30      	cmp	r3, #48	@ 0x30
 800034e:	d113      	bne.n	8000378 <main+0x108>
		{
			GPIOD->BSRR = (1U<<29);
 8000350:	4b0c      	ldr	r3, [pc, #48]	@ (8000384 <main+0x114>)
 8000352:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000356:	619a      	str	r2, [r3, #24]
			GPIOD->BSRR = (1U<<28);
 8000358:	4b0a      	ldr	r3, [pc, #40]	@ (8000384 <main+0x114>)
 800035a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800035e:	619a      	str	r2, [r3, #24]
			GPIOD->BSRR = (1U<<31);
 8000360:	4b08      	ldr	r3, [pc, #32]	@ (8000384 <main+0x114>)
 8000362:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000366:	619a      	str	r2, [r3, #24]
			GPIOD->BSRR = (1U<<30);
 8000368:	4b06      	ldr	r3, [pc, #24]	@ (8000384 <main+0x114>)
 800036a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800036e:	619a      	str	r2, [r3, #24]
			printf("All LEDs off\n\r");
 8000370:	480a      	ldr	r0, [pc, #40]	@ (800039c <main+0x12c>)
 8000372:	f000 fa7b 	bl	800086c <iprintf>
 8000376:	e7b5      	b.n	80002e4 <main+0x74>
		}
		else
		{
			printf("Press 1, 2, 3, 4 to turn LEDs ON; and 0 to turn all LEDs off\n\r");
 8000378:	4809      	ldr	r0, [pc, #36]	@ (80003a0 <main+0x130>)
 800037a:	f000 fa77 	bl	800086c <iprintf>
		key = uart2_read();
 800037e:	e7b1      	b.n	80002e4 <main+0x74>
 8000380:	40023800 	.word	0x40023800
 8000384:	40020c00 	.word	0x40020c00
 8000388:	20000078 	.word	0x20000078
 800038c:	08001560 	.word	0x08001560
 8000390:	08001570 	.word	0x08001570
 8000394:	08001580 	.word	0x08001580
 8000398:	08001590 	.word	0x08001590
 800039c:	080015a0 	.word	0x080015a0
 80003a0:	080015b0 	.word	0x080015b0

080003a4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b086      	sub	sp, #24
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	60f8      	str	r0, [r7, #12]
 80003ac:	60b9      	str	r1, [r7, #8]
 80003ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003b0:	2300      	movs	r3, #0
 80003b2:	617b      	str	r3, [r7, #20]
 80003b4:	e00a      	b.n	80003cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80003b6:	f3af 8000 	nop.w
 80003ba:	4601      	mov	r1, r0
 80003bc:	68bb      	ldr	r3, [r7, #8]
 80003be:	1c5a      	adds	r2, r3, #1
 80003c0:	60ba      	str	r2, [r7, #8]
 80003c2:	b2ca      	uxtb	r2, r1
 80003c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003c6:	697b      	ldr	r3, [r7, #20]
 80003c8:	3301      	adds	r3, #1
 80003ca:	617b      	str	r3, [r7, #20]
 80003cc:	697a      	ldr	r2, [r7, #20]
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	429a      	cmp	r2, r3
 80003d2:	dbf0      	blt.n	80003b6 <_read+0x12>
  }

  return len;
 80003d4:	687b      	ldr	r3, [r7, #4]
}
 80003d6:	4618      	mov	r0, r3
 80003d8:	3718      	adds	r7, #24
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}

080003de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003de:	b580      	push	{r7, lr}
 80003e0:	b086      	sub	sp, #24
 80003e2:	af00      	add	r7, sp, #0
 80003e4:	60f8      	str	r0, [r7, #12]
 80003e6:	60b9      	str	r1, [r7, #8]
 80003e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003ea:	2300      	movs	r3, #0
 80003ec:	617b      	str	r3, [r7, #20]
 80003ee:	e009      	b.n	8000404 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80003f0:	68bb      	ldr	r3, [r7, #8]
 80003f2:	1c5a      	adds	r2, r3, #1
 80003f4:	60ba      	str	r2, [r7, #8]
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	4618      	mov	r0, r3
 80003fa:	f000 f877 	bl	80004ec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003fe:	697b      	ldr	r3, [r7, #20]
 8000400:	3301      	adds	r3, #1
 8000402:	617b      	str	r3, [r7, #20]
 8000404:	697a      	ldr	r2, [r7, #20]
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	429a      	cmp	r2, r3
 800040a:	dbf1      	blt.n	80003f0 <_write+0x12>
  }
  return len;
 800040c:	687b      	ldr	r3, [r7, #4]
}
 800040e:	4618      	mov	r0, r3
 8000410:	3718      	adds	r7, #24
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}

08000416 <_close>:

int _close(int file)
{
 8000416:	b480      	push	{r7}
 8000418:	b083      	sub	sp, #12
 800041a:	af00      	add	r7, sp, #0
 800041c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800041e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000422:	4618      	mov	r0, r3
 8000424:	370c      	adds	r7, #12
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr

0800042e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800042e:	b480      	push	{r7}
 8000430:	b083      	sub	sp, #12
 8000432:	af00      	add	r7, sp, #0
 8000434:	6078      	str	r0, [r7, #4]
 8000436:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800043e:	605a      	str	r2, [r3, #4]
  return 0;
 8000440:	2300      	movs	r3, #0
}
 8000442:	4618      	mov	r0, r3
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr

0800044e <_isatty>:

int _isatty(int file)
{
 800044e:	b480      	push	{r7}
 8000450:	b083      	sub	sp, #12
 8000452:	af00      	add	r7, sp, #0
 8000454:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000456:	2301      	movs	r3, #1
}
 8000458:	4618      	mov	r0, r3
 800045a:	370c      	adds	r7, #12
 800045c:	46bd      	mov	sp, r7
 800045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000462:	4770      	bx	lr

08000464 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000464:	b480      	push	{r7}
 8000466:	b085      	sub	sp, #20
 8000468:	af00      	add	r7, sp, #0
 800046a:	60f8      	str	r0, [r7, #12]
 800046c:	60b9      	str	r1, [r7, #8]
 800046e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000470:	2300      	movs	r3, #0
}
 8000472:	4618      	mov	r0, r3
 8000474:	3714      	adds	r7, #20
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr
	...

08000480 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b086      	sub	sp, #24
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000488:	4a14      	ldr	r2, [pc, #80]	@ (80004dc <_sbrk+0x5c>)
 800048a:	4b15      	ldr	r3, [pc, #84]	@ (80004e0 <_sbrk+0x60>)
 800048c:	1ad3      	subs	r3, r2, r3
 800048e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000490:	697b      	ldr	r3, [r7, #20]
 8000492:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000494:	4b13      	ldr	r3, [pc, #76]	@ (80004e4 <_sbrk+0x64>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d102      	bne.n	80004a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800049c:	4b11      	ldr	r3, [pc, #68]	@ (80004e4 <_sbrk+0x64>)
 800049e:	4a12      	ldr	r2, [pc, #72]	@ (80004e8 <_sbrk+0x68>)
 80004a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004a2:	4b10      	ldr	r3, [pc, #64]	@ (80004e4 <_sbrk+0x64>)
 80004a4:	681a      	ldr	r2, [r3, #0]
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	4413      	add	r3, r2
 80004aa:	693a      	ldr	r2, [r7, #16]
 80004ac:	429a      	cmp	r2, r3
 80004ae:	d207      	bcs.n	80004c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004b0:	f000 fa80 	bl	80009b4 <__errno>
 80004b4:	4603      	mov	r3, r0
 80004b6:	220c      	movs	r2, #12
 80004b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004ba:	f04f 33ff 	mov.w	r3, #4294967295
 80004be:	e009      	b.n	80004d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004c0:	4b08      	ldr	r3, [pc, #32]	@ (80004e4 <_sbrk+0x64>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004c6:	4b07      	ldr	r3, [pc, #28]	@ (80004e4 <_sbrk+0x64>)
 80004c8:	681a      	ldr	r2, [r3, #0]
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4413      	add	r3, r2
 80004ce:	4a05      	ldr	r2, [pc, #20]	@ (80004e4 <_sbrk+0x64>)
 80004d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004d2:	68fb      	ldr	r3, [r7, #12]
}
 80004d4:	4618      	mov	r0, r3
 80004d6:	3718      	adds	r7, #24
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	20020000 	.word	0x20020000
 80004e0:	00000400 	.word	0x00000400
 80004e4:	2000007c 	.word	0x2000007c
 80004e8:	200001d0 	.word	0x200001d0

080004ec <__io_putchar>:
void uart2_write(int ch);



int __io_putchar(int ch)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 80004f4:	6878      	ldr	r0, [r7, #4]
 80004f6:	f000 f88f 	bl	8000618 <uart2_write>
	return ch;
 80004fa:	687b      	ldr	r3, [r7, #4]
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}

08000504 <uart2_rxtx_init>:


void uart2_rxtx_init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
	//Configure UART tx pin
	//Enable clock to GPIOA
	RCC->AHB1ENR |=GPIOAEN;
 8000508:	4b35      	ldr	r3, [pc, #212]	@ (80005e0 <uart2_rxtx_init+0xdc>)
 800050a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050c:	4a34      	ldr	r2, [pc, #208]	@ (80005e0 <uart2_rxtx_init+0xdc>)
 800050e:	f043 0301 	orr.w	r3, r3, #1
 8000512:	6313      	str	r3, [r2, #48]	@ 0x30

	//Set PA2 to select alternate function to use the USART MODER2 for PA2
	GPIOA->MODER |=(1U<<5);
 8000514:	4b33      	ldr	r3, [pc, #204]	@ (80005e4 <uart2_rxtx_init+0xe0>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a32      	ldr	r2, [pc, #200]	@ (80005e4 <uart2_rxtx_init+0xe0>)
 800051a:	f043 0320 	orr.w	r3, r3, #32
 800051e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<4);
 8000520:	4b30      	ldr	r3, [pc, #192]	@ (80005e4 <uart2_rxtx_init+0xe0>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a2f      	ldr	r2, [pc, #188]	@ (80005e4 <uart2_rxtx_init+0xe0>)
 8000526:	f023 0310 	bic.w	r3, r3, #16
 800052a:	6013      	str	r3, [r2, #0]

	//Set PA2 alternate function type to UART_tx AF7 AFR[0] bits 0-7 AFR[1] bits 8-15
	GPIOA->AFR[0] &=~(1U<<11);
 800052c:	4b2d      	ldr	r3, [pc, #180]	@ (80005e4 <uart2_rxtx_init+0xe0>)
 800052e:	6a1b      	ldr	r3, [r3, #32]
 8000530:	4a2c      	ldr	r2, [pc, #176]	@ (80005e4 <uart2_rxtx_init+0xe0>)
 8000532:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000536:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 8000538:	4b2a      	ldr	r3, [pc, #168]	@ (80005e4 <uart2_rxtx_init+0xe0>)
 800053a:	6a1b      	ldr	r3, [r3, #32]
 800053c:	4a29      	ldr	r2, [pc, #164]	@ (80005e4 <uart2_rxtx_init+0xe0>)
 800053e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000542:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 8000544:	4b27      	ldr	r3, [pc, #156]	@ (80005e4 <uart2_rxtx_init+0xe0>)
 8000546:	6a1b      	ldr	r3, [r3, #32]
 8000548:	4a26      	ldr	r2, [pc, #152]	@ (80005e4 <uart2_rxtx_init+0xe0>)
 800054a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800054e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<8);
 8000550:	4b24      	ldr	r3, [pc, #144]	@ (80005e4 <uart2_rxtx_init+0xe0>)
 8000552:	6a1b      	ldr	r3, [r3, #32]
 8000554:	4a23      	ldr	r2, [pc, #140]	@ (80005e4 <uart2_rxtx_init+0xe0>)
 8000556:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800055a:	6213      	str	r3, [r2, #32]

	/****************************************************/
	//Set PA3 mode to alternate function
	//Set PA3 alternate function type to UART_RX (AF07)
	GPIOA->MODER |=(1U<<7);
 800055c:	4b21      	ldr	r3, [pc, #132]	@ (80005e4 <uart2_rxtx_init+0xe0>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a20      	ldr	r2, [pc, #128]	@ (80005e4 <uart2_rxtx_init+0xe0>)
 8000562:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000566:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<6);
 8000568:	4b1e      	ldr	r3, [pc, #120]	@ (80005e4 <uart2_rxtx_init+0xe0>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a1d      	ldr	r2, [pc, #116]	@ (80005e4 <uart2_rxtx_init+0xe0>)
 800056e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000572:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] &=~(1U<<15);
 8000574:	4b1b      	ldr	r3, [pc, #108]	@ (80005e4 <uart2_rxtx_init+0xe0>)
 8000576:	6a1b      	ldr	r3, [r3, #32]
 8000578:	4a1a      	ldr	r2, [pc, #104]	@ (80005e4 <uart2_rxtx_init+0xe0>)
 800057a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800057e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<14);
 8000580:	4b18      	ldr	r3, [pc, #96]	@ (80005e4 <uart2_rxtx_init+0xe0>)
 8000582:	6a1b      	ldr	r3, [r3, #32]
 8000584:	4a17      	ldr	r2, [pc, #92]	@ (80005e4 <uart2_rxtx_init+0xe0>)
 8000586:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800058a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<13);
 800058c:	4b15      	ldr	r3, [pc, #84]	@ (80005e4 <uart2_rxtx_init+0xe0>)
 800058e:	6a1b      	ldr	r3, [r3, #32]
 8000590:	4a14      	ldr	r2, [pc, #80]	@ (80005e4 <uart2_rxtx_init+0xe0>)
 8000592:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000596:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<12);
 8000598:	4b12      	ldr	r3, [pc, #72]	@ (80005e4 <uart2_rxtx_init+0xe0>)
 800059a:	6a1b      	ldr	r3, [r3, #32]
 800059c:	4a11      	ldr	r2, [pc, #68]	@ (80005e4 <uart2_rxtx_init+0xe0>)
 800059e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80005a2:	6213      	str	r3, [r2, #32]



	//Configure UART module
	//Enable clock access to UART2
	RCC->APB1ENR |=UART2EN;
 80005a4:	4b0e      	ldr	r3, [pc, #56]	@ (80005e0 <uart2_rxtx_init+0xdc>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a8:	4a0d      	ldr	r2, [pc, #52]	@ (80005e0 <uart2_rxtx_init+0xdc>)
 80005aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005ae:	6413      	str	r3, [r2, #64]	@ 0x40

	//Configure baudrate
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 80005b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005b4:	490c      	ldr	r1, [pc, #48]	@ (80005e8 <uart2_rxtx_init+0xe4>)
 80005b6:	480d      	ldr	r0, [pc, #52]	@ (80005ec <uart2_rxtx_init+0xe8>)
 80005b8:	f000 f846 	bl	8000648 <uart_set_baudrate>

	//Configure the transfer direction
	USART2->CR1 = CR1_TE;  //Enable TE bit and everything else 0 to configure the port as standard configuration
 80005bc:	4b0b      	ldr	r3, [pc, #44]	@ (80005ec <uart2_rxtx_init+0xe8>)
 80005be:	2208      	movs	r2, #8
 80005c0:	60da      	str	r2, [r3, #12]

	/*************************************/
	//Enable the RX
	USART2->CR1 |= CR1_RE; //Enable RE bit by oring it with the previous line to have both set to 1
 80005c2:	4b0a      	ldr	r3, [pc, #40]	@ (80005ec <uart2_rxtx_init+0xe8>)
 80005c4:	68db      	ldr	r3, [r3, #12]
 80005c6:	4a09      	ldr	r2, [pc, #36]	@ (80005ec <uart2_rxtx_init+0xe8>)
 80005c8:	f043 0304 	orr.w	r3, r3, #4
 80005cc:	60d3      	str	r3, [r2, #12]
							//Enable the UART module canbe done as "USART2->CR1 = (CR1_TE | CR1_RE)"
	/*************************************/

	USART2->CR1 |= CR1_UE;  // use or to set only one bit and enable the UART
 80005ce:	4b07      	ldr	r3, [pc, #28]	@ (80005ec <uart2_rxtx_init+0xe8>)
 80005d0:	68db      	ldr	r3, [r3, #12]
 80005d2:	4a06      	ldr	r2, [pc, #24]	@ (80005ec <uart2_rxtx_init+0xe8>)
 80005d4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80005d8:	60d3      	str	r3, [r2, #12]
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40023800 	.word	0x40023800
 80005e4:	40020000 	.word	0x40020000
 80005e8:	00f42400 	.word	0x00f42400
 80005ec:	40004400 	.word	0x40004400

080005f0 <uart2_read>:


/**********************************************************/
char uart2_read(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
	//make sure the receive data register is not empty i.e. something to read
	while(!(USART2->SR & SR_RNXE)){}
 80005f4:	bf00      	nop
 80005f6:	4b07      	ldr	r3, [pc, #28]	@ (8000614 <uart2_read+0x24>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	f003 0320 	and.w	r3, r3, #32
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d0f9      	beq.n	80005f6 <uart2_read+0x6>
	//read data
	return USART2->DR;
 8000602:	4b04      	ldr	r3, [pc, #16]	@ (8000614 <uart2_read+0x24>)
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	b2db      	uxtb	r3, r3
}
 8000608:	4618      	mov	r0, r3
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	40004400 	.word	0x40004400

08000618 <uart2_write>:
	//Enable the UART module
	USART2->CR1 |=CR1_UE;  // use or to set only one bit and enable the UART
}

void uart2_write(int ch)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	//Make sure the transmit data register is empty by checking the USART status register TXE bit
	while (!(USART2->SR & SR_TXE)){}
 8000620:	bf00      	nop
 8000622:	4b08      	ldr	r3, [pc, #32]	@ (8000644 <uart2_write+0x2c>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800062a:	2b00      	cmp	r3, #0
 800062c:	d0f9      	beq.n	8000622 <uart2_write+0xa>

	//Write to the transmit data register
	USART2->DR = (ch & 0xFF);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4a04      	ldr	r2, [pc, #16]	@ (8000644 <uart2_write+0x2c>)
 8000632:	b2db      	uxtb	r3, r3
 8000634:	6053      	str	r3, [r2, #4]
}
 8000636:	bf00      	nop
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	40004400 	.word	0x40004400

08000648 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
//This function takes the USART you want to use, the peripheral clock in this case APB1_CLK
//which is the system frequency and the required baudrate and writes into the USART_BRR the calculated
//baudrate from the compute_uart_bd function
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd (PeriphClk,BaudRate);
 8000654:	6879      	ldr	r1, [r7, #4]
 8000656:	68b8      	ldr	r0, [r7, #8]
 8000658:	f000 f808 	bl	800066c <compute_uart_bd>
 800065c:	4603      	mov	r3, r0
 800065e:	461a      	mov	r2, r3
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	609a      	str	r2, [r3, #8]
}
 8000664:	bf00      	nop
 8000666:	3710      	adds	r7, #16
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <compute_uart_bd>:


static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + BaudRate/2U)/BaudRate); // In this case Periph clock is given to the
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	085a      	lsrs	r2, r3, #1
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	441a      	add	r2, r3
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	fbb2 f3f3 	udiv	r3, r2, r3
 8000684:	b29b      	uxth	r3, r3
													//function uart_set_baudrate == APB1_CLK == sys_freq 16000000
													//((16000000+115200/2)/115200) = 69.944
}
 8000686:	4618      	mov	r0, r3
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
	...

08000694 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000694:	480d      	ldr	r0, [pc, #52]	@ (80006cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000696:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000698:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800069c:	480c      	ldr	r0, [pc, #48]	@ (80006d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800069e:	490d      	ldr	r1, [pc, #52]	@ (80006d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006a0:	4a0d      	ldr	r2, [pc, #52]	@ (80006d8 <LoopForever+0xe>)
  movs r3, #0
 80006a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006a4:	e002      	b.n	80006ac <LoopCopyDataInit>

080006a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006aa:	3304      	adds	r3, #4

080006ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006b0:	d3f9      	bcc.n	80006a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006b2:	4a0a      	ldr	r2, [pc, #40]	@ (80006dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80006b4:	4c0a      	ldr	r4, [pc, #40]	@ (80006e0 <LoopForever+0x16>)
  movs r3, #0
 80006b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006b8:	e001      	b.n	80006be <LoopFillZerobss>

080006ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006bc:	3204      	adds	r2, #4

080006be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006c0:	d3fb      	bcc.n	80006ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006c2:	f000 f97d 	bl	80009c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006c6:	f7ff fdd3 	bl	8000270 <main>

080006ca <LoopForever>:

LoopForever:
  b LoopForever
 80006ca:	e7fe      	b.n	80006ca <LoopForever>
  ldr   r0, =_estack
 80006cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006d4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80006d8:	08001634 	.word	0x08001634
  ldr r2, =_sbss
 80006dc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80006e0:	200001cc 	.word	0x200001cc

080006e4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006e4:	e7fe      	b.n	80006e4 <ADC_IRQHandler>
	...

080006e8 <std>:
 80006e8:	2300      	movs	r3, #0
 80006ea:	b510      	push	{r4, lr}
 80006ec:	4604      	mov	r4, r0
 80006ee:	e9c0 3300 	strd	r3, r3, [r0]
 80006f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80006f6:	6083      	str	r3, [r0, #8]
 80006f8:	8181      	strh	r1, [r0, #12]
 80006fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80006fc:	81c2      	strh	r2, [r0, #14]
 80006fe:	6183      	str	r3, [r0, #24]
 8000700:	4619      	mov	r1, r3
 8000702:	2208      	movs	r2, #8
 8000704:	305c      	adds	r0, #92	@ 0x5c
 8000706:	f000 f906 	bl	8000916 <memset>
 800070a:	4b0d      	ldr	r3, [pc, #52]	@ (8000740 <std+0x58>)
 800070c:	6263      	str	r3, [r4, #36]	@ 0x24
 800070e:	4b0d      	ldr	r3, [pc, #52]	@ (8000744 <std+0x5c>)
 8000710:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000712:	4b0d      	ldr	r3, [pc, #52]	@ (8000748 <std+0x60>)
 8000714:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000716:	4b0d      	ldr	r3, [pc, #52]	@ (800074c <std+0x64>)
 8000718:	6323      	str	r3, [r4, #48]	@ 0x30
 800071a:	4b0d      	ldr	r3, [pc, #52]	@ (8000750 <std+0x68>)
 800071c:	6224      	str	r4, [r4, #32]
 800071e:	429c      	cmp	r4, r3
 8000720:	d006      	beq.n	8000730 <std+0x48>
 8000722:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000726:	4294      	cmp	r4, r2
 8000728:	d002      	beq.n	8000730 <std+0x48>
 800072a:	33d0      	adds	r3, #208	@ 0xd0
 800072c:	429c      	cmp	r4, r3
 800072e:	d105      	bne.n	800073c <std+0x54>
 8000730:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000738:	f000 b966 	b.w	8000a08 <__retarget_lock_init_recursive>
 800073c:	bd10      	pop	{r4, pc}
 800073e:	bf00      	nop
 8000740:	08000891 	.word	0x08000891
 8000744:	080008b3 	.word	0x080008b3
 8000748:	080008eb 	.word	0x080008eb
 800074c:	0800090f 	.word	0x0800090f
 8000750:	20000080 	.word	0x20000080

08000754 <stdio_exit_handler>:
 8000754:	4a02      	ldr	r2, [pc, #8]	@ (8000760 <stdio_exit_handler+0xc>)
 8000756:	4903      	ldr	r1, [pc, #12]	@ (8000764 <stdio_exit_handler+0x10>)
 8000758:	4803      	ldr	r0, [pc, #12]	@ (8000768 <stdio_exit_handler+0x14>)
 800075a:	f000 b869 	b.w	8000830 <_fwalk_sglue>
 800075e:	bf00      	nop
 8000760:	20000000 	.word	0x20000000
 8000764:	080012a9 	.word	0x080012a9
 8000768:	20000010 	.word	0x20000010

0800076c <cleanup_stdio>:
 800076c:	6841      	ldr	r1, [r0, #4]
 800076e:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <cleanup_stdio+0x34>)
 8000770:	4299      	cmp	r1, r3
 8000772:	b510      	push	{r4, lr}
 8000774:	4604      	mov	r4, r0
 8000776:	d001      	beq.n	800077c <cleanup_stdio+0x10>
 8000778:	f000 fd96 	bl	80012a8 <_fflush_r>
 800077c:	68a1      	ldr	r1, [r4, #8]
 800077e:	4b09      	ldr	r3, [pc, #36]	@ (80007a4 <cleanup_stdio+0x38>)
 8000780:	4299      	cmp	r1, r3
 8000782:	d002      	beq.n	800078a <cleanup_stdio+0x1e>
 8000784:	4620      	mov	r0, r4
 8000786:	f000 fd8f 	bl	80012a8 <_fflush_r>
 800078a:	68e1      	ldr	r1, [r4, #12]
 800078c:	4b06      	ldr	r3, [pc, #24]	@ (80007a8 <cleanup_stdio+0x3c>)
 800078e:	4299      	cmp	r1, r3
 8000790:	d004      	beq.n	800079c <cleanup_stdio+0x30>
 8000792:	4620      	mov	r0, r4
 8000794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000798:	f000 bd86 	b.w	80012a8 <_fflush_r>
 800079c:	bd10      	pop	{r4, pc}
 800079e:	bf00      	nop
 80007a0:	20000080 	.word	0x20000080
 80007a4:	200000e8 	.word	0x200000e8
 80007a8:	20000150 	.word	0x20000150

080007ac <global_stdio_init.part.0>:
 80007ac:	b510      	push	{r4, lr}
 80007ae:	4b0b      	ldr	r3, [pc, #44]	@ (80007dc <global_stdio_init.part.0+0x30>)
 80007b0:	4c0b      	ldr	r4, [pc, #44]	@ (80007e0 <global_stdio_init.part.0+0x34>)
 80007b2:	4a0c      	ldr	r2, [pc, #48]	@ (80007e4 <global_stdio_init.part.0+0x38>)
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	4620      	mov	r0, r4
 80007b8:	2200      	movs	r2, #0
 80007ba:	2104      	movs	r1, #4
 80007bc:	f7ff ff94 	bl	80006e8 <std>
 80007c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80007c4:	2201      	movs	r2, #1
 80007c6:	2109      	movs	r1, #9
 80007c8:	f7ff ff8e 	bl	80006e8 <std>
 80007cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80007d0:	2202      	movs	r2, #2
 80007d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007d6:	2112      	movs	r1, #18
 80007d8:	f7ff bf86 	b.w	80006e8 <std>
 80007dc:	200001b8 	.word	0x200001b8
 80007e0:	20000080 	.word	0x20000080
 80007e4:	08000755 	.word	0x08000755

080007e8 <__sfp_lock_acquire>:
 80007e8:	4801      	ldr	r0, [pc, #4]	@ (80007f0 <__sfp_lock_acquire+0x8>)
 80007ea:	f000 b90e 	b.w	8000a0a <__retarget_lock_acquire_recursive>
 80007ee:	bf00      	nop
 80007f0:	200001c1 	.word	0x200001c1

080007f4 <__sfp_lock_release>:
 80007f4:	4801      	ldr	r0, [pc, #4]	@ (80007fc <__sfp_lock_release+0x8>)
 80007f6:	f000 b909 	b.w	8000a0c <__retarget_lock_release_recursive>
 80007fa:	bf00      	nop
 80007fc:	200001c1 	.word	0x200001c1

08000800 <__sinit>:
 8000800:	b510      	push	{r4, lr}
 8000802:	4604      	mov	r4, r0
 8000804:	f7ff fff0 	bl	80007e8 <__sfp_lock_acquire>
 8000808:	6a23      	ldr	r3, [r4, #32]
 800080a:	b11b      	cbz	r3, 8000814 <__sinit+0x14>
 800080c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000810:	f7ff bff0 	b.w	80007f4 <__sfp_lock_release>
 8000814:	4b04      	ldr	r3, [pc, #16]	@ (8000828 <__sinit+0x28>)
 8000816:	6223      	str	r3, [r4, #32]
 8000818:	4b04      	ldr	r3, [pc, #16]	@ (800082c <__sinit+0x2c>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d1f5      	bne.n	800080c <__sinit+0xc>
 8000820:	f7ff ffc4 	bl	80007ac <global_stdio_init.part.0>
 8000824:	e7f2      	b.n	800080c <__sinit+0xc>
 8000826:	bf00      	nop
 8000828:	0800076d 	.word	0x0800076d
 800082c:	200001b8 	.word	0x200001b8

08000830 <_fwalk_sglue>:
 8000830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000834:	4607      	mov	r7, r0
 8000836:	4688      	mov	r8, r1
 8000838:	4614      	mov	r4, r2
 800083a:	2600      	movs	r6, #0
 800083c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000840:	f1b9 0901 	subs.w	r9, r9, #1
 8000844:	d505      	bpl.n	8000852 <_fwalk_sglue+0x22>
 8000846:	6824      	ldr	r4, [r4, #0]
 8000848:	2c00      	cmp	r4, #0
 800084a:	d1f7      	bne.n	800083c <_fwalk_sglue+0xc>
 800084c:	4630      	mov	r0, r6
 800084e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000852:	89ab      	ldrh	r3, [r5, #12]
 8000854:	2b01      	cmp	r3, #1
 8000856:	d907      	bls.n	8000868 <_fwalk_sglue+0x38>
 8000858:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800085c:	3301      	adds	r3, #1
 800085e:	d003      	beq.n	8000868 <_fwalk_sglue+0x38>
 8000860:	4629      	mov	r1, r5
 8000862:	4638      	mov	r0, r7
 8000864:	47c0      	blx	r8
 8000866:	4306      	orrs	r6, r0
 8000868:	3568      	adds	r5, #104	@ 0x68
 800086a:	e7e9      	b.n	8000840 <_fwalk_sglue+0x10>

0800086c <iprintf>:
 800086c:	b40f      	push	{r0, r1, r2, r3}
 800086e:	b507      	push	{r0, r1, r2, lr}
 8000870:	4906      	ldr	r1, [pc, #24]	@ (800088c <iprintf+0x20>)
 8000872:	ab04      	add	r3, sp, #16
 8000874:	6808      	ldr	r0, [r1, #0]
 8000876:	f853 2b04 	ldr.w	r2, [r3], #4
 800087a:	6881      	ldr	r1, [r0, #8]
 800087c:	9301      	str	r3, [sp, #4]
 800087e:	f000 f9e9 	bl	8000c54 <_vfiprintf_r>
 8000882:	b003      	add	sp, #12
 8000884:	f85d eb04 	ldr.w	lr, [sp], #4
 8000888:	b004      	add	sp, #16
 800088a:	4770      	bx	lr
 800088c:	2000000c 	.word	0x2000000c

08000890 <__sread>:
 8000890:	b510      	push	{r4, lr}
 8000892:	460c      	mov	r4, r1
 8000894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000898:	f000 f868 	bl	800096c <_read_r>
 800089c:	2800      	cmp	r0, #0
 800089e:	bfab      	itete	ge
 80008a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80008a2:	89a3      	ldrhlt	r3, [r4, #12]
 80008a4:	181b      	addge	r3, r3, r0
 80008a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80008aa:	bfac      	ite	ge
 80008ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 80008ae:	81a3      	strhlt	r3, [r4, #12]
 80008b0:	bd10      	pop	{r4, pc}

080008b2 <__swrite>:
 80008b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008b6:	461f      	mov	r7, r3
 80008b8:	898b      	ldrh	r3, [r1, #12]
 80008ba:	05db      	lsls	r3, r3, #23
 80008bc:	4605      	mov	r5, r0
 80008be:	460c      	mov	r4, r1
 80008c0:	4616      	mov	r6, r2
 80008c2:	d505      	bpl.n	80008d0 <__swrite+0x1e>
 80008c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008c8:	2302      	movs	r3, #2
 80008ca:	2200      	movs	r2, #0
 80008cc:	f000 f83c 	bl	8000948 <_lseek_r>
 80008d0:	89a3      	ldrh	r3, [r4, #12]
 80008d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80008d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80008da:	81a3      	strh	r3, [r4, #12]
 80008dc:	4632      	mov	r2, r6
 80008de:	463b      	mov	r3, r7
 80008e0:	4628      	mov	r0, r5
 80008e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80008e6:	f000 b853 	b.w	8000990 <_write_r>

080008ea <__sseek>:
 80008ea:	b510      	push	{r4, lr}
 80008ec:	460c      	mov	r4, r1
 80008ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008f2:	f000 f829 	bl	8000948 <_lseek_r>
 80008f6:	1c43      	adds	r3, r0, #1
 80008f8:	89a3      	ldrh	r3, [r4, #12]
 80008fa:	bf15      	itete	ne
 80008fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80008fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000902:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000906:	81a3      	strheq	r3, [r4, #12]
 8000908:	bf18      	it	ne
 800090a:	81a3      	strhne	r3, [r4, #12]
 800090c:	bd10      	pop	{r4, pc}

0800090e <__sclose>:
 800090e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000912:	f000 b809 	b.w	8000928 <_close_r>

08000916 <memset>:
 8000916:	4402      	add	r2, r0
 8000918:	4603      	mov	r3, r0
 800091a:	4293      	cmp	r3, r2
 800091c:	d100      	bne.n	8000920 <memset+0xa>
 800091e:	4770      	bx	lr
 8000920:	f803 1b01 	strb.w	r1, [r3], #1
 8000924:	e7f9      	b.n	800091a <memset+0x4>
	...

08000928 <_close_r>:
 8000928:	b538      	push	{r3, r4, r5, lr}
 800092a:	4d06      	ldr	r5, [pc, #24]	@ (8000944 <_close_r+0x1c>)
 800092c:	2300      	movs	r3, #0
 800092e:	4604      	mov	r4, r0
 8000930:	4608      	mov	r0, r1
 8000932:	602b      	str	r3, [r5, #0]
 8000934:	f7ff fd6f 	bl	8000416 <_close>
 8000938:	1c43      	adds	r3, r0, #1
 800093a:	d102      	bne.n	8000942 <_close_r+0x1a>
 800093c:	682b      	ldr	r3, [r5, #0]
 800093e:	b103      	cbz	r3, 8000942 <_close_r+0x1a>
 8000940:	6023      	str	r3, [r4, #0]
 8000942:	bd38      	pop	{r3, r4, r5, pc}
 8000944:	200001bc 	.word	0x200001bc

08000948 <_lseek_r>:
 8000948:	b538      	push	{r3, r4, r5, lr}
 800094a:	4d07      	ldr	r5, [pc, #28]	@ (8000968 <_lseek_r+0x20>)
 800094c:	4604      	mov	r4, r0
 800094e:	4608      	mov	r0, r1
 8000950:	4611      	mov	r1, r2
 8000952:	2200      	movs	r2, #0
 8000954:	602a      	str	r2, [r5, #0]
 8000956:	461a      	mov	r2, r3
 8000958:	f7ff fd84 	bl	8000464 <_lseek>
 800095c:	1c43      	adds	r3, r0, #1
 800095e:	d102      	bne.n	8000966 <_lseek_r+0x1e>
 8000960:	682b      	ldr	r3, [r5, #0]
 8000962:	b103      	cbz	r3, 8000966 <_lseek_r+0x1e>
 8000964:	6023      	str	r3, [r4, #0]
 8000966:	bd38      	pop	{r3, r4, r5, pc}
 8000968:	200001bc 	.word	0x200001bc

0800096c <_read_r>:
 800096c:	b538      	push	{r3, r4, r5, lr}
 800096e:	4d07      	ldr	r5, [pc, #28]	@ (800098c <_read_r+0x20>)
 8000970:	4604      	mov	r4, r0
 8000972:	4608      	mov	r0, r1
 8000974:	4611      	mov	r1, r2
 8000976:	2200      	movs	r2, #0
 8000978:	602a      	str	r2, [r5, #0]
 800097a:	461a      	mov	r2, r3
 800097c:	f7ff fd12 	bl	80003a4 <_read>
 8000980:	1c43      	adds	r3, r0, #1
 8000982:	d102      	bne.n	800098a <_read_r+0x1e>
 8000984:	682b      	ldr	r3, [r5, #0]
 8000986:	b103      	cbz	r3, 800098a <_read_r+0x1e>
 8000988:	6023      	str	r3, [r4, #0]
 800098a:	bd38      	pop	{r3, r4, r5, pc}
 800098c:	200001bc 	.word	0x200001bc

08000990 <_write_r>:
 8000990:	b538      	push	{r3, r4, r5, lr}
 8000992:	4d07      	ldr	r5, [pc, #28]	@ (80009b0 <_write_r+0x20>)
 8000994:	4604      	mov	r4, r0
 8000996:	4608      	mov	r0, r1
 8000998:	4611      	mov	r1, r2
 800099a:	2200      	movs	r2, #0
 800099c:	602a      	str	r2, [r5, #0]
 800099e:	461a      	mov	r2, r3
 80009a0:	f7ff fd1d 	bl	80003de <_write>
 80009a4:	1c43      	adds	r3, r0, #1
 80009a6:	d102      	bne.n	80009ae <_write_r+0x1e>
 80009a8:	682b      	ldr	r3, [r5, #0]
 80009aa:	b103      	cbz	r3, 80009ae <_write_r+0x1e>
 80009ac:	6023      	str	r3, [r4, #0]
 80009ae:	bd38      	pop	{r3, r4, r5, pc}
 80009b0:	200001bc 	.word	0x200001bc

080009b4 <__errno>:
 80009b4:	4b01      	ldr	r3, [pc, #4]	@ (80009bc <__errno+0x8>)
 80009b6:	6818      	ldr	r0, [r3, #0]
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	2000000c 	.word	0x2000000c

080009c0 <__libc_init_array>:
 80009c0:	b570      	push	{r4, r5, r6, lr}
 80009c2:	4d0d      	ldr	r5, [pc, #52]	@ (80009f8 <__libc_init_array+0x38>)
 80009c4:	4c0d      	ldr	r4, [pc, #52]	@ (80009fc <__libc_init_array+0x3c>)
 80009c6:	1b64      	subs	r4, r4, r5
 80009c8:	10a4      	asrs	r4, r4, #2
 80009ca:	2600      	movs	r6, #0
 80009cc:	42a6      	cmp	r6, r4
 80009ce:	d109      	bne.n	80009e4 <__libc_init_array+0x24>
 80009d0:	4d0b      	ldr	r5, [pc, #44]	@ (8000a00 <__libc_init_array+0x40>)
 80009d2:	4c0c      	ldr	r4, [pc, #48]	@ (8000a04 <__libc_init_array+0x44>)
 80009d4:	f000 fdb8 	bl	8001548 <_init>
 80009d8:	1b64      	subs	r4, r4, r5
 80009da:	10a4      	asrs	r4, r4, #2
 80009dc:	2600      	movs	r6, #0
 80009de:	42a6      	cmp	r6, r4
 80009e0:	d105      	bne.n	80009ee <__libc_init_array+0x2e>
 80009e2:	bd70      	pop	{r4, r5, r6, pc}
 80009e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80009e8:	4798      	blx	r3
 80009ea:	3601      	adds	r6, #1
 80009ec:	e7ee      	b.n	80009cc <__libc_init_array+0xc>
 80009ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80009f2:	4798      	blx	r3
 80009f4:	3601      	adds	r6, #1
 80009f6:	e7f2      	b.n	80009de <__libc_init_array+0x1e>
 80009f8:	0800162c 	.word	0x0800162c
 80009fc:	0800162c 	.word	0x0800162c
 8000a00:	0800162c 	.word	0x0800162c
 8000a04:	08001630 	.word	0x08001630

08000a08 <__retarget_lock_init_recursive>:
 8000a08:	4770      	bx	lr

08000a0a <__retarget_lock_acquire_recursive>:
 8000a0a:	4770      	bx	lr

08000a0c <__retarget_lock_release_recursive>:
 8000a0c:	4770      	bx	lr
	...

08000a10 <_free_r>:
 8000a10:	b538      	push	{r3, r4, r5, lr}
 8000a12:	4605      	mov	r5, r0
 8000a14:	2900      	cmp	r1, #0
 8000a16:	d041      	beq.n	8000a9c <_free_r+0x8c>
 8000a18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000a1c:	1f0c      	subs	r4, r1, #4
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	bfb8      	it	lt
 8000a22:	18e4      	addlt	r4, r4, r3
 8000a24:	f000 f8e0 	bl	8000be8 <__malloc_lock>
 8000a28:	4a1d      	ldr	r2, [pc, #116]	@ (8000aa0 <_free_r+0x90>)
 8000a2a:	6813      	ldr	r3, [r2, #0]
 8000a2c:	b933      	cbnz	r3, 8000a3c <_free_r+0x2c>
 8000a2e:	6063      	str	r3, [r4, #4]
 8000a30:	6014      	str	r4, [r2, #0]
 8000a32:	4628      	mov	r0, r5
 8000a34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a38:	f000 b8dc 	b.w	8000bf4 <__malloc_unlock>
 8000a3c:	42a3      	cmp	r3, r4
 8000a3e:	d908      	bls.n	8000a52 <_free_r+0x42>
 8000a40:	6820      	ldr	r0, [r4, #0]
 8000a42:	1821      	adds	r1, r4, r0
 8000a44:	428b      	cmp	r3, r1
 8000a46:	bf01      	itttt	eq
 8000a48:	6819      	ldreq	r1, [r3, #0]
 8000a4a:	685b      	ldreq	r3, [r3, #4]
 8000a4c:	1809      	addeq	r1, r1, r0
 8000a4e:	6021      	streq	r1, [r4, #0]
 8000a50:	e7ed      	b.n	8000a2e <_free_r+0x1e>
 8000a52:	461a      	mov	r2, r3
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	b10b      	cbz	r3, 8000a5c <_free_r+0x4c>
 8000a58:	42a3      	cmp	r3, r4
 8000a5a:	d9fa      	bls.n	8000a52 <_free_r+0x42>
 8000a5c:	6811      	ldr	r1, [r2, #0]
 8000a5e:	1850      	adds	r0, r2, r1
 8000a60:	42a0      	cmp	r0, r4
 8000a62:	d10b      	bne.n	8000a7c <_free_r+0x6c>
 8000a64:	6820      	ldr	r0, [r4, #0]
 8000a66:	4401      	add	r1, r0
 8000a68:	1850      	adds	r0, r2, r1
 8000a6a:	4283      	cmp	r3, r0
 8000a6c:	6011      	str	r1, [r2, #0]
 8000a6e:	d1e0      	bne.n	8000a32 <_free_r+0x22>
 8000a70:	6818      	ldr	r0, [r3, #0]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	6053      	str	r3, [r2, #4]
 8000a76:	4408      	add	r0, r1
 8000a78:	6010      	str	r0, [r2, #0]
 8000a7a:	e7da      	b.n	8000a32 <_free_r+0x22>
 8000a7c:	d902      	bls.n	8000a84 <_free_r+0x74>
 8000a7e:	230c      	movs	r3, #12
 8000a80:	602b      	str	r3, [r5, #0]
 8000a82:	e7d6      	b.n	8000a32 <_free_r+0x22>
 8000a84:	6820      	ldr	r0, [r4, #0]
 8000a86:	1821      	adds	r1, r4, r0
 8000a88:	428b      	cmp	r3, r1
 8000a8a:	bf04      	itt	eq
 8000a8c:	6819      	ldreq	r1, [r3, #0]
 8000a8e:	685b      	ldreq	r3, [r3, #4]
 8000a90:	6063      	str	r3, [r4, #4]
 8000a92:	bf04      	itt	eq
 8000a94:	1809      	addeq	r1, r1, r0
 8000a96:	6021      	streq	r1, [r4, #0]
 8000a98:	6054      	str	r4, [r2, #4]
 8000a9a:	e7ca      	b.n	8000a32 <_free_r+0x22>
 8000a9c:	bd38      	pop	{r3, r4, r5, pc}
 8000a9e:	bf00      	nop
 8000aa0:	200001c8 	.word	0x200001c8

08000aa4 <sbrk_aligned>:
 8000aa4:	b570      	push	{r4, r5, r6, lr}
 8000aa6:	4e0f      	ldr	r6, [pc, #60]	@ (8000ae4 <sbrk_aligned+0x40>)
 8000aa8:	460c      	mov	r4, r1
 8000aaa:	6831      	ldr	r1, [r6, #0]
 8000aac:	4605      	mov	r5, r0
 8000aae:	b911      	cbnz	r1, 8000ab6 <sbrk_aligned+0x12>
 8000ab0:	f000 fcb6 	bl	8001420 <_sbrk_r>
 8000ab4:	6030      	str	r0, [r6, #0]
 8000ab6:	4621      	mov	r1, r4
 8000ab8:	4628      	mov	r0, r5
 8000aba:	f000 fcb1 	bl	8001420 <_sbrk_r>
 8000abe:	1c43      	adds	r3, r0, #1
 8000ac0:	d103      	bne.n	8000aca <sbrk_aligned+0x26>
 8000ac2:	f04f 34ff 	mov.w	r4, #4294967295
 8000ac6:	4620      	mov	r0, r4
 8000ac8:	bd70      	pop	{r4, r5, r6, pc}
 8000aca:	1cc4      	adds	r4, r0, #3
 8000acc:	f024 0403 	bic.w	r4, r4, #3
 8000ad0:	42a0      	cmp	r0, r4
 8000ad2:	d0f8      	beq.n	8000ac6 <sbrk_aligned+0x22>
 8000ad4:	1a21      	subs	r1, r4, r0
 8000ad6:	4628      	mov	r0, r5
 8000ad8:	f000 fca2 	bl	8001420 <_sbrk_r>
 8000adc:	3001      	adds	r0, #1
 8000ade:	d1f2      	bne.n	8000ac6 <sbrk_aligned+0x22>
 8000ae0:	e7ef      	b.n	8000ac2 <sbrk_aligned+0x1e>
 8000ae2:	bf00      	nop
 8000ae4:	200001c4 	.word	0x200001c4

08000ae8 <_malloc_r>:
 8000ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000aec:	1ccd      	adds	r5, r1, #3
 8000aee:	f025 0503 	bic.w	r5, r5, #3
 8000af2:	3508      	adds	r5, #8
 8000af4:	2d0c      	cmp	r5, #12
 8000af6:	bf38      	it	cc
 8000af8:	250c      	movcc	r5, #12
 8000afa:	2d00      	cmp	r5, #0
 8000afc:	4606      	mov	r6, r0
 8000afe:	db01      	blt.n	8000b04 <_malloc_r+0x1c>
 8000b00:	42a9      	cmp	r1, r5
 8000b02:	d904      	bls.n	8000b0e <_malloc_r+0x26>
 8000b04:	230c      	movs	r3, #12
 8000b06:	6033      	str	r3, [r6, #0]
 8000b08:	2000      	movs	r0, #0
 8000b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000be4 <_malloc_r+0xfc>
 8000b12:	f000 f869 	bl	8000be8 <__malloc_lock>
 8000b16:	f8d8 3000 	ldr.w	r3, [r8]
 8000b1a:	461c      	mov	r4, r3
 8000b1c:	bb44      	cbnz	r4, 8000b70 <_malloc_r+0x88>
 8000b1e:	4629      	mov	r1, r5
 8000b20:	4630      	mov	r0, r6
 8000b22:	f7ff ffbf 	bl	8000aa4 <sbrk_aligned>
 8000b26:	1c43      	adds	r3, r0, #1
 8000b28:	4604      	mov	r4, r0
 8000b2a:	d158      	bne.n	8000bde <_malloc_r+0xf6>
 8000b2c:	f8d8 4000 	ldr.w	r4, [r8]
 8000b30:	4627      	mov	r7, r4
 8000b32:	2f00      	cmp	r7, #0
 8000b34:	d143      	bne.n	8000bbe <_malloc_r+0xd6>
 8000b36:	2c00      	cmp	r4, #0
 8000b38:	d04b      	beq.n	8000bd2 <_malloc_r+0xea>
 8000b3a:	6823      	ldr	r3, [r4, #0]
 8000b3c:	4639      	mov	r1, r7
 8000b3e:	4630      	mov	r0, r6
 8000b40:	eb04 0903 	add.w	r9, r4, r3
 8000b44:	f000 fc6c 	bl	8001420 <_sbrk_r>
 8000b48:	4581      	cmp	r9, r0
 8000b4a:	d142      	bne.n	8000bd2 <_malloc_r+0xea>
 8000b4c:	6821      	ldr	r1, [r4, #0]
 8000b4e:	1a6d      	subs	r5, r5, r1
 8000b50:	4629      	mov	r1, r5
 8000b52:	4630      	mov	r0, r6
 8000b54:	f7ff ffa6 	bl	8000aa4 <sbrk_aligned>
 8000b58:	3001      	adds	r0, #1
 8000b5a:	d03a      	beq.n	8000bd2 <_malloc_r+0xea>
 8000b5c:	6823      	ldr	r3, [r4, #0]
 8000b5e:	442b      	add	r3, r5
 8000b60:	6023      	str	r3, [r4, #0]
 8000b62:	f8d8 3000 	ldr.w	r3, [r8]
 8000b66:	685a      	ldr	r2, [r3, #4]
 8000b68:	bb62      	cbnz	r2, 8000bc4 <_malloc_r+0xdc>
 8000b6a:	f8c8 7000 	str.w	r7, [r8]
 8000b6e:	e00f      	b.n	8000b90 <_malloc_r+0xa8>
 8000b70:	6822      	ldr	r2, [r4, #0]
 8000b72:	1b52      	subs	r2, r2, r5
 8000b74:	d420      	bmi.n	8000bb8 <_malloc_r+0xd0>
 8000b76:	2a0b      	cmp	r2, #11
 8000b78:	d917      	bls.n	8000baa <_malloc_r+0xc2>
 8000b7a:	1961      	adds	r1, r4, r5
 8000b7c:	42a3      	cmp	r3, r4
 8000b7e:	6025      	str	r5, [r4, #0]
 8000b80:	bf18      	it	ne
 8000b82:	6059      	strne	r1, [r3, #4]
 8000b84:	6863      	ldr	r3, [r4, #4]
 8000b86:	bf08      	it	eq
 8000b88:	f8c8 1000 	streq.w	r1, [r8]
 8000b8c:	5162      	str	r2, [r4, r5]
 8000b8e:	604b      	str	r3, [r1, #4]
 8000b90:	4630      	mov	r0, r6
 8000b92:	f000 f82f 	bl	8000bf4 <__malloc_unlock>
 8000b96:	f104 000b 	add.w	r0, r4, #11
 8000b9a:	1d23      	adds	r3, r4, #4
 8000b9c:	f020 0007 	bic.w	r0, r0, #7
 8000ba0:	1ac2      	subs	r2, r0, r3
 8000ba2:	bf1c      	itt	ne
 8000ba4:	1a1b      	subne	r3, r3, r0
 8000ba6:	50a3      	strne	r3, [r4, r2]
 8000ba8:	e7af      	b.n	8000b0a <_malloc_r+0x22>
 8000baa:	6862      	ldr	r2, [r4, #4]
 8000bac:	42a3      	cmp	r3, r4
 8000bae:	bf0c      	ite	eq
 8000bb0:	f8c8 2000 	streq.w	r2, [r8]
 8000bb4:	605a      	strne	r2, [r3, #4]
 8000bb6:	e7eb      	b.n	8000b90 <_malloc_r+0xa8>
 8000bb8:	4623      	mov	r3, r4
 8000bba:	6864      	ldr	r4, [r4, #4]
 8000bbc:	e7ae      	b.n	8000b1c <_malloc_r+0x34>
 8000bbe:	463c      	mov	r4, r7
 8000bc0:	687f      	ldr	r7, [r7, #4]
 8000bc2:	e7b6      	b.n	8000b32 <_malloc_r+0x4a>
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	42a3      	cmp	r3, r4
 8000bca:	d1fb      	bne.n	8000bc4 <_malloc_r+0xdc>
 8000bcc:	2300      	movs	r3, #0
 8000bce:	6053      	str	r3, [r2, #4]
 8000bd0:	e7de      	b.n	8000b90 <_malloc_r+0xa8>
 8000bd2:	230c      	movs	r3, #12
 8000bd4:	6033      	str	r3, [r6, #0]
 8000bd6:	4630      	mov	r0, r6
 8000bd8:	f000 f80c 	bl	8000bf4 <__malloc_unlock>
 8000bdc:	e794      	b.n	8000b08 <_malloc_r+0x20>
 8000bde:	6005      	str	r5, [r0, #0]
 8000be0:	e7d6      	b.n	8000b90 <_malloc_r+0xa8>
 8000be2:	bf00      	nop
 8000be4:	200001c8 	.word	0x200001c8

08000be8 <__malloc_lock>:
 8000be8:	4801      	ldr	r0, [pc, #4]	@ (8000bf0 <__malloc_lock+0x8>)
 8000bea:	f7ff bf0e 	b.w	8000a0a <__retarget_lock_acquire_recursive>
 8000bee:	bf00      	nop
 8000bf0:	200001c0 	.word	0x200001c0

08000bf4 <__malloc_unlock>:
 8000bf4:	4801      	ldr	r0, [pc, #4]	@ (8000bfc <__malloc_unlock+0x8>)
 8000bf6:	f7ff bf09 	b.w	8000a0c <__retarget_lock_release_recursive>
 8000bfa:	bf00      	nop
 8000bfc:	200001c0 	.word	0x200001c0

08000c00 <__sfputc_r>:
 8000c00:	6893      	ldr	r3, [r2, #8]
 8000c02:	3b01      	subs	r3, #1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	b410      	push	{r4}
 8000c08:	6093      	str	r3, [r2, #8]
 8000c0a:	da08      	bge.n	8000c1e <__sfputc_r+0x1e>
 8000c0c:	6994      	ldr	r4, [r2, #24]
 8000c0e:	42a3      	cmp	r3, r4
 8000c10:	db01      	blt.n	8000c16 <__sfputc_r+0x16>
 8000c12:	290a      	cmp	r1, #10
 8000c14:	d103      	bne.n	8000c1e <__sfputc_r+0x1e>
 8000c16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c1a:	f000 bb6d 	b.w	80012f8 <__swbuf_r>
 8000c1e:	6813      	ldr	r3, [r2, #0]
 8000c20:	1c58      	adds	r0, r3, #1
 8000c22:	6010      	str	r0, [r2, #0]
 8000c24:	7019      	strb	r1, [r3, #0]
 8000c26:	4608      	mov	r0, r1
 8000c28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <__sfputs_r>:
 8000c2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c30:	4606      	mov	r6, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	4614      	mov	r4, r2
 8000c36:	18d5      	adds	r5, r2, r3
 8000c38:	42ac      	cmp	r4, r5
 8000c3a:	d101      	bne.n	8000c40 <__sfputs_r+0x12>
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	e007      	b.n	8000c50 <__sfputs_r+0x22>
 8000c40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c44:	463a      	mov	r2, r7
 8000c46:	4630      	mov	r0, r6
 8000c48:	f7ff ffda 	bl	8000c00 <__sfputc_r>
 8000c4c:	1c43      	adds	r3, r0, #1
 8000c4e:	d1f3      	bne.n	8000c38 <__sfputs_r+0xa>
 8000c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000c54 <_vfiprintf_r>:
 8000c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c58:	460d      	mov	r5, r1
 8000c5a:	b09d      	sub	sp, #116	@ 0x74
 8000c5c:	4614      	mov	r4, r2
 8000c5e:	4698      	mov	r8, r3
 8000c60:	4606      	mov	r6, r0
 8000c62:	b118      	cbz	r0, 8000c6c <_vfiprintf_r+0x18>
 8000c64:	6a03      	ldr	r3, [r0, #32]
 8000c66:	b90b      	cbnz	r3, 8000c6c <_vfiprintf_r+0x18>
 8000c68:	f7ff fdca 	bl	8000800 <__sinit>
 8000c6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000c6e:	07d9      	lsls	r1, r3, #31
 8000c70:	d405      	bmi.n	8000c7e <_vfiprintf_r+0x2a>
 8000c72:	89ab      	ldrh	r3, [r5, #12]
 8000c74:	059a      	lsls	r2, r3, #22
 8000c76:	d402      	bmi.n	8000c7e <_vfiprintf_r+0x2a>
 8000c78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000c7a:	f7ff fec6 	bl	8000a0a <__retarget_lock_acquire_recursive>
 8000c7e:	89ab      	ldrh	r3, [r5, #12]
 8000c80:	071b      	lsls	r3, r3, #28
 8000c82:	d501      	bpl.n	8000c88 <_vfiprintf_r+0x34>
 8000c84:	692b      	ldr	r3, [r5, #16]
 8000c86:	b99b      	cbnz	r3, 8000cb0 <_vfiprintf_r+0x5c>
 8000c88:	4629      	mov	r1, r5
 8000c8a:	4630      	mov	r0, r6
 8000c8c:	f000 fb72 	bl	8001374 <__swsetup_r>
 8000c90:	b170      	cbz	r0, 8000cb0 <_vfiprintf_r+0x5c>
 8000c92:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000c94:	07dc      	lsls	r4, r3, #31
 8000c96:	d504      	bpl.n	8000ca2 <_vfiprintf_r+0x4e>
 8000c98:	f04f 30ff 	mov.w	r0, #4294967295
 8000c9c:	b01d      	add	sp, #116	@ 0x74
 8000c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ca2:	89ab      	ldrh	r3, [r5, #12]
 8000ca4:	0598      	lsls	r0, r3, #22
 8000ca6:	d4f7      	bmi.n	8000c98 <_vfiprintf_r+0x44>
 8000ca8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000caa:	f7ff feaf 	bl	8000a0c <__retarget_lock_release_recursive>
 8000cae:	e7f3      	b.n	8000c98 <_vfiprintf_r+0x44>
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8000cb4:	2320      	movs	r3, #32
 8000cb6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000cba:	f8cd 800c 	str.w	r8, [sp, #12]
 8000cbe:	2330      	movs	r3, #48	@ 0x30
 8000cc0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000e70 <_vfiprintf_r+0x21c>
 8000cc4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000cc8:	f04f 0901 	mov.w	r9, #1
 8000ccc:	4623      	mov	r3, r4
 8000cce:	469a      	mov	sl, r3
 8000cd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000cd4:	b10a      	cbz	r2, 8000cda <_vfiprintf_r+0x86>
 8000cd6:	2a25      	cmp	r2, #37	@ 0x25
 8000cd8:	d1f9      	bne.n	8000cce <_vfiprintf_r+0x7a>
 8000cda:	ebba 0b04 	subs.w	fp, sl, r4
 8000cde:	d00b      	beq.n	8000cf8 <_vfiprintf_r+0xa4>
 8000ce0:	465b      	mov	r3, fp
 8000ce2:	4622      	mov	r2, r4
 8000ce4:	4629      	mov	r1, r5
 8000ce6:	4630      	mov	r0, r6
 8000ce8:	f7ff ffa1 	bl	8000c2e <__sfputs_r>
 8000cec:	3001      	adds	r0, #1
 8000cee:	f000 80a7 	beq.w	8000e40 <_vfiprintf_r+0x1ec>
 8000cf2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000cf4:	445a      	add	r2, fp
 8000cf6:	9209      	str	r2, [sp, #36]	@ 0x24
 8000cf8:	f89a 3000 	ldrb.w	r3, [sl]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	f000 809f 	beq.w	8000e40 <_vfiprintf_r+0x1ec>
 8000d02:	2300      	movs	r3, #0
 8000d04:	f04f 32ff 	mov.w	r2, #4294967295
 8000d08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000d0c:	f10a 0a01 	add.w	sl, sl, #1
 8000d10:	9304      	str	r3, [sp, #16]
 8000d12:	9307      	str	r3, [sp, #28]
 8000d14:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000d18:	931a      	str	r3, [sp, #104]	@ 0x68
 8000d1a:	4654      	mov	r4, sl
 8000d1c:	2205      	movs	r2, #5
 8000d1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d22:	4853      	ldr	r0, [pc, #332]	@ (8000e70 <_vfiprintf_r+0x21c>)
 8000d24:	f7ff fa54 	bl	80001d0 <memchr>
 8000d28:	9a04      	ldr	r2, [sp, #16]
 8000d2a:	b9d8      	cbnz	r0, 8000d64 <_vfiprintf_r+0x110>
 8000d2c:	06d1      	lsls	r1, r2, #27
 8000d2e:	bf44      	itt	mi
 8000d30:	2320      	movmi	r3, #32
 8000d32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000d36:	0713      	lsls	r3, r2, #28
 8000d38:	bf44      	itt	mi
 8000d3a:	232b      	movmi	r3, #43	@ 0x2b
 8000d3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000d40:	f89a 3000 	ldrb.w	r3, [sl]
 8000d44:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d46:	d015      	beq.n	8000d74 <_vfiprintf_r+0x120>
 8000d48:	9a07      	ldr	r2, [sp, #28]
 8000d4a:	4654      	mov	r4, sl
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	f04f 0c0a 	mov.w	ip, #10
 8000d52:	4621      	mov	r1, r4
 8000d54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d58:	3b30      	subs	r3, #48	@ 0x30
 8000d5a:	2b09      	cmp	r3, #9
 8000d5c:	d94b      	bls.n	8000df6 <_vfiprintf_r+0x1a2>
 8000d5e:	b1b0      	cbz	r0, 8000d8e <_vfiprintf_r+0x13a>
 8000d60:	9207      	str	r2, [sp, #28]
 8000d62:	e014      	b.n	8000d8e <_vfiprintf_r+0x13a>
 8000d64:	eba0 0308 	sub.w	r3, r0, r8
 8000d68:	fa09 f303 	lsl.w	r3, r9, r3
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	9304      	str	r3, [sp, #16]
 8000d70:	46a2      	mov	sl, r4
 8000d72:	e7d2      	b.n	8000d1a <_vfiprintf_r+0xc6>
 8000d74:	9b03      	ldr	r3, [sp, #12]
 8000d76:	1d19      	adds	r1, r3, #4
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	9103      	str	r1, [sp, #12]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	bfbb      	ittet	lt
 8000d80:	425b      	neglt	r3, r3
 8000d82:	f042 0202 	orrlt.w	r2, r2, #2
 8000d86:	9307      	strge	r3, [sp, #28]
 8000d88:	9307      	strlt	r3, [sp, #28]
 8000d8a:	bfb8      	it	lt
 8000d8c:	9204      	strlt	r2, [sp, #16]
 8000d8e:	7823      	ldrb	r3, [r4, #0]
 8000d90:	2b2e      	cmp	r3, #46	@ 0x2e
 8000d92:	d10a      	bne.n	8000daa <_vfiprintf_r+0x156>
 8000d94:	7863      	ldrb	r3, [r4, #1]
 8000d96:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d98:	d132      	bne.n	8000e00 <_vfiprintf_r+0x1ac>
 8000d9a:	9b03      	ldr	r3, [sp, #12]
 8000d9c:	1d1a      	adds	r2, r3, #4
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	9203      	str	r2, [sp, #12]
 8000da2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000da6:	3402      	adds	r4, #2
 8000da8:	9305      	str	r3, [sp, #20]
 8000daa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000e80 <_vfiprintf_r+0x22c>
 8000dae:	7821      	ldrb	r1, [r4, #0]
 8000db0:	2203      	movs	r2, #3
 8000db2:	4650      	mov	r0, sl
 8000db4:	f7ff fa0c 	bl	80001d0 <memchr>
 8000db8:	b138      	cbz	r0, 8000dca <_vfiprintf_r+0x176>
 8000dba:	9b04      	ldr	r3, [sp, #16]
 8000dbc:	eba0 000a 	sub.w	r0, r0, sl
 8000dc0:	2240      	movs	r2, #64	@ 0x40
 8000dc2:	4082      	lsls	r2, r0
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	3401      	adds	r4, #1
 8000dc8:	9304      	str	r3, [sp, #16]
 8000dca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000dce:	4829      	ldr	r0, [pc, #164]	@ (8000e74 <_vfiprintf_r+0x220>)
 8000dd0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000dd4:	2206      	movs	r2, #6
 8000dd6:	f7ff f9fb 	bl	80001d0 <memchr>
 8000dda:	2800      	cmp	r0, #0
 8000ddc:	d03f      	beq.n	8000e5e <_vfiprintf_r+0x20a>
 8000dde:	4b26      	ldr	r3, [pc, #152]	@ (8000e78 <_vfiprintf_r+0x224>)
 8000de0:	bb1b      	cbnz	r3, 8000e2a <_vfiprintf_r+0x1d6>
 8000de2:	9b03      	ldr	r3, [sp, #12]
 8000de4:	3307      	adds	r3, #7
 8000de6:	f023 0307 	bic.w	r3, r3, #7
 8000dea:	3308      	adds	r3, #8
 8000dec:	9303      	str	r3, [sp, #12]
 8000dee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000df0:	443b      	add	r3, r7
 8000df2:	9309      	str	r3, [sp, #36]	@ 0x24
 8000df4:	e76a      	b.n	8000ccc <_vfiprintf_r+0x78>
 8000df6:	fb0c 3202 	mla	r2, ip, r2, r3
 8000dfa:	460c      	mov	r4, r1
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	e7a8      	b.n	8000d52 <_vfiprintf_r+0xfe>
 8000e00:	2300      	movs	r3, #0
 8000e02:	3401      	adds	r4, #1
 8000e04:	9305      	str	r3, [sp, #20]
 8000e06:	4619      	mov	r1, r3
 8000e08:	f04f 0c0a 	mov.w	ip, #10
 8000e0c:	4620      	mov	r0, r4
 8000e0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e12:	3a30      	subs	r2, #48	@ 0x30
 8000e14:	2a09      	cmp	r2, #9
 8000e16:	d903      	bls.n	8000e20 <_vfiprintf_r+0x1cc>
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d0c6      	beq.n	8000daa <_vfiprintf_r+0x156>
 8000e1c:	9105      	str	r1, [sp, #20]
 8000e1e:	e7c4      	b.n	8000daa <_vfiprintf_r+0x156>
 8000e20:	fb0c 2101 	mla	r1, ip, r1, r2
 8000e24:	4604      	mov	r4, r0
 8000e26:	2301      	movs	r3, #1
 8000e28:	e7f0      	b.n	8000e0c <_vfiprintf_r+0x1b8>
 8000e2a:	ab03      	add	r3, sp, #12
 8000e2c:	9300      	str	r3, [sp, #0]
 8000e2e:	462a      	mov	r2, r5
 8000e30:	4b12      	ldr	r3, [pc, #72]	@ (8000e7c <_vfiprintf_r+0x228>)
 8000e32:	a904      	add	r1, sp, #16
 8000e34:	4630      	mov	r0, r6
 8000e36:	f3af 8000 	nop.w
 8000e3a:	4607      	mov	r7, r0
 8000e3c:	1c78      	adds	r0, r7, #1
 8000e3e:	d1d6      	bne.n	8000dee <_vfiprintf_r+0x19a>
 8000e40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000e42:	07d9      	lsls	r1, r3, #31
 8000e44:	d405      	bmi.n	8000e52 <_vfiprintf_r+0x1fe>
 8000e46:	89ab      	ldrh	r3, [r5, #12]
 8000e48:	059a      	lsls	r2, r3, #22
 8000e4a:	d402      	bmi.n	8000e52 <_vfiprintf_r+0x1fe>
 8000e4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000e4e:	f7ff fddd 	bl	8000a0c <__retarget_lock_release_recursive>
 8000e52:	89ab      	ldrh	r3, [r5, #12]
 8000e54:	065b      	lsls	r3, r3, #25
 8000e56:	f53f af1f 	bmi.w	8000c98 <_vfiprintf_r+0x44>
 8000e5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000e5c:	e71e      	b.n	8000c9c <_vfiprintf_r+0x48>
 8000e5e:	ab03      	add	r3, sp, #12
 8000e60:	9300      	str	r3, [sp, #0]
 8000e62:	462a      	mov	r2, r5
 8000e64:	4b05      	ldr	r3, [pc, #20]	@ (8000e7c <_vfiprintf_r+0x228>)
 8000e66:	a904      	add	r1, sp, #16
 8000e68:	4630      	mov	r0, r6
 8000e6a:	f000 f879 	bl	8000f60 <_printf_i>
 8000e6e:	e7e4      	b.n	8000e3a <_vfiprintf_r+0x1e6>
 8000e70:	080015ef 	.word	0x080015ef
 8000e74:	080015f9 	.word	0x080015f9
 8000e78:	00000000 	.word	0x00000000
 8000e7c:	08000c2f 	.word	0x08000c2f
 8000e80:	080015f5 	.word	0x080015f5

08000e84 <_printf_common>:
 8000e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e88:	4616      	mov	r6, r2
 8000e8a:	4698      	mov	r8, r3
 8000e8c:	688a      	ldr	r2, [r1, #8]
 8000e8e:	690b      	ldr	r3, [r1, #16]
 8000e90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000e94:	4293      	cmp	r3, r2
 8000e96:	bfb8      	it	lt
 8000e98:	4613      	movlt	r3, r2
 8000e9a:	6033      	str	r3, [r6, #0]
 8000e9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000ea0:	4607      	mov	r7, r0
 8000ea2:	460c      	mov	r4, r1
 8000ea4:	b10a      	cbz	r2, 8000eaa <_printf_common+0x26>
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	6033      	str	r3, [r6, #0]
 8000eaa:	6823      	ldr	r3, [r4, #0]
 8000eac:	0699      	lsls	r1, r3, #26
 8000eae:	bf42      	ittt	mi
 8000eb0:	6833      	ldrmi	r3, [r6, #0]
 8000eb2:	3302      	addmi	r3, #2
 8000eb4:	6033      	strmi	r3, [r6, #0]
 8000eb6:	6825      	ldr	r5, [r4, #0]
 8000eb8:	f015 0506 	ands.w	r5, r5, #6
 8000ebc:	d106      	bne.n	8000ecc <_printf_common+0x48>
 8000ebe:	f104 0a19 	add.w	sl, r4, #25
 8000ec2:	68e3      	ldr	r3, [r4, #12]
 8000ec4:	6832      	ldr	r2, [r6, #0]
 8000ec6:	1a9b      	subs	r3, r3, r2
 8000ec8:	42ab      	cmp	r3, r5
 8000eca:	dc26      	bgt.n	8000f1a <_printf_common+0x96>
 8000ecc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000ed0:	6822      	ldr	r2, [r4, #0]
 8000ed2:	3b00      	subs	r3, #0
 8000ed4:	bf18      	it	ne
 8000ed6:	2301      	movne	r3, #1
 8000ed8:	0692      	lsls	r2, r2, #26
 8000eda:	d42b      	bmi.n	8000f34 <_printf_common+0xb0>
 8000edc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000ee0:	4641      	mov	r1, r8
 8000ee2:	4638      	mov	r0, r7
 8000ee4:	47c8      	blx	r9
 8000ee6:	3001      	adds	r0, #1
 8000ee8:	d01e      	beq.n	8000f28 <_printf_common+0xa4>
 8000eea:	6823      	ldr	r3, [r4, #0]
 8000eec:	6922      	ldr	r2, [r4, #16]
 8000eee:	f003 0306 	and.w	r3, r3, #6
 8000ef2:	2b04      	cmp	r3, #4
 8000ef4:	bf02      	ittt	eq
 8000ef6:	68e5      	ldreq	r5, [r4, #12]
 8000ef8:	6833      	ldreq	r3, [r6, #0]
 8000efa:	1aed      	subeq	r5, r5, r3
 8000efc:	68a3      	ldr	r3, [r4, #8]
 8000efe:	bf0c      	ite	eq
 8000f00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000f04:	2500      	movne	r5, #0
 8000f06:	4293      	cmp	r3, r2
 8000f08:	bfc4      	itt	gt
 8000f0a:	1a9b      	subgt	r3, r3, r2
 8000f0c:	18ed      	addgt	r5, r5, r3
 8000f0e:	2600      	movs	r6, #0
 8000f10:	341a      	adds	r4, #26
 8000f12:	42b5      	cmp	r5, r6
 8000f14:	d11a      	bne.n	8000f4c <_printf_common+0xc8>
 8000f16:	2000      	movs	r0, #0
 8000f18:	e008      	b.n	8000f2c <_printf_common+0xa8>
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	4652      	mov	r2, sl
 8000f1e:	4641      	mov	r1, r8
 8000f20:	4638      	mov	r0, r7
 8000f22:	47c8      	blx	r9
 8000f24:	3001      	adds	r0, #1
 8000f26:	d103      	bne.n	8000f30 <_printf_common+0xac>
 8000f28:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f30:	3501      	adds	r5, #1
 8000f32:	e7c6      	b.n	8000ec2 <_printf_common+0x3e>
 8000f34:	18e1      	adds	r1, r4, r3
 8000f36:	1c5a      	adds	r2, r3, #1
 8000f38:	2030      	movs	r0, #48	@ 0x30
 8000f3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000f3e:	4422      	add	r2, r4
 8000f40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000f44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000f48:	3302      	adds	r3, #2
 8000f4a:	e7c7      	b.n	8000edc <_printf_common+0x58>
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	4622      	mov	r2, r4
 8000f50:	4641      	mov	r1, r8
 8000f52:	4638      	mov	r0, r7
 8000f54:	47c8      	blx	r9
 8000f56:	3001      	adds	r0, #1
 8000f58:	d0e6      	beq.n	8000f28 <_printf_common+0xa4>
 8000f5a:	3601      	adds	r6, #1
 8000f5c:	e7d9      	b.n	8000f12 <_printf_common+0x8e>
	...

08000f60 <_printf_i>:
 8000f60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000f64:	7e0f      	ldrb	r7, [r1, #24]
 8000f66:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000f68:	2f78      	cmp	r7, #120	@ 0x78
 8000f6a:	4691      	mov	r9, r2
 8000f6c:	4680      	mov	r8, r0
 8000f6e:	460c      	mov	r4, r1
 8000f70:	469a      	mov	sl, r3
 8000f72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000f76:	d807      	bhi.n	8000f88 <_printf_i+0x28>
 8000f78:	2f62      	cmp	r7, #98	@ 0x62
 8000f7a:	d80a      	bhi.n	8000f92 <_printf_i+0x32>
 8000f7c:	2f00      	cmp	r7, #0
 8000f7e:	f000 80d2 	beq.w	8001126 <_printf_i+0x1c6>
 8000f82:	2f58      	cmp	r7, #88	@ 0x58
 8000f84:	f000 80b9 	beq.w	80010fa <_printf_i+0x19a>
 8000f88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000f8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000f90:	e03a      	b.n	8001008 <_printf_i+0xa8>
 8000f92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000f96:	2b15      	cmp	r3, #21
 8000f98:	d8f6      	bhi.n	8000f88 <_printf_i+0x28>
 8000f9a:	a101      	add	r1, pc, #4	@ (adr r1, 8000fa0 <_printf_i+0x40>)
 8000f9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000fa0:	08000ff9 	.word	0x08000ff9
 8000fa4:	0800100d 	.word	0x0800100d
 8000fa8:	08000f89 	.word	0x08000f89
 8000fac:	08000f89 	.word	0x08000f89
 8000fb0:	08000f89 	.word	0x08000f89
 8000fb4:	08000f89 	.word	0x08000f89
 8000fb8:	0800100d 	.word	0x0800100d
 8000fbc:	08000f89 	.word	0x08000f89
 8000fc0:	08000f89 	.word	0x08000f89
 8000fc4:	08000f89 	.word	0x08000f89
 8000fc8:	08000f89 	.word	0x08000f89
 8000fcc:	0800110d 	.word	0x0800110d
 8000fd0:	08001037 	.word	0x08001037
 8000fd4:	080010c7 	.word	0x080010c7
 8000fd8:	08000f89 	.word	0x08000f89
 8000fdc:	08000f89 	.word	0x08000f89
 8000fe0:	0800112f 	.word	0x0800112f
 8000fe4:	08000f89 	.word	0x08000f89
 8000fe8:	08001037 	.word	0x08001037
 8000fec:	08000f89 	.word	0x08000f89
 8000ff0:	08000f89 	.word	0x08000f89
 8000ff4:	080010cf 	.word	0x080010cf
 8000ff8:	6833      	ldr	r3, [r6, #0]
 8000ffa:	1d1a      	adds	r2, r3, #4
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	6032      	str	r2, [r6, #0]
 8001000:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001004:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001008:	2301      	movs	r3, #1
 800100a:	e09d      	b.n	8001148 <_printf_i+0x1e8>
 800100c:	6833      	ldr	r3, [r6, #0]
 800100e:	6820      	ldr	r0, [r4, #0]
 8001010:	1d19      	adds	r1, r3, #4
 8001012:	6031      	str	r1, [r6, #0]
 8001014:	0606      	lsls	r6, r0, #24
 8001016:	d501      	bpl.n	800101c <_printf_i+0xbc>
 8001018:	681d      	ldr	r5, [r3, #0]
 800101a:	e003      	b.n	8001024 <_printf_i+0xc4>
 800101c:	0645      	lsls	r5, r0, #25
 800101e:	d5fb      	bpl.n	8001018 <_printf_i+0xb8>
 8001020:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001024:	2d00      	cmp	r5, #0
 8001026:	da03      	bge.n	8001030 <_printf_i+0xd0>
 8001028:	232d      	movs	r3, #45	@ 0x2d
 800102a:	426d      	negs	r5, r5
 800102c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001030:	4859      	ldr	r0, [pc, #356]	@ (8001198 <_printf_i+0x238>)
 8001032:	230a      	movs	r3, #10
 8001034:	e011      	b.n	800105a <_printf_i+0xfa>
 8001036:	6821      	ldr	r1, [r4, #0]
 8001038:	6833      	ldr	r3, [r6, #0]
 800103a:	0608      	lsls	r0, r1, #24
 800103c:	f853 5b04 	ldr.w	r5, [r3], #4
 8001040:	d402      	bmi.n	8001048 <_printf_i+0xe8>
 8001042:	0649      	lsls	r1, r1, #25
 8001044:	bf48      	it	mi
 8001046:	b2ad      	uxthmi	r5, r5
 8001048:	2f6f      	cmp	r7, #111	@ 0x6f
 800104a:	4853      	ldr	r0, [pc, #332]	@ (8001198 <_printf_i+0x238>)
 800104c:	6033      	str	r3, [r6, #0]
 800104e:	bf14      	ite	ne
 8001050:	230a      	movne	r3, #10
 8001052:	2308      	moveq	r3, #8
 8001054:	2100      	movs	r1, #0
 8001056:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800105a:	6866      	ldr	r6, [r4, #4]
 800105c:	60a6      	str	r6, [r4, #8]
 800105e:	2e00      	cmp	r6, #0
 8001060:	bfa2      	ittt	ge
 8001062:	6821      	ldrge	r1, [r4, #0]
 8001064:	f021 0104 	bicge.w	r1, r1, #4
 8001068:	6021      	strge	r1, [r4, #0]
 800106a:	b90d      	cbnz	r5, 8001070 <_printf_i+0x110>
 800106c:	2e00      	cmp	r6, #0
 800106e:	d04b      	beq.n	8001108 <_printf_i+0x1a8>
 8001070:	4616      	mov	r6, r2
 8001072:	fbb5 f1f3 	udiv	r1, r5, r3
 8001076:	fb03 5711 	mls	r7, r3, r1, r5
 800107a:	5dc7      	ldrb	r7, [r0, r7]
 800107c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001080:	462f      	mov	r7, r5
 8001082:	42bb      	cmp	r3, r7
 8001084:	460d      	mov	r5, r1
 8001086:	d9f4      	bls.n	8001072 <_printf_i+0x112>
 8001088:	2b08      	cmp	r3, #8
 800108a:	d10b      	bne.n	80010a4 <_printf_i+0x144>
 800108c:	6823      	ldr	r3, [r4, #0]
 800108e:	07df      	lsls	r7, r3, #31
 8001090:	d508      	bpl.n	80010a4 <_printf_i+0x144>
 8001092:	6923      	ldr	r3, [r4, #16]
 8001094:	6861      	ldr	r1, [r4, #4]
 8001096:	4299      	cmp	r1, r3
 8001098:	bfde      	ittt	le
 800109a:	2330      	movle	r3, #48	@ 0x30
 800109c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80010a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80010a4:	1b92      	subs	r2, r2, r6
 80010a6:	6122      	str	r2, [r4, #16]
 80010a8:	f8cd a000 	str.w	sl, [sp]
 80010ac:	464b      	mov	r3, r9
 80010ae:	aa03      	add	r2, sp, #12
 80010b0:	4621      	mov	r1, r4
 80010b2:	4640      	mov	r0, r8
 80010b4:	f7ff fee6 	bl	8000e84 <_printf_common>
 80010b8:	3001      	adds	r0, #1
 80010ba:	d14a      	bne.n	8001152 <_printf_i+0x1f2>
 80010bc:	f04f 30ff 	mov.w	r0, #4294967295
 80010c0:	b004      	add	sp, #16
 80010c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010c6:	6823      	ldr	r3, [r4, #0]
 80010c8:	f043 0320 	orr.w	r3, r3, #32
 80010cc:	6023      	str	r3, [r4, #0]
 80010ce:	4833      	ldr	r0, [pc, #204]	@ (800119c <_printf_i+0x23c>)
 80010d0:	2778      	movs	r7, #120	@ 0x78
 80010d2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80010d6:	6823      	ldr	r3, [r4, #0]
 80010d8:	6831      	ldr	r1, [r6, #0]
 80010da:	061f      	lsls	r7, r3, #24
 80010dc:	f851 5b04 	ldr.w	r5, [r1], #4
 80010e0:	d402      	bmi.n	80010e8 <_printf_i+0x188>
 80010e2:	065f      	lsls	r7, r3, #25
 80010e4:	bf48      	it	mi
 80010e6:	b2ad      	uxthmi	r5, r5
 80010e8:	6031      	str	r1, [r6, #0]
 80010ea:	07d9      	lsls	r1, r3, #31
 80010ec:	bf44      	itt	mi
 80010ee:	f043 0320 	orrmi.w	r3, r3, #32
 80010f2:	6023      	strmi	r3, [r4, #0]
 80010f4:	b11d      	cbz	r5, 80010fe <_printf_i+0x19e>
 80010f6:	2310      	movs	r3, #16
 80010f8:	e7ac      	b.n	8001054 <_printf_i+0xf4>
 80010fa:	4827      	ldr	r0, [pc, #156]	@ (8001198 <_printf_i+0x238>)
 80010fc:	e7e9      	b.n	80010d2 <_printf_i+0x172>
 80010fe:	6823      	ldr	r3, [r4, #0]
 8001100:	f023 0320 	bic.w	r3, r3, #32
 8001104:	6023      	str	r3, [r4, #0]
 8001106:	e7f6      	b.n	80010f6 <_printf_i+0x196>
 8001108:	4616      	mov	r6, r2
 800110a:	e7bd      	b.n	8001088 <_printf_i+0x128>
 800110c:	6833      	ldr	r3, [r6, #0]
 800110e:	6825      	ldr	r5, [r4, #0]
 8001110:	6961      	ldr	r1, [r4, #20]
 8001112:	1d18      	adds	r0, r3, #4
 8001114:	6030      	str	r0, [r6, #0]
 8001116:	062e      	lsls	r6, r5, #24
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	d501      	bpl.n	8001120 <_printf_i+0x1c0>
 800111c:	6019      	str	r1, [r3, #0]
 800111e:	e002      	b.n	8001126 <_printf_i+0x1c6>
 8001120:	0668      	lsls	r0, r5, #25
 8001122:	d5fb      	bpl.n	800111c <_printf_i+0x1bc>
 8001124:	8019      	strh	r1, [r3, #0]
 8001126:	2300      	movs	r3, #0
 8001128:	6123      	str	r3, [r4, #16]
 800112a:	4616      	mov	r6, r2
 800112c:	e7bc      	b.n	80010a8 <_printf_i+0x148>
 800112e:	6833      	ldr	r3, [r6, #0]
 8001130:	1d1a      	adds	r2, r3, #4
 8001132:	6032      	str	r2, [r6, #0]
 8001134:	681e      	ldr	r6, [r3, #0]
 8001136:	6862      	ldr	r2, [r4, #4]
 8001138:	2100      	movs	r1, #0
 800113a:	4630      	mov	r0, r6
 800113c:	f7ff f848 	bl	80001d0 <memchr>
 8001140:	b108      	cbz	r0, 8001146 <_printf_i+0x1e6>
 8001142:	1b80      	subs	r0, r0, r6
 8001144:	6060      	str	r0, [r4, #4]
 8001146:	6863      	ldr	r3, [r4, #4]
 8001148:	6123      	str	r3, [r4, #16]
 800114a:	2300      	movs	r3, #0
 800114c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001150:	e7aa      	b.n	80010a8 <_printf_i+0x148>
 8001152:	6923      	ldr	r3, [r4, #16]
 8001154:	4632      	mov	r2, r6
 8001156:	4649      	mov	r1, r9
 8001158:	4640      	mov	r0, r8
 800115a:	47d0      	blx	sl
 800115c:	3001      	adds	r0, #1
 800115e:	d0ad      	beq.n	80010bc <_printf_i+0x15c>
 8001160:	6823      	ldr	r3, [r4, #0]
 8001162:	079b      	lsls	r3, r3, #30
 8001164:	d413      	bmi.n	800118e <_printf_i+0x22e>
 8001166:	68e0      	ldr	r0, [r4, #12]
 8001168:	9b03      	ldr	r3, [sp, #12]
 800116a:	4298      	cmp	r0, r3
 800116c:	bfb8      	it	lt
 800116e:	4618      	movlt	r0, r3
 8001170:	e7a6      	b.n	80010c0 <_printf_i+0x160>
 8001172:	2301      	movs	r3, #1
 8001174:	4632      	mov	r2, r6
 8001176:	4649      	mov	r1, r9
 8001178:	4640      	mov	r0, r8
 800117a:	47d0      	blx	sl
 800117c:	3001      	adds	r0, #1
 800117e:	d09d      	beq.n	80010bc <_printf_i+0x15c>
 8001180:	3501      	adds	r5, #1
 8001182:	68e3      	ldr	r3, [r4, #12]
 8001184:	9903      	ldr	r1, [sp, #12]
 8001186:	1a5b      	subs	r3, r3, r1
 8001188:	42ab      	cmp	r3, r5
 800118a:	dcf2      	bgt.n	8001172 <_printf_i+0x212>
 800118c:	e7eb      	b.n	8001166 <_printf_i+0x206>
 800118e:	2500      	movs	r5, #0
 8001190:	f104 0619 	add.w	r6, r4, #25
 8001194:	e7f5      	b.n	8001182 <_printf_i+0x222>
 8001196:	bf00      	nop
 8001198:	08001600 	.word	0x08001600
 800119c:	08001611 	.word	0x08001611

080011a0 <__sflush_r>:
 80011a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80011a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011a8:	0716      	lsls	r6, r2, #28
 80011aa:	4605      	mov	r5, r0
 80011ac:	460c      	mov	r4, r1
 80011ae:	d454      	bmi.n	800125a <__sflush_r+0xba>
 80011b0:	684b      	ldr	r3, [r1, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	dc02      	bgt.n	80011bc <__sflush_r+0x1c>
 80011b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	dd48      	ble.n	800124e <__sflush_r+0xae>
 80011bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80011be:	2e00      	cmp	r6, #0
 80011c0:	d045      	beq.n	800124e <__sflush_r+0xae>
 80011c2:	2300      	movs	r3, #0
 80011c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80011c8:	682f      	ldr	r7, [r5, #0]
 80011ca:	6a21      	ldr	r1, [r4, #32]
 80011cc:	602b      	str	r3, [r5, #0]
 80011ce:	d030      	beq.n	8001232 <__sflush_r+0x92>
 80011d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80011d2:	89a3      	ldrh	r3, [r4, #12]
 80011d4:	0759      	lsls	r1, r3, #29
 80011d6:	d505      	bpl.n	80011e4 <__sflush_r+0x44>
 80011d8:	6863      	ldr	r3, [r4, #4]
 80011da:	1ad2      	subs	r2, r2, r3
 80011dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80011de:	b10b      	cbz	r3, 80011e4 <__sflush_r+0x44>
 80011e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80011e2:	1ad2      	subs	r2, r2, r3
 80011e4:	2300      	movs	r3, #0
 80011e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80011e8:	6a21      	ldr	r1, [r4, #32]
 80011ea:	4628      	mov	r0, r5
 80011ec:	47b0      	blx	r6
 80011ee:	1c43      	adds	r3, r0, #1
 80011f0:	89a3      	ldrh	r3, [r4, #12]
 80011f2:	d106      	bne.n	8001202 <__sflush_r+0x62>
 80011f4:	6829      	ldr	r1, [r5, #0]
 80011f6:	291d      	cmp	r1, #29
 80011f8:	d82b      	bhi.n	8001252 <__sflush_r+0xb2>
 80011fa:	4a2a      	ldr	r2, [pc, #168]	@ (80012a4 <__sflush_r+0x104>)
 80011fc:	410a      	asrs	r2, r1
 80011fe:	07d6      	lsls	r6, r2, #31
 8001200:	d427      	bmi.n	8001252 <__sflush_r+0xb2>
 8001202:	2200      	movs	r2, #0
 8001204:	6062      	str	r2, [r4, #4]
 8001206:	04d9      	lsls	r1, r3, #19
 8001208:	6922      	ldr	r2, [r4, #16]
 800120a:	6022      	str	r2, [r4, #0]
 800120c:	d504      	bpl.n	8001218 <__sflush_r+0x78>
 800120e:	1c42      	adds	r2, r0, #1
 8001210:	d101      	bne.n	8001216 <__sflush_r+0x76>
 8001212:	682b      	ldr	r3, [r5, #0]
 8001214:	b903      	cbnz	r3, 8001218 <__sflush_r+0x78>
 8001216:	6560      	str	r0, [r4, #84]	@ 0x54
 8001218:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800121a:	602f      	str	r7, [r5, #0]
 800121c:	b1b9      	cbz	r1, 800124e <__sflush_r+0xae>
 800121e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001222:	4299      	cmp	r1, r3
 8001224:	d002      	beq.n	800122c <__sflush_r+0x8c>
 8001226:	4628      	mov	r0, r5
 8001228:	f7ff fbf2 	bl	8000a10 <_free_r>
 800122c:	2300      	movs	r3, #0
 800122e:	6363      	str	r3, [r4, #52]	@ 0x34
 8001230:	e00d      	b.n	800124e <__sflush_r+0xae>
 8001232:	2301      	movs	r3, #1
 8001234:	4628      	mov	r0, r5
 8001236:	47b0      	blx	r6
 8001238:	4602      	mov	r2, r0
 800123a:	1c50      	adds	r0, r2, #1
 800123c:	d1c9      	bne.n	80011d2 <__sflush_r+0x32>
 800123e:	682b      	ldr	r3, [r5, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d0c6      	beq.n	80011d2 <__sflush_r+0x32>
 8001244:	2b1d      	cmp	r3, #29
 8001246:	d001      	beq.n	800124c <__sflush_r+0xac>
 8001248:	2b16      	cmp	r3, #22
 800124a:	d11e      	bne.n	800128a <__sflush_r+0xea>
 800124c:	602f      	str	r7, [r5, #0]
 800124e:	2000      	movs	r0, #0
 8001250:	e022      	b.n	8001298 <__sflush_r+0xf8>
 8001252:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001256:	b21b      	sxth	r3, r3
 8001258:	e01b      	b.n	8001292 <__sflush_r+0xf2>
 800125a:	690f      	ldr	r7, [r1, #16]
 800125c:	2f00      	cmp	r7, #0
 800125e:	d0f6      	beq.n	800124e <__sflush_r+0xae>
 8001260:	0793      	lsls	r3, r2, #30
 8001262:	680e      	ldr	r6, [r1, #0]
 8001264:	bf08      	it	eq
 8001266:	694b      	ldreq	r3, [r1, #20]
 8001268:	600f      	str	r7, [r1, #0]
 800126a:	bf18      	it	ne
 800126c:	2300      	movne	r3, #0
 800126e:	eba6 0807 	sub.w	r8, r6, r7
 8001272:	608b      	str	r3, [r1, #8]
 8001274:	f1b8 0f00 	cmp.w	r8, #0
 8001278:	dde9      	ble.n	800124e <__sflush_r+0xae>
 800127a:	6a21      	ldr	r1, [r4, #32]
 800127c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800127e:	4643      	mov	r3, r8
 8001280:	463a      	mov	r2, r7
 8001282:	4628      	mov	r0, r5
 8001284:	47b0      	blx	r6
 8001286:	2800      	cmp	r0, #0
 8001288:	dc08      	bgt.n	800129c <__sflush_r+0xfc>
 800128a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800128e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001292:	81a3      	strh	r3, [r4, #12]
 8001294:	f04f 30ff 	mov.w	r0, #4294967295
 8001298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800129c:	4407      	add	r7, r0
 800129e:	eba8 0800 	sub.w	r8, r8, r0
 80012a2:	e7e7      	b.n	8001274 <__sflush_r+0xd4>
 80012a4:	dfbffffe 	.word	0xdfbffffe

080012a8 <_fflush_r>:
 80012a8:	b538      	push	{r3, r4, r5, lr}
 80012aa:	690b      	ldr	r3, [r1, #16]
 80012ac:	4605      	mov	r5, r0
 80012ae:	460c      	mov	r4, r1
 80012b0:	b913      	cbnz	r3, 80012b8 <_fflush_r+0x10>
 80012b2:	2500      	movs	r5, #0
 80012b4:	4628      	mov	r0, r5
 80012b6:	bd38      	pop	{r3, r4, r5, pc}
 80012b8:	b118      	cbz	r0, 80012c2 <_fflush_r+0x1a>
 80012ba:	6a03      	ldr	r3, [r0, #32]
 80012bc:	b90b      	cbnz	r3, 80012c2 <_fflush_r+0x1a>
 80012be:	f7ff fa9f 	bl	8000800 <__sinit>
 80012c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0f3      	beq.n	80012b2 <_fflush_r+0xa>
 80012ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80012cc:	07d0      	lsls	r0, r2, #31
 80012ce:	d404      	bmi.n	80012da <_fflush_r+0x32>
 80012d0:	0599      	lsls	r1, r3, #22
 80012d2:	d402      	bmi.n	80012da <_fflush_r+0x32>
 80012d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80012d6:	f7ff fb98 	bl	8000a0a <__retarget_lock_acquire_recursive>
 80012da:	4628      	mov	r0, r5
 80012dc:	4621      	mov	r1, r4
 80012de:	f7ff ff5f 	bl	80011a0 <__sflush_r>
 80012e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80012e4:	07da      	lsls	r2, r3, #31
 80012e6:	4605      	mov	r5, r0
 80012e8:	d4e4      	bmi.n	80012b4 <_fflush_r+0xc>
 80012ea:	89a3      	ldrh	r3, [r4, #12]
 80012ec:	059b      	lsls	r3, r3, #22
 80012ee:	d4e1      	bmi.n	80012b4 <_fflush_r+0xc>
 80012f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80012f2:	f7ff fb8b 	bl	8000a0c <__retarget_lock_release_recursive>
 80012f6:	e7dd      	b.n	80012b4 <_fflush_r+0xc>

080012f8 <__swbuf_r>:
 80012f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012fa:	460e      	mov	r6, r1
 80012fc:	4614      	mov	r4, r2
 80012fe:	4605      	mov	r5, r0
 8001300:	b118      	cbz	r0, 800130a <__swbuf_r+0x12>
 8001302:	6a03      	ldr	r3, [r0, #32]
 8001304:	b90b      	cbnz	r3, 800130a <__swbuf_r+0x12>
 8001306:	f7ff fa7b 	bl	8000800 <__sinit>
 800130a:	69a3      	ldr	r3, [r4, #24]
 800130c:	60a3      	str	r3, [r4, #8]
 800130e:	89a3      	ldrh	r3, [r4, #12]
 8001310:	071a      	lsls	r2, r3, #28
 8001312:	d501      	bpl.n	8001318 <__swbuf_r+0x20>
 8001314:	6923      	ldr	r3, [r4, #16]
 8001316:	b943      	cbnz	r3, 800132a <__swbuf_r+0x32>
 8001318:	4621      	mov	r1, r4
 800131a:	4628      	mov	r0, r5
 800131c:	f000 f82a 	bl	8001374 <__swsetup_r>
 8001320:	b118      	cbz	r0, 800132a <__swbuf_r+0x32>
 8001322:	f04f 37ff 	mov.w	r7, #4294967295
 8001326:	4638      	mov	r0, r7
 8001328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800132a:	6823      	ldr	r3, [r4, #0]
 800132c:	6922      	ldr	r2, [r4, #16]
 800132e:	1a98      	subs	r0, r3, r2
 8001330:	6963      	ldr	r3, [r4, #20]
 8001332:	b2f6      	uxtb	r6, r6
 8001334:	4283      	cmp	r3, r0
 8001336:	4637      	mov	r7, r6
 8001338:	dc05      	bgt.n	8001346 <__swbuf_r+0x4e>
 800133a:	4621      	mov	r1, r4
 800133c:	4628      	mov	r0, r5
 800133e:	f7ff ffb3 	bl	80012a8 <_fflush_r>
 8001342:	2800      	cmp	r0, #0
 8001344:	d1ed      	bne.n	8001322 <__swbuf_r+0x2a>
 8001346:	68a3      	ldr	r3, [r4, #8]
 8001348:	3b01      	subs	r3, #1
 800134a:	60a3      	str	r3, [r4, #8]
 800134c:	6823      	ldr	r3, [r4, #0]
 800134e:	1c5a      	adds	r2, r3, #1
 8001350:	6022      	str	r2, [r4, #0]
 8001352:	701e      	strb	r6, [r3, #0]
 8001354:	6962      	ldr	r2, [r4, #20]
 8001356:	1c43      	adds	r3, r0, #1
 8001358:	429a      	cmp	r2, r3
 800135a:	d004      	beq.n	8001366 <__swbuf_r+0x6e>
 800135c:	89a3      	ldrh	r3, [r4, #12]
 800135e:	07db      	lsls	r3, r3, #31
 8001360:	d5e1      	bpl.n	8001326 <__swbuf_r+0x2e>
 8001362:	2e0a      	cmp	r6, #10
 8001364:	d1df      	bne.n	8001326 <__swbuf_r+0x2e>
 8001366:	4621      	mov	r1, r4
 8001368:	4628      	mov	r0, r5
 800136a:	f7ff ff9d 	bl	80012a8 <_fflush_r>
 800136e:	2800      	cmp	r0, #0
 8001370:	d0d9      	beq.n	8001326 <__swbuf_r+0x2e>
 8001372:	e7d6      	b.n	8001322 <__swbuf_r+0x2a>

08001374 <__swsetup_r>:
 8001374:	b538      	push	{r3, r4, r5, lr}
 8001376:	4b29      	ldr	r3, [pc, #164]	@ (800141c <__swsetup_r+0xa8>)
 8001378:	4605      	mov	r5, r0
 800137a:	6818      	ldr	r0, [r3, #0]
 800137c:	460c      	mov	r4, r1
 800137e:	b118      	cbz	r0, 8001388 <__swsetup_r+0x14>
 8001380:	6a03      	ldr	r3, [r0, #32]
 8001382:	b90b      	cbnz	r3, 8001388 <__swsetup_r+0x14>
 8001384:	f7ff fa3c 	bl	8000800 <__sinit>
 8001388:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800138c:	0719      	lsls	r1, r3, #28
 800138e:	d422      	bmi.n	80013d6 <__swsetup_r+0x62>
 8001390:	06da      	lsls	r2, r3, #27
 8001392:	d407      	bmi.n	80013a4 <__swsetup_r+0x30>
 8001394:	2209      	movs	r2, #9
 8001396:	602a      	str	r2, [r5, #0]
 8001398:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800139c:	81a3      	strh	r3, [r4, #12]
 800139e:	f04f 30ff 	mov.w	r0, #4294967295
 80013a2:	e033      	b.n	800140c <__swsetup_r+0x98>
 80013a4:	0758      	lsls	r0, r3, #29
 80013a6:	d512      	bpl.n	80013ce <__swsetup_r+0x5a>
 80013a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80013aa:	b141      	cbz	r1, 80013be <__swsetup_r+0x4a>
 80013ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80013b0:	4299      	cmp	r1, r3
 80013b2:	d002      	beq.n	80013ba <__swsetup_r+0x46>
 80013b4:	4628      	mov	r0, r5
 80013b6:	f7ff fb2b 	bl	8000a10 <_free_r>
 80013ba:	2300      	movs	r3, #0
 80013bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80013be:	89a3      	ldrh	r3, [r4, #12]
 80013c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80013c4:	81a3      	strh	r3, [r4, #12]
 80013c6:	2300      	movs	r3, #0
 80013c8:	6063      	str	r3, [r4, #4]
 80013ca:	6923      	ldr	r3, [r4, #16]
 80013cc:	6023      	str	r3, [r4, #0]
 80013ce:	89a3      	ldrh	r3, [r4, #12]
 80013d0:	f043 0308 	orr.w	r3, r3, #8
 80013d4:	81a3      	strh	r3, [r4, #12]
 80013d6:	6923      	ldr	r3, [r4, #16]
 80013d8:	b94b      	cbnz	r3, 80013ee <__swsetup_r+0x7a>
 80013da:	89a3      	ldrh	r3, [r4, #12]
 80013dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80013e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013e4:	d003      	beq.n	80013ee <__swsetup_r+0x7a>
 80013e6:	4621      	mov	r1, r4
 80013e8:	4628      	mov	r0, r5
 80013ea:	f000 f84f 	bl	800148c <__smakebuf_r>
 80013ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013f2:	f013 0201 	ands.w	r2, r3, #1
 80013f6:	d00a      	beq.n	800140e <__swsetup_r+0x9a>
 80013f8:	2200      	movs	r2, #0
 80013fa:	60a2      	str	r2, [r4, #8]
 80013fc:	6962      	ldr	r2, [r4, #20]
 80013fe:	4252      	negs	r2, r2
 8001400:	61a2      	str	r2, [r4, #24]
 8001402:	6922      	ldr	r2, [r4, #16]
 8001404:	b942      	cbnz	r2, 8001418 <__swsetup_r+0xa4>
 8001406:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800140a:	d1c5      	bne.n	8001398 <__swsetup_r+0x24>
 800140c:	bd38      	pop	{r3, r4, r5, pc}
 800140e:	0799      	lsls	r1, r3, #30
 8001410:	bf58      	it	pl
 8001412:	6962      	ldrpl	r2, [r4, #20]
 8001414:	60a2      	str	r2, [r4, #8]
 8001416:	e7f4      	b.n	8001402 <__swsetup_r+0x8e>
 8001418:	2000      	movs	r0, #0
 800141a:	e7f7      	b.n	800140c <__swsetup_r+0x98>
 800141c:	2000000c 	.word	0x2000000c

08001420 <_sbrk_r>:
 8001420:	b538      	push	{r3, r4, r5, lr}
 8001422:	4d06      	ldr	r5, [pc, #24]	@ (800143c <_sbrk_r+0x1c>)
 8001424:	2300      	movs	r3, #0
 8001426:	4604      	mov	r4, r0
 8001428:	4608      	mov	r0, r1
 800142a:	602b      	str	r3, [r5, #0]
 800142c:	f7ff f828 	bl	8000480 <_sbrk>
 8001430:	1c43      	adds	r3, r0, #1
 8001432:	d102      	bne.n	800143a <_sbrk_r+0x1a>
 8001434:	682b      	ldr	r3, [r5, #0]
 8001436:	b103      	cbz	r3, 800143a <_sbrk_r+0x1a>
 8001438:	6023      	str	r3, [r4, #0]
 800143a:	bd38      	pop	{r3, r4, r5, pc}
 800143c:	200001bc 	.word	0x200001bc

08001440 <__swhatbuf_r>:
 8001440:	b570      	push	{r4, r5, r6, lr}
 8001442:	460c      	mov	r4, r1
 8001444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001448:	2900      	cmp	r1, #0
 800144a:	b096      	sub	sp, #88	@ 0x58
 800144c:	4615      	mov	r5, r2
 800144e:	461e      	mov	r6, r3
 8001450:	da0d      	bge.n	800146e <__swhatbuf_r+0x2e>
 8001452:	89a3      	ldrh	r3, [r4, #12]
 8001454:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001458:	f04f 0100 	mov.w	r1, #0
 800145c:	bf14      	ite	ne
 800145e:	2340      	movne	r3, #64	@ 0x40
 8001460:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001464:	2000      	movs	r0, #0
 8001466:	6031      	str	r1, [r6, #0]
 8001468:	602b      	str	r3, [r5, #0]
 800146a:	b016      	add	sp, #88	@ 0x58
 800146c:	bd70      	pop	{r4, r5, r6, pc}
 800146e:	466a      	mov	r2, sp
 8001470:	f000 f848 	bl	8001504 <_fstat_r>
 8001474:	2800      	cmp	r0, #0
 8001476:	dbec      	blt.n	8001452 <__swhatbuf_r+0x12>
 8001478:	9901      	ldr	r1, [sp, #4]
 800147a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800147e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001482:	4259      	negs	r1, r3
 8001484:	4159      	adcs	r1, r3
 8001486:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800148a:	e7eb      	b.n	8001464 <__swhatbuf_r+0x24>

0800148c <__smakebuf_r>:
 800148c:	898b      	ldrh	r3, [r1, #12]
 800148e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001490:	079d      	lsls	r5, r3, #30
 8001492:	4606      	mov	r6, r0
 8001494:	460c      	mov	r4, r1
 8001496:	d507      	bpl.n	80014a8 <__smakebuf_r+0x1c>
 8001498:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800149c:	6023      	str	r3, [r4, #0]
 800149e:	6123      	str	r3, [r4, #16]
 80014a0:	2301      	movs	r3, #1
 80014a2:	6163      	str	r3, [r4, #20]
 80014a4:	b003      	add	sp, #12
 80014a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014a8:	ab01      	add	r3, sp, #4
 80014aa:	466a      	mov	r2, sp
 80014ac:	f7ff ffc8 	bl	8001440 <__swhatbuf_r>
 80014b0:	9f00      	ldr	r7, [sp, #0]
 80014b2:	4605      	mov	r5, r0
 80014b4:	4639      	mov	r1, r7
 80014b6:	4630      	mov	r0, r6
 80014b8:	f7ff fb16 	bl	8000ae8 <_malloc_r>
 80014bc:	b948      	cbnz	r0, 80014d2 <__smakebuf_r+0x46>
 80014be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014c2:	059a      	lsls	r2, r3, #22
 80014c4:	d4ee      	bmi.n	80014a4 <__smakebuf_r+0x18>
 80014c6:	f023 0303 	bic.w	r3, r3, #3
 80014ca:	f043 0302 	orr.w	r3, r3, #2
 80014ce:	81a3      	strh	r3, [r4, #12]
 80014d0:	e7e2      	b.n	8001498 <__smakebuf_r+0xc>
 80014d2:	89a3      	ldrh	r3, [r4, #12]
 80014d4:	6020      	str	r0, [r4, #0]
 80014d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014da:	81a3      	strh	r3, [r4, #12]
 80014dc:	9b01      	ldr	r3, [sp, #4]
 80014de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80014e2:	b15b      	cbz	r3, 80014fc <__smakebuf_r+0x70>
 80014e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80014e8:	4630      	mov	r0, r6
 80014ea:	f000 f81d 	bl	8001528 <_isatty_r>
 80014ee:	b128      	cbz	r0, 80014fc <__smakebuf_r+0x70>
 80014f0:	89a3      	ldrh	r3, [r4, #12]
 80014f2:	f023 0303 	bic.w	r3, r3, #3
 80014f6:	f043 0301 	orr.w	r3, r3, #1
 80014fa:	81a3      	strh	r3, [r4, #12]
 80014fc:	89a3      	ldrh	r3, [r4, #12]
 80014fe:	431d      	orrs	r5, r3
 8001500:	81a5      	strh	r5, [r4, #12]
 8001502:	e7cf      	b.n	80014a4 <__smakebuf_r+0x18>

08001504 <_fstat_r>:
 8001504:	b538      	push	{r3, r4, r5, lr}
 8001506:	4d07      	ldr	r5, [pc, #28]	@ (8001524 <_fstat_r+0x20>)
 8001508:	2300      	movs	r3, #0
 800150a:	4604      	mov	r4, r0
 800150c:	4608      	mov	r0, r1
 800150e:	4611      	mov	r1, r2
 8001510:	602b      	str	r3, [r5, #0]
 8001512:	f7fe ff8c 	bl	800042e <_fstat>
 8001516:	1c43      	adds	r3, r0, #1
 8001518:	d102      	bne.n	8001520 <_fstat_r+0x1c>
 800151a:	682b      	ldr	r3, [r5, #0]
 800151c:	b103      	cbz	r3, 8001520 <_fstat_r+0x1c>
 800151e:	6023      	str	r3, [r4, #0]
 8001520:	bd38      	pop	{r3, r4, r5, pc}
 8001522:	bf00      	nop
 8001524:	200001bc 	.word	0x200001bc

08001528 <_isatty_r>:
 8001528:	b538      	push	{r3, r4, r5, lr}
 800152a:	4d06      	ldr	r5, [pc, #24]	@ (8001544 <_isatty_r+0x1c>)
 800152c:	2300      	movs	r3, #0
 800152e:	4604      	mov	r4, r0
 8001530:	4608      	mov	r0, r1
 8001532:	602b      	str	r3, [r5, #0]
 8001534:	f7fe ff8b 	bl	800044e <_isatty>
 8001538:	1c43      	adds	r3, r0, #1
 800153a:	d102      	bne.n	8001542 <_isatty_r+0x1a>
 800153c:	682b      	ldr	r3, [r5, #0]
 800153e:	b103      	cbz	r3, 8001542 <_isatty_r+0x1a>
 8001540:	6023      	str	r3, [r4, #0]
 8001542:	bd38      	pop	{r3, r4, r5, pc}
 8001544:	200001bc 	.word	0x200001bc

08001548 <_init>:
 8001548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800154a:	bf00      	nop
 800154c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800154e:	bc08      	pop	{r3}
 8001550:	469e      	mov	lr, r3
 8001552:	4770      	bx	lr

08001554 <_fini>:
 8001554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001556:	bf00      	nop
 8001558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800155a:	bc08      	pop	{r3}
 800155c:	469e      	mov	lr, r3
 800155e:	4770      	bx	lr
