
21_I2C_MPU6050_Accelerometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000066c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080007f4  080007fc  000017fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080007f4  080007f4  000017fc  2**0
                  CONTENTS
  4 .ARM          00000000  080007f4  080007f4  000017fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080007f4  080007fc  000017fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007f4  080007f4  000017f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080007f8  080007f8  000017f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000017fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000017fc  2**0
                  CONTENTS
 10 .bss          00000038  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000038  20000038  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000017fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000007c5  00000000  00000000  0000182c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000036d  00000000  00000000  00001ff1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b8  00000000  00000000  00002360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000007b  00000000  00000000  00002418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019083  00000000  00000000  00002493  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001787  00000000  00000000  0001b516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c034  00000000  00000000  0001cc9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a8cd1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000198  00000000  00000000  000a8d14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008d  00000000  00000000  000a8eac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080007dc 	.word	0x080007dc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080007dc 	.word	0x080007dc

080001c8 <I2C1_init>:
//Pin out
//PB8		SCL
//PB9		SDA

void I2C1_init(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	//Set PB8 and PB9 output type to open drain
	//Enable internal pull ups of PB8 and PB9
	//Enable I2C1 clock

//Enable clock access to GPIOB
	RCC->AHB1ENR |= GPIOBEN;
 80001cc:	4b48      	ldr	r3, [pc, #288]	@ (80002f0 <I2C1_init+0x128>)
 80001ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001d0:	4a47      	ldr	r2, [pc, #284]	@ (80002f0 <I2C1_init+0x128>)
 80001d2:	f043 0302 	orr.w	r3, r3, #2
 80001d6:	6313      	str	r3, [r2, #48]	@ 0x30
//Set PB8 mode and PB9 mode to AF04
	GPIOB->MODER &=~(1U<<16);
 80001d8:	4b46      	ldr	r3, [pc, #280]	@ (80002f4 <I2C1_init+0x12c>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a45      	ldr	r2, [pc, #276]	@ (80002f4 <I2C1_init+0x12c>)
 80001de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80001e2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=(1U<<17);
 80001e4:	4b43      	ldr	r3, [pc, #268]	@ (80002f4 <I2C1_init+0x12c>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a42      	ldr	r2, [pc, #264]	@ (80002f4 <I2C1_init+0x12c>)
 80001ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80001ee:	6013      	str	r3, [r2, #0]

	GPIOB->MODER &=~(1U<<18);
 80001f0:	4b40      	ldr	r3, [pc, #256]	@ (80002f4 <I2C1_init+0x12c>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a3f      	ldr	r2, [pc, #252]	@ (80002f4 <I2C1_init+0x12c>)
 80001f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80001fa:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=(1U<<19);
 80001fc:	4b3d      	ldr	r3, [pc, #244]	@ (80002f4 <I2C1_init+0x12c>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a3c      	ldr	r2, [pc, #240]	@ (80002f4 <I2C1_init+0x12c>)
 8000202:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000206:	6013      	str	r3, [r2, #0]

//Set PB8 and PB9 output type to open drain
	GPIOB->OTYPER |=((1U<<8)|(1U<<9));
 8000208:	4b3a      	ldr	r3, [pc, #232]	@ (80002f4 <I2C1_init+0x12c>)
 800020a:	685b      	ldr	r3, [r3, #4]
 800020c:	4a39      	ldr	r2, [pc, #228]	@ (80002f4 <I2C1_init+0x12c>)
 800020e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000212:	6053      	str	r3, [r2, #4]

//Enable internal pull ups of PB8 and PB9
	GPIOB->PUPDR |=(1U<<16);
 8000214:	4b37      	ldr	r3, [pc, #220]	@ (80002f4 <I2C1_init+0x12c>)
 8000216:	68db      	ldr	r3, [r3, #12]
 8000218:	4a36      	ldr	r2, [pc, #216]	@ (80002f4 <I2C1_init+0x12c>)
 800021a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800021e:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &=~(1U<<17);
 8000220:	4b34      	ldr	r3, [pc, #208]	@ (80002f4 <I2C1_init+0x12c>)
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	4a33      	ldr	r2, [pc, #204]	@ (80002f4 <I2C1_init+0x12c>)
 8000226:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800022a:	60d3      	str	r3, [r2, #12]

	GPIOB->PUPDR |=(1U<<18);
 800022c:	4b31      	ldr	r3, [pc, #196]	@ (80002f4 <I2C1_init+0x12c>)
 800022e:	68db      	ldr	r3, [r3, #12]
 8000230:	4a30      	ldr	r2, [pc, #192]	@ (80002f4 <I2C1_init+0x12c>)
 8000232:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000236:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &=~(1U<<19);
 8000238:	4b2e      	ldr	r3, [pc, #184]	@ (80002f4 <I2C1_init+0x12c>)
 800023a:	68db      	ldr	r3, [r3, #12]
 800023c:	4a2d      	ldr	r2, [pc, #180]	@ (80002f4 <I2C1_init+0x12c>)
 800023e:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8000242:	60d3      	str	r3, [r2, #12]

//Set PB8 & PB9 to AF4
	GPIOB->AFR[1] &=~(1U<<0);
 8000244:	4b2b      	ldr	r3, [pc, #172]	@ (80002f4 <I2C1_init+0x12c>)
 8000246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000248:	4a2a      	ldr	r2, [pc, #168]	@ (80002f4 <I2C1_init+0x12c>)
 800024a:	f023 0301 	bic.w	r3, r3, #1
 800024e:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] &=~(1U<<1);
 8000250:	4b28      	ldr	r3, [pc, #160]	@ (80002f4 <I2C1_init+0x12c>)
 8000252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000254:	4a27      	ldr	r2, [pc, #156]	@ (80002f4 <I2C1_init+0x12c>)
 8000256:	f023 0302 	bic.w	r3, r3, #2
 800025a:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |=(1U<<2);
 800025c:	4b25      	ldr	r3, [pc, #148]	@ (80002f4 <I2C1_init+0x12c>)
 800025e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000260:	4a24      	ldr	r2, [pc, #144]	@ (80002f4 <I2C1_init+0x12c>)
 8000262:	f043 0304 	orr.w	r3, r3, #4
 8000266:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] &=~(1U<<3);
 8000268:	4b22      	ldr	r3, [pc, #136]	@ (80002f4 <I2C1_init+0x12c>)
 800026a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800026c:	4a21      	ldr	r2, [pc, #132]	@ (80002f4 <I2C1_init+0x12c>)
 800026e:	f023 0308 	bic.w	r3, r3, #8
 8000272:	6253      	str	r3, [r2, #36]	@ 0x24

	GPIOB->AFR[1] &=~(1U<<4);
 8000274:	4b1f      	ldr	r3, [pc, #124]	@ (80002f4 <I2C1_init+0x12c>)
 8000276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000278:	4a1e      	ldr	r2, [pc, #120]	@ (80002f4 <I2C1_init+0x12c>)
 800027a:	f023 0310 	bic.w	r3, r3, #16
 800027e:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] &=~(1U<<5);
 8000280:	4b1c      	ldr	r3, [pc, #112]	@ (80002f4 <I2C1_init+0x12c>)
 8000282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000284:	4a1b      	ldr	r2, [pc, #108]	@ (80002f4 <I2C1_init+0x12c>)
 8000286:	f023 0320 	bic.w	r3, r3, #32
 800028a:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |=(1U<<6);
 800028c:	4b19      	ldr	r3, [pc, #100]	@ (80002f4 <I2C1_init+0x12c>)
 800028e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000290:	4a18      	ldr	r2, [pc, #96]	@ (80002f4 <I2C1_init+0x12c>)
 8000292:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000296:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] &=~(1U<<7);
 8000298:	4b16      	ldr	r3, [pc, #88]	@ (80002f4 <I2C1_init+0x12c>)
 800029a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800029c:	4a15      	ldr	r2, [pc, #84]	@ (80002f4 <I2C1_init+0x12c>)
 800029e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80002a2:	6253      	str	r3, [r2, #36]	@ 0x24

//Enable I2C1 clock
	RCC->AHB1ENR |= I2C1EN;
 80002a4:	4b12      	ldr	r3, [pc, #72]	@ (80002f0 <I2C1_init+0x128>)
 80002a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002a8:	4a11      	ldr	r2, [pc, #68]	@ (80002f0 <I2C1_init+0x128>)
 80002aa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80002ae:	6313      	str	r3, [r2, #48]	@ 0x30
	//Set clock mode to standard or fast mode (using standard mod
	//Set rise time
	//Enable I2C

//Enter reset mode
	I2C1->CR1 |=(1U<<15);
 80002b0:	4b11      	ldr	r3, [pc, #68]	@ (80002f8 <I2C1_init+0x130>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a10      	ldr	r2, [pc, #64]	@ (80002f8 <I2C1_init+0x130>)
 80002b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80002ba:	6013      	str	r3, [r2, #0]

//Come out of reset
	I2C1->CR1 &=~(1U<<15);
 80002bc:	4b0e      	ldr	r3, [pc, #56]	@ (80002f8 <I2C1_init+0x130>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a0d      	ldr	r2, [pc, #52]	@ (80002f8 <I2C1_init+0x130>)
 80002c2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80002c6:	6013      	str	r3, [r2, #0]

//Set peripheral clock frequency
	I2C1->CR2 =(1U<<4);//1000 == 16 which is our clock frequency of 16Mhz
 80002c8:	4b0b      	ldr	r3, [pc, #44]	@ (80002f8 <I2C1_init+0x130>)
 80002ca:	2210      	movs	r2, #16
 80002cc:	605a      	str	r2, [r3, #4]

//Set clock mode to standard or fast mode (using standard mode
	I2C1->CCR = I2C_100KHZ; //This can be calculated using automated tools like cubemx
 80002ce:	4b0a      	ldr	r3, [pc, #40]	@ (80002f8 <I2C1_init+0x130>)
 80002d0:	2250      	movs	r2, #80	@ 0x50
 80002d2:	61da      	str	r2, [r3, #28]

//Set rise time
	I2C1->TRISE = SD_MODE_MAX_RISE_TIME;
 80002d4:	4b08      	ldr	r3, [pc, #32]	@ (80002f8 <I2C1_init+0x130>)
 80002d6:	2211      	movs	r2, #17
 80002d8:	621a      	str	r2, [r3, #32]

//Enable I2C
	I2C1->CR1 |= I2C1EN;
 80002da:	4b07      	ldr	r3, [pc, #28]	@ (80002f8 <I2C1_init+0x130>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4a06      	ldr	r2, [pc, #24]	@ (80002f8 <I2C1_init+0x130>)
 80002e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80002e4:	6013      	str	r3, [r2, #0]

}
 80002e6:	bf00      	nop
 80002e8:	46bd      	mov	sp, r7
 80002ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ee:	4770      	bx	lr
 80002f0:	40023800 	.word	0x40023800
 80002f4:	40020400 	.word	0x40020400
 80002f8:	40005400 	.word	0x40005400

080002fc <I2C1_byteRead>:


void I2C1_byteRead(char saddr, char maddr, char *data)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b085      	sub	sp, #20
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	603a      	str	r2, [r7, #0]
 8000306:	71fb      	strb	r3, [r7, #7]
 8000308:	460b      	mov	r3, r1
 800030a:	71bb      	strb	r3, [r7, #6]
//Generate stop after data received
//Wait until RXNE is empty
//Read the data into the data register

	//check if device is not busy
	while (I2C1->SR2 & (SR2_BUSY))//busy flag
 800030c:	bf00      	nop
 800030e:	4b34      	ldr	r3, [pc, #208]	@ (80003e0 <I2C1_byteRead+0xe4>)
 8000310:	699b      	ldr	r3, [r3, #24]
 8000312:	f003 0302 	and.w	r3, r3, #2
 8000316:	2b00      	cmp	r3, #0
 8000318:	d1f9      	bne.n	800030e <I2C1_byteRead+0x12>
	{

	}

	//generate start
	I2C1->CR1 |= CR1_START;
 800031a:	4b31      	ldr	r3, [pc, #196]	@ (80003e0 <I2C1_byteRead+0xe4>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4a30      	ldr	r2, [pc, #192]	@ (80003e0 <I2C1_byteRead+0xe4>)
 8000320:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000324:	6013      	str	r3, [r2, #0]

	//wait for SB (start bit is set
	while(!(I2C1->SR1 & (SR1_SB)))
 8000326:	bf00      	nop
 8000328:	4b2d      	ldr	r3, [pc, #180]	@ (80003e0 <I2C1_byteRead+0xe4>)
 800032a:	695b      	ldr	r3, [r3, #20]
 800032c:	f003 0301 	and.w	r3, r3, #1
 8000330:	2b00      	cmp	r3, #0
 8000332:	d0f9      	beq.n	8000328 <I2C1_byteRead+0x2c>
	{

	}

	//Transmit slave address + write
	I2C1->DR = saddr << 1;
 8000334:	79fb      	ldrb	r3, [r7, #7]
 8000336:	4a2a      	ldr	r2, [pc, #168]	@ (80003e0 <I2C1_byteRead+0xe4>)
 8000338:	005b      	lsls	r3, r3, #1
 800033a:	6113      	str	r3, [r2, #16]

	//Wait until address flag is set
	while(!(I2C1->SR1 & (SR1_ADDR)))
 800033c:	bf00      	nop
 800033e:	4b28      	ldr	r3, [pc, #160]	@ (80003e0 <I2C1_byteRead+0xe4>)
 8000340:	695b      	ldr	r3, [r3, #20]
 8000342:	f003 0302 	and.w	r3, r3, #2
 8000346:	2b00      	cmp	r3, #0
 8000348:	d0f9      	beq.n	800033e <I2C1_byteRead+0x42>
	{

	}

	//Clear the address flag by reading the SR2 register and storing it in tmp (reading clears the register)
	tmp = I2C1->SR2;
 800034a:	4b25      	ldr	r3, [pc, #148]	@ (80003e0 <I2C1_byteRead+0xe4>)
 800034c:	699b      	ldr	r3, [r3, #24]
 800034e:	60fb      	str	r3, [r7, #12]
	(void) tmp;
 8000350:	68fb      	ldr	r3, [r7, #12]

	//Send memory address
	I2C1->DR = maddr;
 8000352:	4a23      	ldr	r2, [pc, #140]	@ (80003e0 <I2C1_byteRead+0xe4>)
 8000354:	79bb      	ldrb	r3, [r7, #6]
 8000356:	6113      	str	r3, [r2, #16]


	//Wait until the data register is empty
	while(!(I2C1->SR1 & SR1_TXE))
 8000358:	bf00      	nop
 800035a:	4b21      	ldr	r3, [pc, #132]	@ (80003e0 <I2C1_byteRead+0xe4>)
 800035c:	695b      	ldr	r3, [r3, #20]
 800035e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000362:	2b00      	cmp	r3, #0
 8000364:	d0f9      	beq.n	800035a <I2C1_byteRead+0x5e>
	{

	}

	//Generate a restart
	I2C1->CR1 |= CR1_START;
 8000366:	4b1e      	ldr	r3, [pc, #120]	@ (80003e0 <I2C1_byteRead+0xe4>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	4a1d      	ldr	r2, [pc, #116]	@ (80003e0 <I2C1_byteRead+0xe4>)
 800036c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000370:	6013      	str	r3, [r2, #0]

	//Wait until start flag is set
	while(!(I2C1->SR1 & (SR1_SB)))
 8000372:	bf00      	nop
 8000374:	4b1a      	ldr	r3, [pc, #104]	@ (80003e0 <I2C1_byteRead+0xe4>)
 8000376:	695b      	ldr	r3, [r3, #20]
 8000378:	f003 0301 	and.w	r3, r3, #1
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0f9      	beq.n	8000374 <I2C1_byteRead+0x78>
		{

		}

	//Transmit slave address + Read
	I2C1->DR = saddr << 1 | 1;
 8000380:	79fb      	ldrb	r3, [r7, #7]
 8000382:	005b      	lsls	r3, r3, #1
 8000384:	f043 0201 	orr.w	r2, r3, #1
 8000388:	4b15      	ldr	r3, [pc, #84]	@ (80003e0 <I2C1_byteRead+0xe4>)
 800038a:	611a      	str	r2, [r3, #16]

	//Wait until address flag is set
	while(!(I2C1->SR1 & (SR1_ADDR)))
 800038c:	bf00      	nop
 800038e:	4b14      	ldr	r3, [pc, #80]	@ (80003e0 <I2C1_byteRead+0xe4>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	f003 0302 	and.w	r3, r3, #2
 8000396:	2b00      	cmp	r3, #0
 8000398:	d0f9      	beq.n	800038e <I2C1_byteRead+0x92>
	{

	}

	//Disable acknowledge
	I2C1->CR1 &= ~CR1_ACK;
 800039a:	4b11      	ldr	r3, [pc, #68]	@ (80003e0 <I2C1_byteRead+0xe4>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	4a10      	ldr	r2, [pc, #64]	@ (80003e0 <I2C1_byteRead+0xe4>)
 80003a0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80003a4:	6013      	str	r3, [r2, #0]

	//Clear address flag
	tmp = I2C1->SR2;
 80003a6:	4b0e      	ldr	r3, [pc, #56]	@ (80003e0 <I2C1_byteRead+0xe4>)
 80003a8:	699b      	ldr	r3, [r3, #24]
 80003aa:	60fb      	str	r3, [r7, #12]

	//Generate stop after data received
	I2C1->CR1 |= CR1_STOP;
 80003ac:	4b0c      	ldr	r3, [pc, #48]	@ (80003e0 <I2C1_byteRead+0xe4>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4a0b      	ldr	r2, [pc, #44]	@ (80003e0 <I2C1_byteRead+0xe4>)
 80003b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80003b6:	6013      	str	r3, [r2, #0]

	//Wait until RXNE is empty
	while(!(I2C1->SR1 & SR1_RXNE))
 80003b8:	bf00      	nop
 80003ba:	4b09      	ldr	r3, [pc, #36]	@ (80003e0 <I2C1_byteRead+0xe4>)
 80003bc:	695b      	ldr	r3, [r3, #20]
 80003be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d0f9      	beq.n	80003ba <I2C1_byteRead+0xbe>
	{

	}

	//Read the data into the data register
	*data++ = I2C1->DR;
 80003c6:	4b06      	ldr	r3, [pc, #24]	@ (80003e0 <I2C1_byteRead+0xe4>)
 80003c8:	6919      	ldr	r1, [r3, #16]
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	1c5a      	adds	r2, r3, #1
 80003ce:	603a      	str	r2, [r7, #0]
 80003d0:	b2ca      	uxtb	r2, r1
 80003d2:	701a      	strb	r2, [r3, #0]

}
 80003d4:	bf00      	nop
 80003d6:	3714      	adds	r7, #20
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr
 80003e0:	40005400 	.word	0x40005400

080003e4 <I2C1_burstRead>:



void I2C1_burstRead(char saddr, char maddr, int n, char *data)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b087      	sub	sp, #28
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	60ba      	str	r2, [r7, #8]
 80003ec:	607b      	str	r3, [r7, #4]
 80003ee:	4603      	mov	r3, r0
 80003f0:	73fb      	strb	r3, [r7, #15]
 80003f2:	460b      	mov	r3, r1
 80003f4:	73bb      	strb	r3, [r7, #14]
	volatile int tmp;

	//Wait until bus not busy
	while (I2C1->SR2 & (SR2_BUSY))//busy flag
 80003f6:	bf00      	nop
 80003f8:	4b47      	ldr	r3, [pc, #284]	@ (8000518 <I2C1_burstRead+0x134>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	f003 0302 	and.w	r3, r3, #2
 8000400:	2b00      	cmp	r3, #0
 8000402:	d1f9      	bne.n	80003f8 <I2C1_burstRead+0x14>
		{

		}

	//generate start
	I2C1->CR1 |= CR1_START;
 8000404:	4b44      	ldr	r3, [pc, #272]	@ (8000518 <I2C1_burstRead+0x134>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a43      	ldr	r2, [pc, #268]	@ (8000518 <I2C1_burstRead+0x134>)
 800040a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800040e:	6013      	str	r3, [r2, #0]

	//wait for SB (start bit is set
	while(!(I2C1->SR1 & (SR1_SB)))
 8000410:	bf00      	nop
 8000412:	4b41      	ldr	r3, [pc, #260]	@ (8000518 <I2C1_burstRead+0x134>)
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	f003 0301 	and.w	r3, r3, #1
 800041a:	2b00      	cmp	r3, #0
 800041c:	d0f9      	beq.n	8000412 <I2C1_burstRead+0x2e>
		{

		}

	//Transmit slave address + write
	I2C1->DR = saddr << 1;
 800041e:	7bfb      	ldrb	r3, [r7, #15]
 8000420:	4a3d      	ldr	r2, [pc, #244]	@ (8000518 <I2C1_burstRead+0x134>)
 8000422:	005b      	lsls	r3, r3, #1
 8000424:	6113      	str	r3, [r2, #16]

	//Wait until address flag is set
	while(!(I2C1->SR1 & (SR1_ADDR)))
 8000426:	bf00      	nop
 8000428:	4b3b      	ldr	r3, [pc, #236]	@ (8000518 <I2C1_burstRead+0x134>)
 800042a:	695b      	ldr	r3, [r3, #20]
 800042c:	f003 0302 	and.w	r3, r3, #2
 8000430:	2b00      	cmp	r3, #0
 8000432:	d0f9      	beq.n	8000428 <I2C1_burstRead+0x44>
		{

		}

	//Clear the address flag by reading the SR2 register and storing it in tmp (reading clears the register)
	tmp = I2C1->SR2;
 8000434:	4b38      	ldr	r3, [pc, #224]	@ (8000518 <I2C1_burstRead+0x134>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	617b      	str	r3, [r7, #20]
	(void) tmp;
 800043a:	697b      	ldr	r3, [r7, #20]

	//Wait until the transmitter is empty
	while(!(I2C1->SR1 & SR1_TXE))
 800043c:	bf00      	nop
 800043e:	4b36      	ldr	r3, [pc, #216]	@ (8000518 <I2C1_burstRead+0x134>)
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000446:	2b00      	cmp	r3, #0
 8000448:	d0f9      	beq.n	800043e <I2C1_burstRead+0x5a>
		{

		}

	//Send memory address
	I2C1->DR = maddr;
 800044a:	4a33      	ldr	r2, [pc, #204]	@ (8000518 <I2C1_burstRead+0x134>)
 800044c:	7bbb      	ldrb	r3, [r7, #14]
 800044e:	6113      	str	r3, [r2, #16]

	//Wait until the transmitter is empty
	while(!(I2C1->SR1 & SR1_TXE))
 8000450:	bf00      	nop
 8000452:	4b31      	ldr	r3, [pc, #196]	@ (8000518 <I2C1_burstRead+0x134>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800045a:	2b00      	cmp	r3, #0
 800045c:	d0f9      	beq.n	8000452 <I2C1_burstRead+0x6e>
		{

		}

	//Generate a restart
	I2C1->CR1 |= CR1_START;
 800045e:	4b2e      	ldr	r3, [pc, #184]	@ (8000518 <I2C1_burstRead+0x134>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4a2d      	ldr	r2, [pc, #180]	@ (8000518 <I2C1_burstRead+0x134>)
 8000464:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000468:	6013      	str	r3, [r2, #0]

	//wait for SB (start bit is set
	while(!(I2C1->SR1 & (SR1_SB)))
 800046a:	bf00      	nop
 800046c:	4b2a      	ldr	r3, [pc, #168]	@ (8000518 <I2C1_burstRead+0x134>)
 800046e:	695b      	ldr	r3, [r3, #20]
 8000470:	f003 0301 	and.w	r3, r3, #1
 8000474:	2b00      	cmp	r3, #0
 8000476:	d0f9      	beq.n	800046c <I2C1_burstRead+0x88>
		{

		}

	//Transmit slave address + read
	I2C1->DR = saddr << 1 | 1;
 8000478:	7bfb      	ldrb	r3, [r7, #15]
 800047a:	005b      	lsls	r3, r3, #1
 800047c:	f043 0201 	orr.w	r2, r3, #1
 8000480:	4b25      	ldr	r3, [pc, #148]	@ (8000518 <I2C1_burstRead+0x134>)
 8000482:	611a      	str	r2, [r3, #16]

	//Wait until address flag is set
	while(!(I2C1->SR1 & (SR1_ADDR)))
 8000484:	bf00      	nop
 8000486:	4b24      	ldr	r3, [pc, #144]	@ (8000518 <I2C1_burstRead+0x134>)
 8000488:	695b      	ldr	r3, [r3, #20]
 800048a:	f003 0302 	and.w	r3, r3, #2
 800048e:	2b00      	cmp	r3, #0
 8000490:	d0f9      	beq.n	8000486 <I2C1_burstRead+0xa2>
		{

		}

	//Clear the address flag by reading the SR2 register and storing it in tmp (reading clears the register)
	tmp = I2C1->SR2;
 8000492:	4b21      	ldr	r3, [pc, #132]	@ (8000518 <I2C1_burstRead+0x134>)
 8000494:	699b      	ldr	r3, [r3, #24]
 8000496:	617b      	str	r3, [r7, #20]

	//Enable acknowledge
	I2C1->CR1 |= CR1_ACK;
 8000498:	4b1f      	ldr	r3, [pc, #124]	@ (8000518 <I2C1_burstRead+0x134>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a1e      	ldr	r2, [pc, #120]	@ (8000518 <I2C1_burstRead+0x134>)
 800049e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80004a2:	6013      	str	r3, [r2, #0]

	while(n > 0U) //while there is data left to receive
 80004a4:	e02e      	b.n	8000504 <I2C1_burstRead+0x120>
		{
			//if there is a byte remaining to read
			if(n == 1U)
 80004a6:	68bb      	ldr	r3, [r7, #8]
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	d11a      	bne.n	80004e2 <I2C1_burstRead+0xfe>
				{
					//Disable the acknowledge
					I2C1->CR1 &= ~CR1_ACK;
 80004ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000518 <I2C1_burstRead+0x134>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a19      	ldr	r2, [pc, #100]	@ (8000518 <I2C1_burstRead+0x134>)
 80004b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80004b6:	6013      	str	r3, [r2, #0]

					//Generate a stop
					I2C1->CR1 |= CR1_STOP;
 80004b8:	4b17      	ldr	r3, [pc, #92]	@ (8000518 <I2C1_burstRead+0x134>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a16      	ldr	r2, [pc, #88]	@ (8000518 <I2C1_burstRead+0x134>)
 80004be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80004c2:	6013      	str	r3, [r2, #0]

					//Wait for RXNE flag set
					while (!(I2C1->SR1 & SR1_RXNE))
 80004c4:	bf00      	nop
 80004c6:	4b14      	ldr	r3, [pc, #80]	@ (8000518 <I2C1_burstRead+0x134>)
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d0f9      	beq.n	80004c6 <I2C1_burstRead+0xe2>
						{

						}

					//Read data from data register
					*data++ = I2C1->DR;
 80004d2:	4b11      	ldr	r3, [pc, #68]	@ (8000518 <I2C1_burstRead+0x134>)
 80004d4:	6919      	ldr	r1, [r3, #16]
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	1c5a      	adds	r2, r3, #1
 80004da:	607a      	str	r2, [r7, #4]
 80004dc:	b2ca      	uxtb	r2, r1
 80004de:	701a      	strb	r2, [r3, #0]

					break;
 80004e0:	e014      	b.n	800050c <I2C1_burstRead+0x128>
				}

			else
				{
					//Wait until RXNE flag is set
					while (!(I2C1->SR1 & SR1_RXNE))
 80004e2:	bf00      	nop
 80004e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000518 <I2C1_burstRead+0x134>)
 80004e6:	695b      	ldr	r3, [r3, #20]
 80004e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d0f9      	beq.n	80004e4 <I2C1_burstRead+0x100>
						{

						}

					//Read data from data register
					(*data++) = I2C1->DR;
 80004f0:	4b09      	ldr	r3, [pc, #36]	@ (8000518 <I2C1_burstRead+0x134>)
 80004f2:	6919      	ldr	r1, [r3, #16]
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	1c5a      	adds	r2, r3, #1
 80004f8:	607a      	str	r2, [r7, #4]
 80004fa:	b2ca      	uxtb	r2, r1
 80004fc:	701a      	strb	r2, [r3, #0]

					//decrement number of bytes to read
					n--;
 80004fe:	68bb      	ldr	r3, [r7, #8]
 8000500:	3b01      	subs	r3, #1
 8000502:	60bb      	str	r3, [r7, #8]
	while(n > 0U) //while there is data left to receive
 8000504:	68bb      	ldr	r3, [r7, #8]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d1cd      	bne.n	80004a6 <I2C1_burstRead+0xc2>
				}
			}
}
 800050a:	bf00      	nop
 800050c:	bf00      	nop
 800050e:	371c      	adds	r7, #28
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr
 8000518:	40005400 	.word	0x40005400

0800051c <I2C1_burstWrite>:


void I2C1_burstWrite(char saddr, char maddr, int n, char *data)
{
 800051c:	b480      	push	{r7}
 800051e:	b087      	sub	sp, #28
 8000520:	af00      	add	r7, sp, #0
 8000522:	60ba      	str	r2, [r7, #8]
 8000524:	607b      	str	r3, [r7, #4]
 8000526:	4603      	mov	r3, r0
 8000528:	73fb      	strb	r3, [r7, #15]
 800052a:	460b      	mov	r3, r1
 800052c:	73bb      	strb	r3, [r7, #14]
	volatile int tmp;

	//Wait until bus not busy
	while (I2C1->SR2 & (SR2_BUSY))//busy flag
 800052e:	bf00      	nop
 8000530:	4b28      	ldr	r3, [pc, #160]	@ (80005d4 <I2C1_burstWrite+0xb8>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	f003 0302 	and.w	r3, r3, #2
 8000538:	2b00      	cmp	r3, #0
 800053a:	d1f9      	bne.n	8000530 <I2C1_burstWrite+0x14>
		{

		}

	//generate start
	I2C1->CR1 |= CR1_START;
 800053c:	4b25      	ldr	r3, [pc, #148]	@ (80005d4 <I2C1_burstWrite+0xb8>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a24      	ldr	r2, [pc, #144]	@ (80005d4 <I2C1_burstWrite+0xb8>)
 8000542:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000546:	6013      	str	r3, [r2, #0]

	//wait for SB (start bit is set
	while(!(I2C1->SR1 & (SR1_SB)))
 8000548:	bf00      	nop
 800054a:	4b22      	ldr	r3, [pc, #136]	@ (80005d4 <I2C1_burstWrite+0xb8>)
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	f003 0301 	and.w	r3, r3, #1
 8000552:	2b00      	cmp	r3, #0
 8000554:	d0f9      	beq.n	800054a <I2C1_burstWrite+0x2e>
		{

		}

	//Transmit slave address + write
	I2C1->DR = saddr << 1;
 8000556:	7bfb      	ldrb	r3, [r7, #15]
 8000558:	4a1e      	ldr	r2, [pc, #120]	@ (80005d4 <I2C1_burstWrite+0xb8>)
 800055a:	005b      	lsls	r3, r3, #1
 800055c:	6113      	str	r3, [r2, #16]

	//Wait until address flag is set
	while(!(I2C1->SR1 & (SR1_ADDR)))
 800055e:	bf00      	nop
 8000560:	4b1c      	ldr	r3, [pc, #112]	@ (80005d4 <I2C1_burstWrite+0xb8>)
 8000562:	695b      	ldr	r3, [r3, #20]
 8000564:	f003 0302 	and.w	r3, r3, #2
 8000568:	2b00      	cmp	r3, #0
 800056a:	d0f9      	beq.n	8000560 <I2C1_burstWrite+0x44>
		{

		}

	//Clear the address flag by reading the SR2 register and storing it in tmp (reading clears the register)
	tmp = I2C1->SR2;
 800056c:	4b19      	ldr	r3, [pc, #100]	@ (80005d4 <I2C1_burstWrite+0xb8>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	613b      	str	r3, [r7, #16]
	(void) tmp;
 8000572:	693b      	ldr	r3, [r7, #16]
	//Wait until the data register is empty
	while(!(I2C1->SR1 & SR1_TXE))
 8000574:	bf00      	nop
 8000576:	4b17      	ldr	r3, [pc, #92]	@ (80005d4 <I2C1_burstWrite+0xb8>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800057e:	2b00      	cmp	r3, #0
 8000580:	d0f9      	beq.n	8000576 <I2C1_burstWrite+0x5a>
		{

		}

	//Send memory address
	I2C1->DR = maddr;
 8000582:	4a14      	ldr	r2, [pc, #80]	@ (80005d4 <I2C1_burstWrite+0xb8>)
 8000584:	7bbb      	ldrb	r3, [r7, #14]
 8000586:	6113      	str	r3, [r2, #16]

	for (int i = 0; i < n; i++)
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]
 800058c:	e00f      	b.n	80005ae <I2C1_burstWrite+0x92>
		{
			//Wait until the data register is empty
			while(!(I2C1->SR1 & SR1_TXE))
 800058e:	bf00      	nop
 8000590:	4b10      	ldr	r3, [pc, #64]	@ (80005d4 <I2C1_burstWrite+0xb8>)
 8000592:	695b      	ldr	r3, [r3, #20]
 8000594:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000598:	2b00      	cmp	r3, #0
 800059a:	d0f9      	beq.n	8000590 <I2C1_burstWrite+0x74>
				{

				}

			//Transmit memory address
			I2C1->DR = *data++;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	1c5a      	adds	r2, r3, #1
 80005a0:	607a      	str	r2, [r7, #4]
 80005a2:	781a      	ldrb	r2, [r3, #0]
 80005a4:	4b0b      	ldr	r3, [pc, #44]	@ (80005d4 <I2C1_burstWrite+0xb8>)
 80005a6:	611a      	str	r2, [r3, #16]
	for (int i = 0; i < n; i++)
 80005a8:	697b      	ldr	r3, [r7, #20]
 80005aa:	3301      	adds	r3, #1
 80005ac:	617b      	str	r3, [r7, #20]
 80005ae:	697a      	ldr	r2, [r7, #20]
 80005b0:	68bb      	ldr	r3, [r7, #8]
 80005b2:	429a      	cmp	r2, r3
 80005b4:	dbeb      	blt.n	800058e <I2C1_burstWrite+0x72>
		}
   //Wait for transfer to finish
	while (!(I2C1->SR1 & (SR1_BTF)))
 80005b6:	bf00      	nop
 80005b8:	4b06      	ldr	r3, [pc, #24]	@ (80005d4 <I2C1_burstWrite+0xb8>)
 80005ba:	695b      	ldr	r3, [r3, #20]
 80005bc:	f003 0304 	and.w	r3, r3, #4
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d0f9      	beq.n	80005b8 <I2C1_burstWrite+0x9c>
		{

		}
}
 80005c4:	bf00      	nop
 80005c6:	bf00      	nop
 80005c8:	371c      	adds	r7, #28
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	40005400 	.word	0x40005400

080005d8 <adxl_read_address>:
char data;

uint8_t data_rec[6];// location to record data read from device 6

void adxl_read_address(uint8_t reg)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	71fb      	strb	r3, [r7, #7]

	I2C1_byteRead(DEVICE_ADDR, reg, &data);
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	4a04      	ldr	r2, [pc, #16]	@ (80005f8 <adxl_read_address+0x20>)
 80005e6:	4619      	mov	r1, r3
 80005e8:	2053      	movs	r0, #83	@ 0x53
 80005ea:	f7ff fe87 	bl	80002fc <I2C1_byteRead>

}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	2000001c 	.word	0x2000001c

080005fc <adxl_write>:

void adxl_write(uint8_t reg, char value)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	460a      	mov	r2, r1
 8000606:	71fb      	strb	r3, [r7, #7]
 8000608:	4613      	mov	r3, r2
 800060a:	71bb      	strb	r3, [r7, #6]
	char data[1];
	data[0] = value;
 800060c:	79bb      	ldrb	r3, [r7, #6]
 800060e:	733b      	strb	r3, [r7, #12]

	I2C1_burstWrite(DEVICE_ADDR, reg, 1, data);
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	79f9      	ldrb	r1, [r7, #7]
 8000616:	2201      	movs	r2, #1
 8000618:	2053      	movs	r0, #83	@ 0x53
 800061a:	f7ff ff7f 	bl	800051c <I2C1_burstWrite>
}
 800061e:	bf00      	nop
 8000620:	3710      	adds	r7, #16
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
	...

08000628 <adxl_read_values>:

void adxl_read_values(uint8_t reg)//read 6 data registers burst read length to 6
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	71fb      	strb	r3, [r7, #7]
	I2C1_burstRead(DEVICE_ADDR, reg, 6, (char*)data_rec);
 8000632:	79f9      	ldrb	r1, [r7, #7]
 8000634:	4b04      	ldr	r3, [pc, #16]	@ (8000648 <adxl_read_values+0x20>)
 8000636:	2206      	movs	r2, #6
 8000638:	2053      	movs	r0, #83	@ 0x53
 800063a:	f7ff fed3 	bl	80003e4 <I2C1_burstRead>
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000020 	.word	0x20000020

0800064c <adxl_init>:


void adxl_init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	//Set data format range to +-4g
	//Reset all bits
	//Configure power control measure bit

	//Enable I2C
	I2C1_init();
 8000650:	f7ff fdba 	bl	80001c8 <I2C1_init>

	//read the DEVID this should be 0xE5
	adxl_read_address(DEVID_R);
 8000654:	2000      	movs	r0, #0
 8000656:	f7ff ffbf 	bl	80005d8 <adxl_read_address>

	//Set data format range to +-4g
	adxl_write (DATA_FORMAT_R, FOUR_G);
 800065a:	2101      	movs	r1, #1
 800065c:	2031      	movs	r0, #49	@ 0x31
 800065e:	f7ff ffcd 	bl	80005fc <adxl_write>

	//Reset all bits
	adxl_write (POWER_CTL_R, RESET);
 8000662:	2100      	movs	r1, #0
 8000664:	202d      	movs	r0, #45	@ 0x2d
 8000666:	f7ff ffc9 	bl	80005fc <adxl_write>

	//Configure power control measure bit
	adxl_write (POWER_CTL_R, SET_MEASURE_B);
 800066a:	2108      	movs	r1, #8
 800066c:	202d      	movs	r0, #45	@ 0x2d
 800066e:	f7ff ffc5 	bl	80005fc <adxl_write>
}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
	...

08000678 <main>:

extern uint8_t data_rec[6];// location to record data read from device 6


int main(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0


	adxl_init();
 800067c:	f7ff ffe6 	bl	800064c <adxl_init>

	while(1)
	{


		adxl_read_values(DATA_START_ADDR);
 8000680:	2032      	movs	r0, #50	@ 0x32
 8000682:	f7ff ffd1 	bl	8000628 <adxl_read_values>

		x = ((data_rec[1]<<8)|data_rec[0]);
 8000686:	4b26      	ldr	r3, [pc, #152]	@ (8000720 <main+0xa8>)
 8000688:	785b      	ldrb	r3, [r3, #1]
 800068a:	021b      	lsls	r3, r3, #8
 800068c:	b21a      	sxth	r2, r3
 800068e:	4b24      	ldr	r3, [pc, #144]	@ (8000720 <main+0xa8>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	b21b      	sxth	r3, r3
 8000694:	4313      	orrs	r3, r2
 8000696:	b21a      	sxth	r2, r3
 8000698:	4b22      	ldr	r3, [pc, #136]	@ (8000724 <main+0xac>)
 800069a:	801a      	strh	r2, [r3, #0]
		y = ((data_rec[3]<<8)|data_rec[2]);
 800069c:	4b20      	ldr	r3, [pc, #128]	@ (8000720 <main+0xa8>)
 800069e:	78db      	ldrb	r3, [r3, #3]
 80006a0:	021b      	lsls	r3, r3, #8
 80006a2:	b21a      	sxth	r2, r3
 80006a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000720 <main+0xa8>)
 80006a6:	789b      	ldrb	r3, [r3, #2]
 80006a8:	b21b      	sxth	r3, r3
 80006aa:	4313      	orrs	r3, r2
 80006ac:	b21a      	sxth	r2, r3
 80006ae:	4b1e      	ldr	r3, [pc, #120]	@ (8000728 <main+0xb0>)
 80006b0:	801a      	strh	r2, [r3, #0]
		z = ((data_rec[5]<<8)|data_rec[4]);
 80006b2:	4b1b      	ldr	r3, [pc, #108]	@ (8000720 <main+0xa8>)
 80006b4:	795b      	ldrb	r3, [r3, #5]
 80006b6:	021b      	lsls	r3, r3, #8
 80006b8:	b21a      	sxth	r2, r3
 80006ba:	4b19      	ldr	r3, [pc, #100]	@ (8000720 <main+0xa8>)
 80006bc:	791b      	ldrb	r3, [r3, #4]
 80006be:	b21b      	sxth	r3, r3
 80006c0:	4313      	orrs	r3, r2
 80006c2:	b21a      	sxth	r2, r3
 80006c4:	4b19      	ldr	r3, [pc, #100]	@ (800072c <main+0xb4>)
 80006c6:	801a      	strh	r2, [r3, #0]

		xg = (x / 8192.0f);
 80006c8:	4b16      	ldr	r3, [pc, #88]	@ (8000724 <main+0xac>)
 80006ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006ce:	ee07 3a90 	vmov	s15, r3
 80006d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006d6:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8000730 <main+0xb8>
 80006da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006de:	4b15      	ldr	r3, [pc, #84]	@ (8000734 <main+0xbc>)
 80006e0:	edc3 7a00 	vstr	s15, [r3]
		yg = (y / 8192.0f);
 80006e4:	4b10      	ldr	r3, [pc, #64]	@ (8000728 <main+0xb0>)
 80006e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006ea:	ee07 3a90 	vmov	s15, r3
 80006ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006f2:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8000730 <main+0xb8>
 80006f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000738 <main+0xc0>)
 80006fc:	edc3 7a00 	vstr	s15, [r3]
		zg = (z / 8192.0f);
 8000700:	4b0a      	ldr	r3, [pc, #40]	@ (800072c <main+0xb4>)
 8000702:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000706:	ee07 3a90 	vmov	s15, r3
 800070a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800070e:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8000730 <main+0xb8>
 8000712:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000716:	4b09      	ldr	r3, [pc, #36]	@ (800073c <main+0xc4>)
 8000718:	edc3 7a00 	vstr	s15, [r3]
		adxl_read_values(DATA_START_ADDR);
 800071c:	bf00      	nop
 800071e:	e7af      	b.n	8000680 <main+0x8>
 8000720:	20000020 	.word	0x20000020
 8000724:	20000026 	.word	0x20000026
 8000728:	20000028 	.word	0x20000028
 800072c:	2000002a 	.word	0x2000002a
 8000730:	46000000 	.word	0x46000000
 8000734:	2000002c 	.word	0x2000002c
 8000738:	20000030 	.word	0x20000030
 800073c:	20000034 	.word	0x20000034

08000740 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000740:	480d      	ldr	r0, [pc, #52]	@ (8000778 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000742:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000744:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000748:	480c      	ldr	r0, [pc, #48]	@ (800077c <LoopForever+0x6>)
  ldr r1, =_edata
 800074a:	490d      	ldr	r1, [pc, #52]	@ (8000780 <LoopForever+0xa>)
  ldr r2, =_sidata
 800074c:	4a0d      	ldr	r2, [pc, #52]	@ (8000784 <LoopForever+0xe>)
  movs r3, #0
 800074e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000750:	e002      	b.n	8000758 <LoopCopyDataInit>

08000752 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000752:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000754:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000756:	3304      	adds	r3, #4

08000758 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000758:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800075a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800075c:	d3f9      	bcc.n	8000752 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800075e:	4a0a      	ldr	r2, [pc, #40]	@ (8000788 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000760:	4c0a      	ldr	r4, [pc, #40]	@ (800078c <LoopForever+0x16>)
  movs r3, #0
 8000762:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000764:	e001      	b.n	800076a <LoopFillZerobss>

08000766 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000766:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000768:	3204      	adds	r2, #4

0800076a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800076a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800076c:	d3fb      	bcc.n	8000766 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800076e:	f000 f811 	bl	8000794 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000772:	f7ff ff81 	bl	8000678 <main>

08000776 <LoopForever>:

LoopForever:
  b LoopForever
 8000776:	e7fe      	b.n	8000776 <LoopForever>
  ldr   r0, =_estack
 8000778:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800077c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000780:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000784:	080007fc 	.word	0x080007fc
  ldr r2, =_sbss
 8000788:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800078c:	20000038 	.word	0x20000038

08000790 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000790:	e7fe      	b.n	8000790 <ADC_IRQHandler>
	...

08000794 <__libc_init_array>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	4d0d      	ldr	r5, [pc, #52]	@ (80007cc <__libc_init_array+0x38>)
 8000798:	4c0d      	ldr	r4, [pc, #52]	@ (80007d0 <__libc_init_array+0x3c>)
 800079a:	1b64      	subs	r4, r4, r5
 800079c:	10a4      	asrs	r4, r4, #2
 800079e:	2600      	movs	r6, #0
 80007a0:	42a6      	cmp	r6, r4
 80007a2:	d109      	bne.n	80007b8 <__libc_init_array+0x24>
 80007a4:	4d0b      	ldr	r5, [pc, #44]	@ (80007d4 <__libc_init_array+0x40>)
 80007a6:	4c0c      	ldr	r4, [pc, #48]	@ (80007d8 <__libc_init_array+0x44>)
 80007a8:	f000 f818 	bl	80007dc <_init>
 80007ac:	1b64      	subs	r4, r4, r5
 80007ae:	10a4      	asrs	r4, r4, #2
 80007b0:	2600      	movs	r6, #0
 80007b2:	42a6      	cmp	r6, r4
 80007b4:	d105      	bne.n	80007c2 <__libc_init_array+0x2e>
 80007b6:	bd70      	pop	{r4, r5, r6, pc}
 80007b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80007bc:	4798      	blx	r3
 80007be:	3601      	adds	r6, #1
 80007c0:	e7ee      	b.n	80007a0 <__libc_init_array+0xc>
 80007c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80007c6:	4798      	blx	r3
 80007c8:	3601      	adds	r6, #1
 80007ca:	e7f2      	b.n	80007b2 <__libc_init_array+0x1e>
 80007cc:	080007f4 	.word	0x080007f4
 80007d0:	080007f4 	.word	0x080007f4
 80007d4:	080007f4 	.word	0x080007f4
 80007d8:	080007f8 	.word	0x080007f8

080007dc <_init>:
 80007dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007de:	bf00      	nop
 80007e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007e2:	bc08      	pop	{r3}
 80007e4:	469e      	mov	lr, r3
 80007e6:	4770      	bx	lr

080007e8 <_fini>:
 80007e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ea:	bf00      	nop
 80007ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007ee:	bc08      	pop	{r3}
 80007f0:	469e      	mov	lr, r3
 80007f2:	4770      	bx	lr
