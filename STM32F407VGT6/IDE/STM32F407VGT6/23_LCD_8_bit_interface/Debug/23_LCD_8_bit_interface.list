
23_LCD_8_bit_interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000284  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800040c  08000414  00001414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800040c  0800040c  00001414  2**0
                  CONTENTS
  4 .ARM          00000000  0800040c  0800040c  00001414  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800040c  08000414  00001414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800040c  0800040c  0000140c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000410  08000410  00001410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001414  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001414  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000467  00000000  00000000  00001444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001fc  00000000  00000000  000018ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000088  00000000  00000000  00001aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000057  00000000  00000000  00001b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000e4a  00000000  00000000  00001b87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000df1  00000000  00000000  000029d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008be1b  00000000  00000000  000037c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0008f5dd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000114  00000000  00000000  0008f620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000087  00000000  00000000  0008f734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080003f4 	.word	0x080003f4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080003f4 	.word	0x080003f4

080001c8 <GPIO_init>:

void delayMs(int delay);


void GPIO_init (void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |=0x06;//Enable GPIOB bit 1 and GPIOC bit 2
 80001cc:	4b0f      	ldr	r3, [pc, #60]	@ (800020c <GPIO_init+0x44>)
 80001ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001d0:	4a0e      	ldr	r2, [pc, #56]	@ (800020c <GPIO_init+0x44>)
 80001d2:	f043 0306 	orr.w	r3, r3, #6
 80001d6:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOB->MODER |= 0x5400;//Set pins 5, 6 & 7 to general purpose output
 80001d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000210 <GPIO_init+0x48>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a0c      	ldr	r2, [pc, #48]	@ (8000210 <GPIO_init+0x48>)
 80001de:	f443 43a8 	orr.w	r3, r3, #21504	@ 0x5400
 80001e2:	6013      	str	r3, [r2, #0]

	GPIOB->BSRR |= 0x00C;  //Set EN and RW low
 80001e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000210 <GPIO_init+0x48>)
 80001e6:	699b      	ldr	r3, [r3, #24]
 80001e8:	4a09      	ldr	r2, [pc, #36]	@ (8000210 <GPIO_init+0x48>)
 80001ea:	f043 030c 	orr.w	r3, r3, #12
 80001ee:	6193      	str	r3, [r2, #24]
	GPIOC->MODER |= 0x00005555;//Set data pins Do - D7 as O/P
 80001f0:	4b08      	ldr	r3, [pc, #32]	@ (8000214 <GPIO_init+0x4c>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a07      	ldr	r2, [pc, #28]	@ (8000214 <GPIO_init+0x4c>)
 80001f6:	f443 43aa 	orr.w	r3, r3, #21760	@ 0x5500
 80001fa:	f043 0355 	orr.w	r3, r3, #85	@ 0x55
 80001fe:	6013      	str	r3, [r2, #0]
}
 8000200:	bf00      	nop
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	40023800 	.word	0x40023800
 8000210:	40020400 	.word	0x40020400
 8000214:	40020800 	.word	0x40020800

08000218 <LCD_init>:

void LCD_init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	GPIO_init();
 800021c:	f7ff ffd4 	bl	80001c8 <GPIO_init>
	delayMs(30);
 8000220:	201e      	movs	r0, #30
 8000222:	f000 f85d 	bl	80002e0 <delayMs>
	LCD_command(0x30);
 8000226:	2030      	movs	r0, #48	@ 0x30
 8000228:	f000 f81a 	bl	8000260 <LCD_command>
	delayMs(10);
 800022c:	200a      	movs	r0, #10
 800022e:	f000 f857 	bl	80002e0 <delayMs>
	LCD_command(0x30);
 8000232:	2030      	movs	r0, #48	@ 0x30
 8000234:	f000 f814 	bl	8000260 <LCD_command>
	delayMs(1);
 8000238:	2001      	movs	r0, #1
 800023a:	f000 f851 	bl	80002e0 <delayMs>
	LCD_command(0x30);
 800023e:	2030      	movs	r0, #48	@ 0x30
 8000240:	f000 f80e 	bl	8000260 <LCD_command>

	LCD_command(0x38);//Set 8 bit data mode, 2 lines 5x7 font
 8000244:	2038      	movs	r0, #56	@ 0x38
 8000246:	f000 f80b 	bl	8000260 <LCD_command>
	LCD_command(0x06);//move cursor right
 800024a:	2006      	movs	r0, #6
 800024c:	f000 f808 	bl	8000260 <LCD_command>
	LCD_command(0x01);//CLear screen, move cursor home
 8000250:	2001      	movs	r0, #1
 8000252:	f000 f805 	bl	8000260 <LCD_command>
	LCD_command(0x0F);//Turn display on and blink cursor
 8000256:	200f      	movs	r0, #15
 8000258:	f000 f802 	bl	8000260 <LCD_command>
}
 800025c:	bf00      	nop
 800025e:	bd80      	pop	{r7, pc}

08000260 <LCD_command>:

void LCD_command(unsigned char command)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0
 8000266:	4603      	mov	r3, r0
 8000268:	71fb      	strb	r3, [r7, #7]
	GPIOB->BSRR = (RS|RW)<<16;//RS=o r/w =0
 800026a:	4b0a      	ldr	r3, [pc, #40]	@ (8000294 <LCD_command+0x34>)
 800026c:	f44f 02c0 	mov.w	r2, #6291456	@ 0x600000
 8000270:	619a      	str	r2, [r3, #24]
	GPIOC->ODR = command;
 8000272:	4a09      	ldr	r2, [pc, #36]	@ (8000298 <LCD_command+0x38>)
 8000274:	79fb      	ldrb	r3, [r7, #7]
 8000276:	6153      	str	r3, [r2, #20]
	GPIOB->BSRR = EN;
 8000278:	4b06      	ldr	r3, [pc, #24]	@ (8000294 <LCD_command+0x34>)
 800027a:	2280      	movs	r2, #128	@ 0x80
 800027c:	619a      	str	r2, [r3, #24]
	delayMs(0);
 800027e:	2000      	movs	r0, #0
 8000280:	f000 f82e 	bl	80002e0 <delayMs>
	GPIOB->BSRR = EN<<16; //clears the EN bit
 8000284:	4b03      	ldr	r3, [pc, #12]	@ (8000294 <LCD_command+0x34>)
 8000286:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800028a:	619a      	str	r2, [r3, #24]
}
 800028c:	bf00      	nop
 800028e:	3708      	adds	r7, #8
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	40020400 	.word	0x40020400
 8000298:	40020800 	.word	0x40020800

0800029c <LCD_data>:

void LCD_data(char data)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4603      	mov	r3, r0
 80002a4:	71fb      	strb	r3, [r7, #7]
	GPIOB->BSRR = RS; //Set RS bit
 80002a6:	4b0c      	ldr	r3, [pc, #48]	@ (80002d8 <LCD_data+0x3c>)
 80002a8:	2220      	movs	r2, #32
 80002aa:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR = RW <<16; //Set the RW line to 0
 80002ac:	4b0a      	ldr	r3, [pc, #40]	@ (80002d8 <LCD_data+0x3c>)
 80002ae:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80002b2:	619a      	str	r2, [r3, #24]
	GPIOC->ODR = data;//Place date into bus
 80002b4:	4a09      	ldr	r2, [pc, #36]	@ (80002dc <LCD_data+0x40>)
 80002b6:	79fb      	ldrb	r3, [r7, #7]
 80002b8:	6153      	str	r3, [r2, #20]
	GPIOB->BSRR = EN;//Set EN
 80002ba:	4b07      	ldr	r3, [pc, #28]	@ (80002d8 <LCD_data+0x3c>)
 80002bc:	2280      	movs	r2, #128	@ 0x80
 80002be:	619a      	str	r2, [r3, #24]
	delayMs(0);
 80002c0:	2000      	movs	r0, #0
 80002c2:	f000 f80d 	bl	80002e0 <delayMs>
	GPIOB->BSRR = EN<<16;//Clear EN
 80002c6:	4b04      	ldr	r3, [pc, #16]	@ (80002d8 <LCD_data+0x3c>)
 80002c8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80002cc:	619a      	str	r2, [r3, #24]
}
 80002ce:	bf00      	nop
 80002d0:	3708      	adds	r7, #8
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40020400 	.word	0x40020400
 80002dc:	40020800 	.word	0x40020800

080002e0 <delayMs>:

void delayMs(int delay)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b085      	sub	sp, #20
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
	int i;
	for(;delay>0;delay--)
 80002e8:	e00d      	b.n	8000306 <delayMs+0x26>
	{
		for(i=0;i<3195;i++)
 80002ea:	2300      	movs	r3, #0
 80002ec:	60fb      	str	r3, [r7, #12]
 80002ee:	e002      	b.n	80002f6 <delayMs+0x16>
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	3301      	adds	r3, #1
 80002f4:	60fb      	str	r3, [r7, #12]
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	f640 427a 	movw	r2, #3194	@ 0xc7a
 80002fc:	4293      	cmp	r3, r2
 80002fe:	ddf7      	ble.n	80002f0 <delayMs+0x10>
	for(;delay>0;delay--)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	3b01      	subs	r3, #1
 8000304:	607b      	str	r3, [r7, #4]
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	2b00      	cmp	r3, #0
 800030a:	dcee      	bgt.n	80002ea <delayMs+0xa>
		{

		}
	}
}
 800030c:	bf00      	nop
 800030e:	bf00      	nop
 8000310:	3714      	adds	r7, #20
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr

0800031a <main>:




int main(void)
{
 800031a:	b580      	push	{r7, lr}
 800031c:	af00      	add	r7, sp, #0

	LCD_init();
 800031e:	f7ff ff7b 	bl	8000218 <LCD_init>


	while(1)
	{

		LCD_data('H');
 8000322:	2048      	movs	r0, #72	@ 0x48
 8000324:	f7ff ffba 	bl	800029c <LCD_data>
		LCD_data('e');
 8000328:	2065      	movs	r0, #101	@ 0x65
 800032a:	f7ff ffb7 	bl	800029c <LCD_data>
		LCD_data('l');
 800032e:	206c      	movs	r0, #108	@ 0x6c
 8000330:	f7ff ffb4 	bl	800029c <LCD_data>
		LCD_data('l');
 8000334:	206c      	movs	r0, #108	@ 0x6c
 8000336:	f7ff ffb1 	bl	800029c <LCD_data>
		LCD_data('o');
 800033a:	206f      	movs	r0, #111	@ 0x6f
 800033c:	f7ff ffae 	bl	800029c <LCD_data>
		LCD_data('!');
 8000340:	2021      	movs	r0, #33	@ 0x21
 8000342:	f7ff ffab 	bl	800029c <LCD_data>

		LCD_command(1);//clears the screen
 8000346:	2001      	movs	r0, #1
 8000348:	f7ff ff8a 	bl	8000260 <LCD_command>
delayMs(500);
 800034c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000350:	f7ff ffc6 	bl	80002e0 <delayMs>
	{
 8000354:	bf00      	nop
 8000356:	e7e4      	b.n	8000322 <main+0x8>

08000358 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000358:	480d      	ldr	r0, [pc, #52]	@ (8000390 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800035a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800035c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000360:	480c      	ldr	r0, [pc, #48]	@ (8000394 <LoopForever+0x6>)
  ldr r1, =_edata
 8000362:	490d      	ldr	r1, [pc, #52]	@ (8000398 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000364:	4a0d      	ldr	r2, [pc, #52]	@ (800039c <LoopForever+0xe>)
  movs r3, #0
 8000366:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000368:	e002      	b.n	8000370 <LoopCopyDataInit>

0800036a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800036a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800036c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800036e:	3304      	adds	r3, #4

08000370 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000370:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000372:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000374:	d3f9      	bcc.n	800036a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000376:	4a0a      	ldr	r2, [pc, #40]	@ (80003a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000378:	4c0a      	ldr	r4, [pc, #40]	@ (80003a4 <LoopForever+0x16>)
  movs r3, #0
 800037a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800037c:	e001      	b.n	8000382 <LoopFillZerobss>

0800037e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800037e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000380:	3204      	adds	r2, #4

08000382 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000382:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000384:	d3fb      	bcc.n	800037e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000386:	f000 f811 	bl	80003ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800038a:	f7ff ffc6 	bl	800031a <main>

0800038e <LoopForever>:

LoopForever:
  b LoopForever
 800038e:	e7fe      	b.n	800038e <LoopForever>
  ldr   r0, =_estack
 8000390:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000398:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800039c:	08000414 	.word	0x08000414
  ldr r2, =_sbss
 80003a0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003a4:	2000001c 	.word	0x2000001c

080003a8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003a8:	e7fe      	b.n	80003a8 <ADC_IRQHandler>
	...

080003ac <__libc_init_array>:
 80003ac:	b570      	push	{r4, r5, r6, lr}
 80003ae:	4d0d      	ldr	r5, [pc, #52]	@ (80003e4 <__libc_init_array+0x38>)
 80003b0:	4c0d      	ldr	r4, [pc, #52]	@ (80003e8 <__libc_init_array+0x3c>)
 80003b2:	1b64      	subs	r4, r4, r5
 80003b4:	10a4      	asrs	r4, r4, #2
 80003b6:	2600      	movs	r6, #0
 80003b8:	42a6      	cmp	r6, r4
 80003ba:	d109      	bne.n	80003d0 <__libc_init_array+0x24>
 80003bc:	4d0b      	ldr	r5, [pc, #44]	@ (80003ec <__libc_init_array+0x40>)
 80003be:	4c0c      	ldr	r4, [pc, #48]	@ (80003f0 <__libc_init_array+0x44>)
 80003c0:	f000 f818 	bl	80003f4 <_init>
 80003c4:	1b64      	subs	r4, r4, r5
 80003c6:	10a4      	asrs	r4, r4, #2
 80003c8:	2600      	movs	r6, #0
 80003ca:	42a6      	cmp	r6, r4
 80003cc:	d105      	bne.n	80003da <__libc_init_array+0x2e>
 80003ce:	bd70      	pop	{r4, r5, r6, pc}
 80003d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d4:	4798      	blx	r3
 80003d6:	3601      	adds	r6, #1
 80003d8:	e7ee      	b.n	80003b8 <__libc_init_array+0xc>
 80003da:	f855 3b04 	ldr.w	r3, [r5], #4
 80003de:	4798      	blx	r3
 80003e0:	3601      	adds	r6, #1
 80003e2:	e7f2      	b.n	80003ca <__libc_init_array+0x1e>
 80003e4:	0800040c 	.word	0x0800040c
 80003e8:	0800040c 	.word	0x0800040c
 80003ec:	0800040c 	.word	0x0800040c
 80003f0:	08000410 	.word	0x08000410

080003f4 <_init>:
 80003f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003f6:	bf00      	nop
 80003f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fa:	bc08      	pop	{r3}
 80003fc:	469e      	mov	lr, r3
 80003fe:	4770      	bx	lr

08000400 <_fini>:
 8000400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000402:	bf00      	nop
 8000404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000406:	bc08      	pop	{r3}
 8000408:	469e      	mov	lr, r3
 800040a:	4770      	bx	lr
