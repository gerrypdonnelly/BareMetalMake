
3_GPIO_BSRR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000258  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003e0  080003e8  000013e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003e0  080003e0  000013e8  2**0
                  CONTENTS
  4 .ARM          00000000  080003e0  080003e0  000013e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003e0  080003e8  000013e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003e0  080003e0  000013e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003e4  080003e4  000013e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000013e8  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000013e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000003b7  00000000  00000000  00001418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000103  00000000  00000000  000017cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  000018d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000002d  00000000  00000000  00001920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000181d5  00000000  00000000  0000194d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000006bf  00000000  00000000  00019b22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088434  00000000  00000000  0001a1e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a2615  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000058  00000000  00000000  000a2658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  000a26b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080003c8 	.word	0x080003c8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080003c8 	.word	0x080003c8

080001c8 <main>:
#define RED_LED_PIN					PIN12
#define GREEN_LED_PIN				PIN14
#define BLUE_LED_PIN				PIN15

int main(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b089      	sub	sp, #36	@ 0x24
 80001cc:	af00      	add	r7, sp, #0
	//1. Enable clock access to GPIOD
	RCC->AHB1ENR |=GPIODEN;
 80001ce:	4b53      	ldr	r3, [pc, #332]	@ (800031c <main+0x154>)
 80001d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001d2:	4a52      	ldr	r2, [pc, #328]	@ (800031c <main+0x154>)
 80001d4:	f043 0308 	orr.w	r3, r3, #8
 80001d8:	6313      	str	r3, [r2, #48]	@ 0x30

	//2. Set Pins as OP pins
	GPIOD->MODER |= (1UL<<24); //Pin12
 80001da:	4b51      	ldr	r3, [pc, #324]	@ (8000320 <main+0x158>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	4a50      	ldr	r2, [pc, #320]	@ (8000320 <main+0x158>)
 80001e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80001e4:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &=~(1UL<<25);
 80001e6:	4b4e      	ldr	r3, [pc, #312]	@ (8000320 <main+0x158>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	4a4d      	ldr	r2, [pc, #308]	@ (8000320 <main+0x158>)
 80001ec:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80001f0:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= (1UL<<26); //Pin13
 80001f2:	4b4b      	ldr	r3, [pc, #300]	@ (8000320 <main+0x158>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a4a      	ldr	r2, [pc, #296]	@ (8000320 <main+0x158>)
 80001f8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80001fc:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &=~(1UL<<27);
 80001fe:	4b48      	ldr	r3, [pc, #288]	@ (8000320 <main+0x158>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	4a47      	ldr	r2, [pc, #284]	@ (8000320 <main+0x158>)
 8000204:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8000208:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= (1UL<<28); //Pin14
 800020a:	4b45      	ldr	r3, [pc, #276]	@ (8000320 <main+0x158>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4a44      	ldr	r2, [pc, #272]	@ (8000320 <main+0x158>)
 8000210:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000214:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &=~(1UL<<29);
 8000216:	4b42      	ldr	r3, [pc, #264]	@ (8000320 <main+0x158>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	4a41      	ldr	r2, [pc, #260]	@ (8000320 <main+0x158>)
 800021c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8000220:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= (1UL<<30); //Pin15
 8000222:	4b3f      	ldr	r3, [pc, #252]	@ (8000320 <main+0x158>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	4a3e      	ldr	r2, [pc, #248]	@ (8000320 <main+0x158>)
 8000228:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800022c:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &=~(1UL<<31);
 800022e:	4b3c      	ldr	r3, [pc, #240]	@ (8000320 <main+0x158>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	4a3b      	ldr	r2, [pc, #236]	@ (8000320 <main+0x158>)
 8000234:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000238:	6013      	str	r3, [r2, #0]

	while(1)
	{
		GPIOD->BSRR = ORANGE_LED_PIN;
 800023a:	4b39      	ldr	r3, [pc, #228]	@ (8000320 <main+0x158>)
 800023c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000240:	619a      	str	r2, [r3, #24]
		for(int i=0; i<100000; i++){}
 8000242:	2300      	movs	r3, #0
 8000244:	61fb      	str	r3, [r7, #28]
 8000246:	e002      	b.n	800024e <main+0x86>
 8000248:	69fb      	ldr	r3, [r7, #28]
 800024a:	3301      	adds	r3, #1
 800024c:	61fb      	str	r3, [r7, #28]
 800024e:	69fb      	ldr	r3, [r7, #28]
 8000250:	4a34      	ldr	r2, [pc, #208]	@ (8000324 <main+0x15c>)
 8000252:	4293      	cmp	r3, r2
 8000254:	ddf8      	ble.n	8000248 <main+0x80>
		GPIOD->BSRR = (1UL<<29);
 8000256:	4b32      	ldr	r3, [pc, #200]	@ (8000320 <main+0x158>)
 8000258:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800025c:	619a      	str	r2, [r3, #24]
		for(int i=0; i<100000; i++){}
 800025e:	2300      	movs	r3, #0
 8000260:	61bb      	str	r3, [r7, #24]
 8000262:	e002      	b.n	800026a <main+0xa2>
 8000264:	69bb      	ldr	r3, [r7, #24]
 8000266:	3301      	adds	r3, #1
 8000268:	61bb      	str	r3, [r7, #24]
 800026a:	69bb      	ldr	r3, [r7, #24]
 800026c:	4a2d      	ldr	r2, [pc, #180]	@ (8000324 <main+0x15c>)
 800026e:	4293      	cmp	r3, r2
 8000270:	ddf8      	ble.n	8000264 <main+0x9c>

		GPIOD->BSRR = RED_LED_PIN;
 8000272:	4b2b      	ldr	r3, [pc, #172]	@ (8000320 <main+0x158>)
 8000274:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000278:	619a      	str	r2, [r3, #24]
		for(int i=0; i<100000; i++){}
 800027a:	2300      	movs	r3, #0
 800027c:	617b      	str	r3, [r7, #20]
 800027e:	e002      	b.n	8000286 <main+0xbe>
 8000280:	697b      	ldr	r3, [r7, #20]
 8000282:	3301      	adds	r3, #1
 8000284:	617b      	str	r3, [r7, #20]
 8000286:	697b      	ldr	r3, [r7, #20]
 8000288:	4a26      	ldr	r2, [pc, #152]	@ (8000324 <main+0x15c>)
 800028a:	4293      	cmp	r3, r2
 800028c:	ddf8      	ble.n	8000280 <main+0xb8>
		GPIOD->BSRR = (1UL<<28);
 800028e:	4b24      	ldr	r3, [pc, #144]	@ (8000320 <main+0x158>)
 8000290:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000294:	619a      	str	r2, [r3, #24]
		for(int i=0; i<100000; i++){}
 8000296:	2300      	movs	r3, #0
 8000298:	613b      	str	r3, [r7, #16]
 800029a:	e002      	b.n	80002a2 <main+0xda>
 800029c:	693b      	ldr	r3, [r7, #16]
 800029e:	3301      	adds	r3, #1
 80002a0:	613b      	str	r3, [r7, #16]
 80002a2:	693b      	ldr	r3, [r7, #16]
 80002a4:	4a1f      	ldr	r2, [pc, #124]	@ (8000324 <main+0x15c>)
 80002a6:	4293      	cmp	r3, r2
 80002a8:	ddf8      	ble.n	800029c <main+0xd4>

		GPIOD->BSRR = BLUE_LED_PIN;
 80002aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000320 <main+0x158>)
 80002ac:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80002b0:	619a      	str	r2, [r3, #24]
		for(int i=0; i<100000; i++){}
 80002b2:	2300      	movs	r3, #0
 80002b4:	60fb      	str	r3, [r7, #12]
 80002b6:	e002      	b.n	80002be <main+0xf6>
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	3301      	adds	r3, #1
 80002bc:	60fb      	str	r3, [r7, #12]
 80002be:	68fb      	ldr	r3, [r7, #12]
 80002c0:	4a18      	ldr	r2, [pc, #96]	@ (8000324 <main+0x15c>)
 80002c2:	4293      	cmp	r3, r2
 80002c4:	ddf8      	ble.n	80002b8 <main+0xf0>
		GPIOD->BSRR = (1UL<<31);
 80002c6:	4b16      	ldr	r3, [pc, #88]	@ (8000320 <main+0x158>)
 80002c8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80002cc:	619a      	str	r2, [r3, #24]
		for(int i=0; i<100000; i++){}
 80002ce:	2300      	movs	r3, #0
 80002d0:	60bb      	str	r3, [r7, #8]
 80002d2:	e002      	b.n	80002da <main+0x112>
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	3301      	adds	r3, #1
 80002d8:	60bb      	str	r3, [r7, #8]
 80002da:	68bb      	ldr	r3, [r7, #8]
 80002dc:	4a11      	ldr	r2, [pc, #68]	@ (8000324 <main+0x15c>)
 80002de:	4293      	cmp	r3, r2
 80002e0:	ddf8      	ble.n	80002d4 <main+0x10c>

		GPIOD->BSRR = GREEN_LED_PIN;
 80002e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000320 <main+0x158>)
 80002e4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80002e8:	619a      	str	r2, [r3, #24]
		for(int i=0; i<100000; i++){}
 80002ea:	2300      	movs	r3, #0
 80002ec:	607b      	str	r3, [r7, #4]
 80002ee:	e002      	b.n	80002f6 <main+0x12e>
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	3301      	adds	r3, #1
 80002f4:	607b      	str	r3, [r7, #4]
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	4a0a      	ldr	r2, [pc, #40]	@ (8000324 <main+0x15c>)
 80002fa:	4293      	cmp	r3, r2
 80002fc:	ddf8      	ble.n	80002f0 <main+0x128>
		GPIOD->BSRR = (1UL<<30);
 80002fe:	4b08      	ldr	r3, [pc, #32]	@ (8000320 <main+0x158>)
 8000300:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000304:	619a      	str	r2, [r3, #24]
		for(int i=0; i<1000000; i++){}
 8000306:	2300      	movs	r3, #0
 8000308:	603b      	str	r3, [r7, #0]
 800030a:	e002      	b.n	8000312 <main+0x14a>
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	3301      	adds	r3, #1
 8000310:	603b      	str	r3, [r7, #0]
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	4a04      	ldr	r2, [pc, #16]	@ (8000328 <main+0x160>)
 8000316:	4293      	cmp	r3, r2
 8000318:	ddf8      	ble.n	800030c <main+0x144>
		GPIOD->BSRR = ORANGE_LED_PIN;
 800031a:	e78e      	b.n	800023a <main+0x72>
 800031c:	40023800 	.word	0x40023800
 8000320:	40020c00 	.word	0x40020c00
 8000324:	0001869f 	.word	0x0001869f
 8000328:	000f423f 	.word	0x000f423f

0800032c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800032c:	480d      	ldr	r0, [pc, #52]	@ (8000364 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800032e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000330:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000334:	480c      	ldr	r0, [pc, #48]	@ (8000368 <LoopForever+0x6>)
  ldr r1, =_edata
 8000336:	490d      	ldr	r1, [pc, #52]	@ (800036c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000338:	4a0d      	ldr	r2, [pc, #52]	@ (8000370 <LoopForever+0xe>)
  movs r3, #0
 800033a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800033c:	e002      	b.n	8000344 <LoopCopyDataInit>

0800033e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800033e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000342:	3304      	adds	r3, #4

08000344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000348:	d3f9      	bcc.n	800033e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800034a:	4a0a      	ldr	r2, [pc, #40]	@ (8000374 <LoopForever+0x12>)
  ldr r4, =_ebss
 800034c:	4c0a      	ldr	r4, [pc, #40]	@ (8000378 <LoopForever+0x16>)
  movs r3, #0
 800034e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000350:	e001      	b.n	8000356 <LoopFillZerobss>

08000352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000354:	3204      	adds	r2, #4

08000356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000358:	d3fb      	bcc.n	8000352 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800035a:	f000 f811 	bl	8000380 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800035e:	f7ff ff33 	bl	80001c8 <main>

08000362 <LoopForever>:

LoopForever:
  b LoopForever
 8000362:	e7fe      	b.n	8000362 <LoopForever>
  ldr   r0, =_estack
 8000364:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800036c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000370:	080003e8 	.word	0x080003e8
  ldr r2, =_sbss
 8000374:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000378:	2000001c 	.word	0x2000001c

0800037c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800037c:	e7fe      	b.n	800037c <ADC_IRQHandler>
	...

08000380 <__libc_init_array>:
 8000380:	b570      	push	{r4, r5, r6, lr}
 8000382:	4d0d      	ldr	r5, [pc, #52]	@ (80003b8 <__libc_init_array+0x38>)
 8000384:	4c0d      	ldr	r4, [pc, #52]	@ (80003bc <__libc_init_array+0x3c>)
 8000386:	1b64      	subs	r4, r4, r5
 8000388:	10a4      	asrs	r4, r4, #2
 800038a:	2600      	movs	r6, #0
 800038c:	42a6      	cmp	r6, r4
 800038e:	d109      	bne.n	80003a4 <__libc_init_array+0x24>
 8000390:	4d0b      	ldr	r5, [pc, #44]	@ (80003c0 <__libc_init_array+0x40>)
 8000392:	4c0c      	ldr	r4, [pc, #48]	@ (80003c4 <__libc_init_array+0x44>)
 8000394:	f000 f818 	bl	80003c8 <_init>
 8000398:	1b64      	subs	r4, r4, r5
 800039a:	10a4      	asrs	r4, r4, #2
 800039c:	2600      	movs	r6, #0
 800039e:	42a6      	cmp	r6, r4
 80003a0:	d105      	bne.n	80003ae <__libc_init_array+0x2e>
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003a8:	4798      	blx	r3
 80003aa:	3601      	adds	r6, #1
 80003ac:	e7ee      	b.n	800038c <__libc_init_array+0xc>
 80003ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80003b2:	4798      	blx	r3
 80003b4:	3601      	adds	r6, #1
 80003b6:	e7f2      	b.n	800039e <__libc_init_array+0x1e>
 80003b8:	080003e0 	.word	0x080003e0
 80003bc:	080003e0 	.word	0x080003e0
 80003c0:	080003e0 	.word	0x080003e0
 80003c4:	080003e4 	.word	0x080003e4

080003c8 <_init>:
 80003c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ca:	bf00      	nop
 80003cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ce:	bc08      	pop	{r3}
 80003d0:	469e      	mov	lr, r3
 80003d2:	4770      	bx	lr

080003d4 <_fini>:
 80003d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003d6:	bf00      	nop
 80003d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003da:	bc08      	pop	{r3}
 80003dc:	469e      	mov	lr, r3
 80003de:	4770      	bx	lr
