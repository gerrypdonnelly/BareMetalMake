
14_Input_capture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002dc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000464  0800046c  0000146c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000464  08000464  0000146c  2**0
                  CONTENTS
  4 .ARM          00000000  08000464  08000464  0000146c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000464  0800046c  0000146c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000464  08000464  00001464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000468  08000468  00001468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000146c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000146c  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000146c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000005fc  00000000  00000000  0000149c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001a5  00000000  00000000  00001a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000078  00000000  00000000  00001c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000004c  00000000  00000000  00001cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000ec9  00000000  00000000  00001d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000de4  00000000  00000000  00002bcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c005  00000000  00000000  000039b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0008f9b6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000c8  00000000  00000000  0008f9fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  0008fac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800044c 	.word	0x0800044c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	0800044c 	.word	0x0800044c

080001c8 <main>:

int timestamp = 0;

// Set up : connect a jumper wire from LED output D12, D13, D14 or D15 output to PA6
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0

	timer4_PD12_PD13_PD14_PD15_output_compare();
 80001cc:	f000 f814 	bl	80001f8 <timer4_PD12_PD13_PD14_PD15_output_compare>
	timer3_PA6_input_capture();//Check bit 1 in timer status register TIMx_SR  CC1f interrupt flag
 80001d0:	f000 f8b2 	bl	8000338 <timer3_PA6_input_capture>

	while(1)
	{
		//wait until edge is captured
		while(!(TIM3->SR & SR_CC1IF)){}
 80001d4:	bf00      	nop
 80001d6:	4b06      	ldr	r3, [pc, #24]	@ (80001f0 <main+0x28>)
 80001d8:	691b      	ldr	r3, [r3, #16]
 80001da:	f003 0302 	and.w	r3, r3, #2
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d0f9      	beq.n	80001d6 <main+0xe>

		//Read captured value
		timestamp = TIM3->CCR1;
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <main+0x28>)
 80001e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80001e6:	461a      	mov	r2, r3
 80001e8:	4b02      	ldr	r3, [pc, #8]	@ (80001f4 <main+0x2c>)
 80001ea:	601a      	str	r2, [r3, #0]
		while(!(TIM3->SR & SR_CC1IF)){}
 80001ec:	e7f2      	b.n	80001d4 <main+0xc>
 80001ee:	bf00      	nop
 80001f0:	40000400 	.word	0x40000400
 80001f4:	2000001c 	.word	0x2000001c

080001f8 <timer4_PD12_PD13_PD14_PD15_output_compare>:
	TIM4->CR1 = CR1_CEN;
}


void timer4_PD12_PD13_PD14_PD15_output_compare(void)
{
 80001f8:	b480      	push	{r7}
 80001fa:	af00      	add	r7, sp, #0
	Clear the timer counter
	Enable the timer
	*/

	//Enable clock access to GPIOD
	RCC->AHB1ENR |= GPIODEN;
 80001fc:	4b4b      	ldr	r3, [pc, #300]	@ (800032c <timer4_PD12_PD13_PD14_PD15_output_compare+0x134>)
 80001fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000200:	4a4a      	ldr	r2, [pc, #296]	@ (800032c <timer4_PD12_PD13_PD14_PD15_output_compare+0x134>)
 8000202:	f043 0308 	orr.w	r3, r3, #8
 8000206:	6313      	str	r3, [r2, #48]	@ 0x30

	//Set PD12 mode to alternate function
	GPIOD->MODER &=~(1U<<24);
 8000208:	4b49      	ldr	r3, [pc, #292]	@ (8000330 <timer4_PD12_PD13_PD14_PD15_output_compare+0x138>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a48      	ldr	r2, [pc, #288]	@ (8000330 <timer4_PD12_PD13_PD14_PD15_output_compare+0x138>)
 800020e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000212:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |=(1U<<25);
 8000214:	4b46      	ldr	r3, [pc, #280]	@ (8000330 <timer4_PD12_PD13_PD14_PD15_output_compare+0x138>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a45      	ldr	r2, [pc, #276]	@ (8000330 <timer4_PD12_PD13_PD14_PD15_output_compare+0x138>)
 800021a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800021e:	6013      	str	r3, [r2, #0]
	//Set PD13 mode to alternate function
	GPIOD->MODER &=~(1U<<26);
 8000220:	4b43      	ldr	r3, [pc, #268]	@ (8000330 <timer4_PD12_PD13_PD14_PD15_output_compare+0x138>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a42      	ldr	r2, [pc, #264]	@ (8000330 <timer4_PD12_PD13_PD14_PD15_output_compare+0x138>)
 8000226:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800022a:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |=(1U<<27);
 800022c:	4b40      	ldr	r3, [pc, #256]	@ (8000330 <timer4_PD12_PD13_PD14_PD15_output_compare+0x138>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a3f      	ldr	r2, [pc, #252]	@ (8000330 <timer4_PD12_PD13_PD14_PD15_output_compare+0x138>)
 8000232:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000236:	6013      	str	r3, [r2, #0]
	//Set PD14 mode to alternate function
	GPIOD->MODER &=~(1U<<28);
 8000238:	4b3d      	ldr	r3, [pc, #244]	@ (8000330 <timer4_PD12_PD13_PD14_PD15_output_compare+0x138>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a3c      	ldr	r2, [pc, #240]	@ (8000330 <timer4_PD12_PD13_PD14_PD15_output_compare+0x138>)
 800023e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000242:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |=(1U<<29);
 8000244:	4b3a      	ldr	r3, [pc, #232]	@ (8000330 <timer4_PD12_PD13_PD14_PD15_output_compare+0x138>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a39      	ldr	r2, [pc, #228]	@ (8000330 <timer4_PD12_PD13_PD14_PD15_output_compare+0x138>)
 800024a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800024e:	6013      	str	r3, [r2, #0]
	//Set PD15 mode to alternate function
	GPIOD->MODER &=~(1U<<30);
 8000250:	4b37      	ldr	r3, [pc, #220]	@ (8000330 <timer4_PD12_PD13_PD14_PD15_output_compare+0x138>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a36      	ldr	r2, [pc, #216]	@ (8000330 <timer4_PD12_PD13_PD14_PD15_output_compare+0x138>)
 8000256:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800025a:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |=(1U<<31);
 800025c:	4b34      	ldr	r3, [pc, #208]	@ (8000330 <timer4_PD12_PD13_PD14_PD15_output_compare+0x138>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a33      	ldr	r2, [pc, #204]	@ (8000330 <timer4_PD12_PD13_PD14_PD15_output_compare+0x138>)
 8000262:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000266:	6013      	str	r3, [r2, #0]

	//SET PD12 alternate function to AF2
	GPIOD->AFR[1] |= AFR12_TIM;
 8000268:	4b31      	ldr	r3, [pc, #196]	@ (8000330 <timer4_PD12_PD13_PD14_PD15_output_compare+0x138>)
 800026a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800026c:	4a30      	ldr	r2, [pc, #192]	@ (8000330 <timer4_PD12_PD13_PD14_PD15_output_compare+0x138>)
 800026e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000272:	6253      	str	r3, [r2, #36]	@ 0x24
	//SET PD13 alternate function to AF2
	GPIOD->AFR[1] |= AFR13_TIM;
 8000274:	4b2e      	ldr	r3, [pc, #184]	@ (8000330 <timer4_PD12_PD13_PD14_PD15_output_compare+0x138>)
 8000276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000278:	4a2d      	ldr	r2, [pc, #180]	@ (8000330 <timer4_PD12_PD13_PD14_PD15_output_compare+0x138>)
 800027a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800027e:	6253      	str	r3, [r2, #36]	@ 0x24
	//SET PD14 alternate function to AF2
	GPIOD->AFR[1] |= AFR14_TIM;
 8000280:	4b2b      	ldr	r3, [pc, #172]	@ (8000330 <timer4_PD12_PD13_PD14_PD15_output_compare+0x138>)
 8000282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000284:	4a2a      	ldr	r2, [pc, #168]	@ (8000330 <timer4_PD12_PD13_PD14_PD15_output_compare+0x138>)
 8000286:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800028a:	6253      	str	r3, [r2, #36]	@ 0x24
	//SET PD15 alternate function to AF2
	GPIOD->AFR[1] |= AFR15_TIM;
 800028c:	4b28      	ldr	r3, [pc, #160]	@ (8000330 <timer4_PD12_PD13_PD14_PD15_output_compare+0x138>)
 800028e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000290:	4a27      	ldr	r2, [pc, #156]	@ (8000330 <timer4_PD12_PD13_PD14_PD15_output_compare+0x138>)
 8000292:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000296:	6253      	str	r3, [r2, #36]	@ 0x24

	//Enable clock access to timer 4
	RCC->APB1ENR |= TIMER4EN;
 8000298:	4b24      	ldr	r3, [pc, #144]	@ (800032c <timer4_PD12_PD13_PD14_PD15_output_compare+0x134>)
 800029a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800029c:	4a23      	ldr	r2, [pc, #140]	@ (800032c <timer4_PD12_PD13_PD14_PD15_output_compare+0x134>)
 800029e:	f043 0304 	orr.w	r3, r3, #4
 80002a2:	6413      	str	r3, [r2, #64]	@ 0x40
		//Set pre-scaler value
	TIM4->PSC = 1600-1;  //16 000 000 /1 600 = 10 000     reference manual 18.4.11
 80002a4:	4b23      	ldr	r3, [pc, #140]	@ (8000334 <timer4_PD12_PD13_PD14_PD15_output_compare+0x13c>)
 80002a6:	f240 623f 	movw	r2, #1599	@ 0x63f
 80002aa:	629a      	str	r2, [r3, #40]	@ 0x28
		//Set auto reload value
	TIM4->ARR = 10000-1; // 10 000 / 1000 = 1		reference manual 18.4.12
 80002ac:	4b21      	ldr	r3, [pc, #132]	@ (8000334 <timer4_PD12_PD13_PD14_PD15_output_compare+0x13c>)
 80002ae:	f242 720f 	movw	r2, #9999	@ 0x270f
 80002b2:	62da      	str	r2, [r3, #44]	@ 0x2c

	/*Set output compare toggle mode for channel 1*/
	TIM4->CCMR1 |= O1OC_TOGGLE;
 80002b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000334 <timer4_PD12_PD13_PD14_PD15_output_compare+0x13c>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	4a1e      	ldr	r2, [pc, #120]	@ (8000334 <timer4_PD12_PD13_PD14_PD15_output_compare+0x13c>)
 80002ba:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80002be:	6193      	str	r3, [r2, #24]
	/*Set output compare toggle mode for channel 2*/
	TIM4->CCMR1 |= O2OC_TOGGLE;
 80002c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000334 <timer4_PD12_PD13_PD14_PD15_output_compare+0x13c>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	4a1b      	ldr	r2, [pc, #108]	@ (8000334 <timer4_PD12_PD13_PD14_PD15_output_compare+0x13c>)
 80002c6:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 80002ca:	6193      	str	r3, [r2, #24]
	/*Set output compare toggle mode for channel 3*/
	TIM4->CCMR2 |= O3OC_TOGGLE;
 80002cc:	4b19      	ldr	r3, [pc, #100]	@ (8000334 <timer4_PD12_PD13_PD14_PD15_output_compare+0x13c>)
 80002ce:	69db      	ldr	r3, [r3, #28]
 80002d0:	4a18      	ldr	r2, [pc, #96]	@ (8000334 <timer4_PD12_PD13_PD14_PD15_output_compare+0x13c>)
 80002d2:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80002d6:	61d3      	str	r3, [r2, #28]
	/*Set output compare toggle mode for channel 4*/
	TIM4->CCMR2 |= O4OC_TOGGLE;
 80002d8:	4b16      	ldr	r3, [pc, #88]	@ (8000334 <timer4_PD12_PD13_PD14_PD15_output_compare+0x13c>)
 80002da:	69db      	ldr	r3, [r3, #28]
 80002dc:	4a15      	ldr	r2, [pc, #84]	@ (8000334 <timer4_PD12_PD13_PD14_PD15_output_compare+0x13c>)
 80002de:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 80002e2:	61d3      	str	r3, [r2, #28]

	/*Enable timer4 ch1 in capture compare mode  CCER*/
	TIM4->CCER |= CCER_CC1E;
 80002e4:	4b13      	ldr	r3, [pc, #76]	@ (8000334 <timer4_PD12_PD13_PD14_PD15_output_compare+0x13c>)
 80002e6:	6a1b      	ldr	r3, [r3, #32]
 80002e8:	4a12      	ldr	r2, [pc, #72]	@ (8000334 <timer4_PD12_PD13_PD14_PD15_output_compare+0x13c>)
 80002ea:	f043 0301 	orr.w	r3, r3, #1
 80002ee:	6213      	str	r3, [r2, #32]
	/*Enable timer4 ch2 in capture compare mode  CCER*/
	TIM4->CCER |= CCER_CC2E;
 80002f0:	4b10      	ldr	r3, [pc, #64]	@ (8000334 <timer4_PD12_PD13_PD14_PD15_output_compare+0x13c>)
 80002f2:	6a1b      	ldr	r3, [r3, #32]
 80002f4:	4a0f      	ldr	r2, [pc, #60]	@ (8000334 <timer4_PD12_PD13_PD14_PD15_output_compare+0x13c>)
 80002f6:	f043 0310 	orr.w	r3, r3, #16
 80002fa:	6213      	str	r3, [r2, #32]
	/*Enable timer4 ch3 in capture compare mode  CCER*/
	TIM4->CCER |= CCER_CC3E;
 80002fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000334 <timer4_PD12_PD13_PD14_PD15_output_compare+0x13c>)
 80002fe:	6a1b      	ldr	r3, [r3, #32]
 8000300:	4a0c      	ldr	r2, [pc, #48]	@ (8000334 <timer4_PD12_PD13_PD14_PD15_output_compare+0x13c>)
 8000302:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000306:	6213      	str	r3, [r2, #32]
	/*Enable timer4 ch4 in capture compare mode  CCER*/
	TIM4->CCER |= CCER_CC4E;
 8000308:	4b0a      	ldr	r3, [pc, #40]	@ (8000334 <timer4_PD12_PD13_PD14_PD15_output_compare+0x13c>)
 800030a:	6a1b      	ldr	r3, [r3, #32]
 800030c:	4a09      	ldr	r2, [pc, #36]	@ (8000334 <timer4_PD12_PD13_PD14_PD15_output_compare+0x13c>)
 800030e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000312:	6213      	str	r3, [r2, #32]

	//Clear the timer counter
	TIM4->CNT = 0;
 8000314:	4b07      	ldr	r3, [pc, #28]	@ (8000334 <timer4_PD12_PD13_PD14_PD15_output_compare+0x13c>)
 8000316:	2200      	movs	r2, #0
 8000318:	625a      	str	r2, [r3, #36]	@ 0x24
		//Enable the timer
	TIM4->CR1 = CR1_CEN;
 800031a:	4b06      	ldr	r3, [pc, #24]	@ (8000334 <timer4_PD12_PD13_PD14_PD15_output_compare+0x13c>)
 800031c:	2201      	movs	r2, #1
 800031e:	601a      	str	r2, [r3, #0]
}
 8000320:	bf00      	nop
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	40023800 	.word	0x40023800
 8000330:	40020c00 	.word	0x40020c00
 8000334:	40000800 	.word	0x40000800

08000338 <timer3_PA6_input_capture>:

void timer3_PA6_input_capture(void)
{/*Built the project and debug as STM32
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
	Enable CH1 to capture at rising edge
	Enable timer 3
	*/

	//Enable clock access to GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 800033c:	4b19      	ldr	r3, [pc, #100]	@ (80003a4 <timer3_PA6_input_capture+0x6c>)
 800033e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000340:	4a18      	ldr	r2, [pc, #96]	@ (80003a4 <timer3_PA6_input_capture+0x6c>)
 8000342:	f043 0302 	orr.w	r3, r3, #2
 8000346:	6313      	str	r3, [r2, #48]	@ 0x30

	//Set PA6 mode to alternate function
	GPIOA->MODER |=(1U<<13);
 8000348:	4b17      	ldr	r3, [pc, #92]	@ (80003a8 <timer3_PA6_input_capture+0x70>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4a16      	ldr	r2, [pc, #88]	@ (80003a8 <timer3_PA6_input_capture+0x70>)
 800034e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000352:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<12);
 8000354:	4b14      	ldr	r3, [pc, #80]	@ (80003a8 <timer3_PA6_input_capture+0x70>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a13      	ldr	r2, [pc, #76]	@ (80003a8 <timer3_PA6_input_capture+0x70>)
 800035a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800035e:	6013      	str	r3, [r2, #0]

	//Set alternate function type to TIM3_CH1 ==> AF2 ==> 0x0010
	GPIOA->AFR[0] |= AFR6_TIM;
 8000360:	4b11      	ldr	r3, [pc, #68]	@ (80003a8 <timer3_PA6_input_capture+0x70>)
 8000362:	6a1b      	ldr	r3, [r3, #32]
 8000364:	4a10      	ldr	r2, [pc, #64]	@ (80003a8 <timer3_PA6_input_capture+0x70>)
 8000366:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800036a:	6213      	str	r3, [r2, #32]

	//Enable clock access to timer3
	RCC->APB1ENR |= TIMER3EN;
 800036c:	4b0d      	ldr	r3, [pc, #52]	@ (80003a4 <timer3_PA6_input_capture+0x6c>)
 800036e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000370:	4a0c      	ldr	r2, [pc, #48]	@ (80003a4 <timer3_PA6_input_capture+0x6c>)
 8000372:	f043 0302 	orr.w	r3, r3, #2
 8000376:	6413      	str	r3, [r2, #64]	@ 0x40

	//Set pre-scaler
	TIM3->PSC = 16000 -1;  //16 000 000 /1 6000 = 10 00    reference manual 18.4.11
 8000378:	4b0c      	ldr	r3, [pc, #48]	@ (80003ac <timer3_PA6_input_capture+0x74>)
 800037a:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 800037e:	629a      	str	r2, [r3, #40]	@ 0x28

	//Set CH1 to input capture/input mode (CC1S) at every edge
	TIM3->CCMR1 = CCER_CC1S;
 8000380:	4b0a      	ldr	r3, [pc, #40]	@ (80003ac <timer3_PA6_input_capture+0x74>)
 8000382:	2201      	movs	r2, #1
 8000384:	619a      	str	r2, [r3, #24]

	//Enable CH1 to capture at rising edge (CCER register)
	TIM3->CCER |=  CCER_CC1E; //bit 0
 8000386:	4b09      	ldr	r3, [pc, #36]	@ (80003ac <timer3_PA6_input_capture+0x74>)
 8000388:	6a1b      	ldr	r3, [r3, #32]
 800038a:	4a08      	ldr	r2, [pc, #32]	@ (80003ac <timer3_PA6_input_capture+0x74>)
 800038c:	f043 0301 	orr.w	r3, r3, #1
 8000390:	6213      	str	r3, [r2, #32]

	//Enable timer 3
	TIM3->CR1 =  CR1_CEN;
 8000392:	4b06      	ldr	r3, [pc, #24]	@ (80003ac <timer3_PA6_input_capture+0x74>)
 8000394:	2201      	movs	r2, #1
 8000396:	601a      	str	r2, [r3, #0]
}
 8000398:	bf00      	nop
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	40023800 	.word	0x40023800
 80003a8:	40020000 	.word	0x40020000
 80003ac:	40000400 	.word	0x40000400

080003b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003b0:	480d      	ldr	r0, [pc, #52]	@ (80003e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003b4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003b8:	480c      	ldr	r0, [pc, #48]	@ (80003ec <LoopForever+0x6>)
  ldr r1, =_edata
 80003ba:	490d      	ldr	r1, [pc, #52]	@ (80003f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003bc:	4a0d      	ldr	r2, [pc, #52]	@ (80003f4 <LoopForever+0xe>)
  movs r3, #0
 80003be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003c0:	e002      	b.n	80003c8 <LoopCopyDataInit>

080003c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003c6:	3304      	adds	r3, #4

080003c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003cc:	d3f9      	bcc.n	80003c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ce:	4a0a      	ldr	r2, [pc, #40]	@ (80003f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003d0:	4c0a      	ldr	r4, [pc, #40]	@ (80003fc <LoopForever+0x16>)
  movs r3, #0
 80003d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003d4:	e001      	b.n	80003da <LoopFillZerobss>

080003d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003d8:	3204      	adds	r2, #4

080003da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003dc:	d3fb      	bcc.n	80003d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003de:	f000 f811 	bl	8000404 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003e2:	f7ff fef1 	bl	80001c8 <main>

080003e6 <LoopForever>:

LoopForever:
  b LoopForever
 80003e6:	e7fe      	b.n	80003e6 <LoopForever>
  ldr   r0, =_estack
 80003e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003f0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003f4:	0800046c 	.word	0x0800046c
  ldr r2, =_sbss
 80003f8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003fc:	20000020 	.word	0x20000020

08000400 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000400:	e7fe      	b.n	8000400 <ADC_IRQHandler>
	...

08000404 <__libc_init_array>:
 8000404:	b570      	push	{r4, r5, r6, lr}
 8000406:	4d0d      	ldr	r5, [pc, #52]	@ (800043c <__libc_init_array+0x38>)
 8000408:	4c0d      	ldr	r4, [pc, #52]	@ (8000440 <__libc_init_array+0x3c>)
 800040a:	1b64      	subs	r4, r4, r5
 800040c:	10a4      	asrs	r4, r4, #2
 800040e:	2600      	movs	r6, #0
 8000410:	42a6      	cmp	r6, r4
 8000412:	d109      	bne.n	8000428 <__libc_init_array+0x24>
 8000414:	4d0b      	ldr	r5, [pc, #44]	@ (8000444 <__libc_init_array+0x40>)
 8000416:	4c0c      	ldr	r4, [pc, #48]	@ (8000448 <__libc_init_array+0x44>)
 8000418:	f000 f818 	bl	800044c <_init>
 800041c:	1b64      	subs	r4, r4, r5
 800041e:	10a4      	asrs	r4, r4, #2
 8000420:	2600      	movs	r6, #0
 8000422:	42a6      	cmp	r6, r4
 8000424:	d105      	bne.n	8000432 <__libc_init_array+0x2e>
 8000426:	bd70      	pop	{r4, r5, r6, pc}
 8000428:	f855 3b04 	ldr.w	r3, [r5], #4
 800042c:	4798      	blx	r3
 800042e:	3601      	adds	r6, #1
 8000430:	e7ee      	b.n	8000410 <__libc_init_array+0xc>
 8000432:	f855 3b04 	ldr.w	r3, [r5], #4
 8000436:	4798      	blx	r3
 8000438:	3601      	adds	r6, #1
 800043a:	e7f2      	b.n	8000422 <__libc_init_array+0x1e>
 800043c:	08000464 	.word	0x08000464
 8000440:	08000464 	.word	0x08000464
 8000444:	08000464 	.word	0x08000464
 8000448:	08000468 	.word	0x08000468

0800044c <_init>:
 800044c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800044e:	bf00      	nop
 8000450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000452:	bc08      	pop	{r3}
 8000454:	469e      	mov	lr, r3
 8000456:	4770      	bx	lr

08000458 <_fini>:
 8000458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800045a:	bf00      	nop
 800045c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800045e:	bc08      	pop	{r3}
 8000460:	469e      	mov	lr, r3
 8000462:	4770      	bx	lr
